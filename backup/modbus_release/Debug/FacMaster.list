
FacMaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007650  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  080077e0  080077e0  000177e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a14  08007a14  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007a14  08007a14  00017a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a1c  08007a1c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a1c  08007a1c  00017a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a20  08007a20  00017a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007a24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000748  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200007b8  200007b8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000188be  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e01  00000000  00000000  0003895e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001538  00000000  00000000  0003c760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001388  00000000  00000000  0003dc98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006a04  00000000  00000000  0003f020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cd71  00000000  00000000  00045a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9cfc  00000000  00000000  00062795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012c491  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d88  00000000  00000000  0012c4e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080077c8 	.word	0x080077c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080077c8 	.word	0x080077c8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__gedf2>:
 80005f8:	f04f 3cff 	mov.w	ip, #4294967295
 80005fc:	e006      	b.n	800060c <__cmpdf2+0x4>
 80005fe:	bf00      	nop

08000600 <__ledf2>:
 8000600:	f04f 0c01 	mov.w	ip, #1
 8000604:	e002      	b.n	800060c <__cmpdf2+0x4>
 8000606:	bf00      	nop

08000608 <__cmpdf2>:
 8000608:	f04f 0c01 	mov.w	ip, #1
 800060c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000610:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000614:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000618:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800061c:	bf18      	it	ne
 800061e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000622:	d01b      	beq.n	800065c <__cmpdf2+0x54>
 8000624:	b001      	add	sp, #4
 8000626:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800062a:	bf0c      	ite	eq
 800062c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000630:	ea91 0f03 	teqne	r1, r3
 8000634:	bf02      	ittt	eq
 8000636:	ea90 0f02 	teqeq	r0, r2
 800063a:	2000      	moveq	r0, #0
 800063c:	4770      	bxeq	lr
 800063e:	f110 0f00 	cmn.w	r0, #0
 8000642:	ea91 0f03 	teq	r1, r3
 8000646:	bf58      	it	pl
 8000648:	4299      	cmppl	r1, r3
 800064a:	bf08      	it	eq
 800064c:	4290      	cmpeq	r0, r2
 800064e:	bf2c      	ite	cs
 8000650:	17d8      	asrcs	r0, r3, #31
 8000652:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000656:	f040 0001 	orr.w	r0, r0, #1
 800065a:	4770      	bx	lr
 800065c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000660:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000664:	d102      	bne.n	800066c <__cmpdf2+0x64>
 8000666:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800066a:	d107      	bne.n	800067c <__cmpdf2+0x74>
 800066c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000670:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000674:	d1d6      	bne.n	8000624 <__cmpdf2+0x1c>
 8000676:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800067a:	d0d3      	beq.n	8000624 <__cmpdf2+0x1c>
 800067c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <__aeabi_cdrcmple>:
 8000684:	4684      	mov	ip, r0
 8000686:	4610      	mov	r0, r2
 8000688:	4662      	mov	r2, ip
 800068a:	468c      	mov	ip, r1
 800068c:	4619      	mov	r1, r3
 800068e:	4663      	mov	r3, ip
 8000690:	e000      	b.n	8000694 <__aeabi_cdcmpeq>
 8000692:	bf00      	nop

08000694 <__aeabi_cdcmpeq>:
 8000694:	b501      	push	{r0, lr}
 8000696:	f7ff ffb7 	bl	8000608 <__cmpdf2>
 800069a:	2800      	cmp	r0, #0
 800069c:	bf48      	it	mi
 800069e:	f110 0f00 	cmnmi.w	r0, #0
 80006a2:	bd01      	pop	{r0, pc}

080006a4 <__aeabi_dcmpeq>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff fff4 	bl	8000694 <__aeabi_cdcmpeq>
 80006ac:	bf0c      	ite	eq
 80006ae:	2001      	moveq	r0, #1
 80006b0:	2000      	movne	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_dcmplt>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffea 	bl	8000694 <__aeabi_cdcmpeq>
 80006c0:	bf34      	ite	cc
 80006c2:	2001      	movcc	r0, #1
 80006c4:	2000      	movcs	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_dcmple>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffe0 	bl	8000694 <__aeabi_cdcmpeq>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_dcmpge>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffce 	bl	8000684 <__aeabi_cdrcmple>
 80006e8:	bf94      	ite	ls
 80006ea:	2001      	movls	r0, #1
 80006ec:	2000      	movhi	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_dcmpgt>:
 80006f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f8:	f7ff ffc4 	bl	8000684 <__aeabi_cdrcmple>
 80006fc:	bf34      	ite	cc
 80006fe:	2001      	movcc	r0, #1
 8000700:	2000      	movcs	r0, #0
 8000702:	f85d fb08 	ldr.w	pc, [sp], #8
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b974 	b.w	8000a08 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9d08      	ldr	r5, [sp, #32]
 800073e:	4604      	mov	r4, r0
 8000740:	468e      	mov	lr, r1
 8000742:	2b00      	cmp	r3, #0
 8000744:	d14d      	bne.n	80007e2 <__udivmoddi4+0xaa>
 8000746:	428a      	cmp	r2, r1
 8000748:	4694      	mov	ip, r2
 800074a:	d969      	bls.n	8000820 <__udivmoddi4+0xe8>
 800074c:	fab2 f282 	clz	r2, r2
 8000750:	b152      	cbz	r2, 8000768 <__udivmoddi4+0x30>
 8000752:	fa01 f302 	lsl.w	r3, r1, r2
 8000756:	f1c2 0120 	rsb	r1, r2, #32
 800075a:	fa20 f101 	lsr.w	r1, r0, r1
 800075e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000762:	ea41 0e03 	orr.w	lr, r1, r3
 8000766:	4094      	lsls	r4, r2
 8000768:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800076c:	0c21      	lsrs	r1, r4, #16
 800076e:	fbbe f6f8 	udiv	r6, lr, r8
 8000772:	fa1f f78c 	uxth.w	r7, ip
 8000776:	fb08 e316 	mls	r3, r8, r6, lr
 800077a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800077e:	fb06 f107 	mul.w	r1, r6, r7
 8000782:	4299      	cmp	r1, r3
 8000784:	d90a      	bls.n	800079c <__udivmoddi4+0x64>
 8000786:	eb1c 0303 	adds.w	r3, ip, r3
 800078a:	f106 30ff 	add.w	r0, r6, #4294967295
 800078e:	f080 811f 	bcs.w	80009d0 <__udivmoddi4+0x298>
 8000792:	4299      	cmp	r1, r3
 8000794:	f240 811c 	bls.w	80009d0 <__udivmoddi4+0x298>
 8000798:	3e02      	subs	r6, #2
 800079a:	4463      	add	r3, ip
 800079c:	1a5b      	subs	r3, r3, r1
 800079e:	b2a4      	uxth	r4, r4
 80007a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80007a4:	fb08 3310 	mls	r3, r8, r0, r3
 80007a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007ac:	fb00 f707 	mul.w	r7, r0, r7
 80007b0:	42a7      	cmp	r7, r4
 80007b2:	d90a      	bls.n	80007ca <__udivmoddi4+0x92>
 80007b4:	eb1c 0404 	adds.w	r4, ip, r4
 80007b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80007bc:	f080 810a 	bcs.w	80009d4 <__udivmoddi4+0x29c>
 80007c0:	42a7      	cmp	r7, r4
 80007c2:	f240 8107 	bls.w	80009d4 <__udivmoddi4+0x29c>
 80007c6:	4464      	add	r4, ip
 80007c8:	3802      	subs	r0, #2
 80007ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007ce:	1be4      	subs	r4, r4, r7
 80007d0:	2600      	movs	r6, #0
 80007d2:	b11d      	cbz	r5, 80007dc <__udivmoddi4+0xa4>
 80007d4:	40d4      	lsrs	r4, r2
 80007d6:	2300      	movs	r3, #0
 80007d8:	e9c5 4300 	strd	r4, r3, [r5]
 80007dc:	4631      	mov	r1, r6
 80007de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007e2:	428b      	cmp	r3, r1
 80007e4:	d909      	bls.n	80007fa <__udivmoddi4+0xc2>
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	f000 80ef 	beq.w	80009ca <__udivmoddi4+0x292>
 80007ec:	2600      	movs	r6, #0
 80007ee:	e9c5 0100 	strd	r0, r1, [r5]
 80007f2:	4630      	mov	r0, r6
 80007f4:	4631      	mov	r1, r6
 80007f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007fa:	fab3 f683 	clz	r6, r3
 80007fe:	2e00      	cmp	r6, #0
 8000800:	d14a      	bne.n	8000898 <__udivmoddi4+0x160>
 8000802:	428b      	cmp	r3, r1
 8000804:	d302      	bcc.n	800080c <__udivmoddi4+0xd4>
 8000806:	4282      	cmp	r2, r0
 8000808:	f200 80f9 	bhi.w	80009fe <__udivmoddi4+0x2c6>
 800080c:	1a84      	subs	r4, r0, r2
 800080e:	eb61 0303 	sbc.w	r3, r1, r3
 8000812:	2001      	movs	r0, #1
 8000814:	469e      	mov	lr, r3
 8000816:	2d00      	cmp	r5, #0
 8000818:	d0e0      	beq.n	80007dc <__udivmoddi4+0xa4>
 800081a:	e9c5 4e00 	strd	r4, lr, [r5]
 800081e:	e7dd      	b.n	80007dc <__udivmoddi4+0xa4>
 8000820:	b902      	cbnz	r2, 8000824 <__udivmoddi4+0xec>
 8000822:	deff      	udf	#255	; 0xff
 8000824:	fab2 f282 	clz	r2, r2
 8000828:	2a00      	cmp	r2, #0
 800082a:	f040 8092 	bne.w	8000952 <__udivmoddi4+0x21a>
 800082e:	eba1 010c 	sub.w	r1, r1, ip
 8000832:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000836:	fa1f fe8c 	uxth.w	lr, ip
 800083a:	2601      	movs	r6, #1
 800083c:	0c20      	lsrs	r0, r4, #16
 800083e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000842:	fb07 1113 	mls	r1, r7, r3, r1
 8000846:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800084a:	fb0e f003 	mul.w	r0, lr, r3
 800084e:	4288      	cmp	r0, r1
 8000850:	d908      	bls.n	8000864 <__udivmoddi4+0x12c>
 8000852:	eb1c 0101 	adds.w	r1, ip, r1
 8000856:	f103 38ff 	add.w	r8, r3, #4294967295
 800085a:	d202      	bcs.n	8000862 <__udivmoddi4+0x12a>
 800085c:	4288      	cmp	r0, r1
 800085e:	f200 80cb 	bhi.w	80009f8 <__udivmoddi4+0x2c0>
 8000862:	4643      	mov	r3, r8
 8000864:	1a09      	subs	r1, r1, r0
 8000866:	b2a4      	uxth	r4, r4
 8000868:	fbb1 f0f7 	udiv	r0, r1, r7
 800086c:	fb07 1110 	mls	r1, r7, r0, r1
 8000870:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000874:	fb0e fe00 	mul.w	lr, lr, r0
 8000878:	45a6      	cmp	lr, r4
 800087a:	d908      	bls.n	800088e <__udivmoddi4+0x156>
 800087c:	eb1c 0404 	adds.w	r4, ip, r4
 8000880:	f100 31ff 	add.w	r1, r0, #4294967295
 8000884:	d202      	bcs.n	800088c <__udivmoddi4+0x154>
 8000886:	45a6      	cmp	lr, r4
 8000888:	f200 80bb 	bhi.w	8000a02 <__udivmoddi4+0x2ca>
 800088c:	4608      	mov	r0, r1
 800088e:	eba4 040e 	sub.w	r4, r4, lr
 8000892:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000896:	e79c      	b.n	80007d2 <__udivmoddi4+0x9a>
 8000898:	f1c6 0720 	rsb	r7, r6, #32
 800089c:	40b3      	lsls	r3, r6
 800089e:	fa22 fc07 	lsr.w	ip, r2, r7
 80008a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80008a6:	fa20 f407 	lsr.w	r4, r0, r7
 80008aa:	fa01 f306 	lsl.w	r3, r1, r6
 80008ae:	431c      	orrs	r4, r3
 80008b0:	40f9      	lsrs	r1, r7
 80008b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80008b6:	fa00 f306 	lsl.w	r3, r0, r6
 80008ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80008be:	0c20      	lsrs	r0, r4, #16
 80008c0:	fa1f fe8c 	uxth.w	lr, ip
 80008c4:	fb09 1118 	mls	r1, r9, r8, r1
 80008c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008cc:	fb08 f00e 	mul.w	r0, r8, lr
 80008d0:	4288      	cmp	r0, r1
 80008d2:	fa02 f206 	lsl.w	r2, r2, r6
 80008d6:	d90b      	bls.n	80008f0 <__udivmoddi4+0x1b8>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80008e0:	f080 8088 	bcs.w	80009f4 <__udivmoddi4+0x2bc>
 80008e4:	4288      	cmp	r0, r1
 80008e6:	f240 8085 	bls.w	80009f4 <__udivmoddi4+0x2bc>
 80008ea:	f1a8 0802 	sub.w	r8, r8, #2
 80008ee:	4461      	add	r1, ip
 80008f0:	1a09      	subs	r1, r1, r0
 80008f2:	b2a4      	uxth	r4, r4
 80008f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008f8:	fb09 1110 	mls	r1, r9, r0, r1
 80008fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000900:	fb00 fe0e 	mul.w	lr, r0, lr
 8000904:	458e      	cmp	lr, r1
 8000906:	d908      	bls.n	800091a <__udivmoddi4+0x1e2>
 8000908:	eb1c 0101 	adds.w	r1, ip, r1
 800090c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000910:	d26c      	bcs.n	80009ec <__udivmoddi4+0x2b4>
 8000912:	458e      	cmp	lr, r1
 8000914:	d96a      	bls.n	80009ec <__udivmoddi4+0x2b4>
 8000916:	3802      	subs	r0, #2
 8000918:	4461      	add	r1, ip
 800091a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800091e:	fba0 9402 	umull	r9, r4, r0, r2
 8000922:	eba1 010e 	sub.w	r1, r1, lr
 8000926:	42a1      	cmp	r1, r4
 8000928:	46c8      	mov	r8, r9
 800092a:	46a6      	mov	lr, r4
 800092c:	d356      	bcc.n	80009dc <__udivmoddi4+0x2a4>
 800092e:	d053      	beq.n	80009d8 <__udivmoddi4+0x2a0>
 8000930:	b15d      	cbz	r5, 800094a <__udivmoddi4+0x212>
 8000932:	ebb3 0208 	subs.w	r2, r3, r8
 8000936:	eb61 010e 	sbc.w	r1, r1, lr
 800093a:	fa01 f707 	lsl.w	r7, r1, r7
 800093e:	fa22 f306 	lsr.w	r3, r2, r6
 8000942:	40f1      	lsrs	r1, r6
 8000944:	431f      	orrs	r7, r3
 8000946:	e9c5 7100 	strd	r7, r1, [r5]
 800094a:	2600      	movs	r6, #0
 800094c:	4631      	mov	r1, r6
 800094e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000952:	f1c2 0320 	rsb	r3, r2, #32
 8000956:	40d8      	lsrs	r0, r3
 8000958:	fa0c fc02 	lsl.w	ip, ip, r2
 800095c:	fa21 f303 	lsr.w	r3, r1, r3
 8000960:	4091      	lsls	r1, r2
 8000962:	4301      	orrs	r1, r0
 8000964:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000968:	fa1f fe8c 	uxth.w	lr, ip
 800096c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000970:	fb07 3610 	mls	r6, r7, r0, r3
 8000974:	0c0b      	lsrs	r3, r1, #16
 8000976:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800097a:	fb00 f60e 	mul.w	r6, r0, lr
 800097e:	429e      	cmp	r6, r3
 8000980:	fa04 f402 	lsl.w	r4, r4, r2
 8000984:	d908      	bls.n	8000998 <__udivmoddi4+0x260>
 8000986:	eb1c 0303 	adds.w	r3, ip, r3
 800098a:	f100 38ff 	add.w	r8, r0, #4294967295
 800098e:	d22f      	bcs.n	80009f0 <__udivmoddi4+0x2b8>
 8000990:	429e      	cmp	r6, r3
 8000992:	d92d      	bls.n	80009f0 <__udivmoddi4+0x2b8>
 8000994:	3802      	subs	r0, #2
 8000996:	4463      	add	r3, ip
 8000998:	1b9b      	subs	r3, r3, r6
 800099a:	b289      	uxth	r1, r1
 800099c:	fbb3 f6f7 	udiv	r6, r3, r7
 80009a0:	fb07 3316 	mls	r3, r7, r6, r3
 80009a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009a8:	fb06 f30e 	mul.w	r3, r6, lr
 80009ac:	428b      	cmp	r3, r1
 80009ae:	d908      	bls.n	80009c2 <__udivmoddi4+0x28a>
 80009b0:	eb1c 0101 	adds.w	r1, ip, r1
 80009b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80009b8:	d216      	bcs.n	80009e8 <__udivmoddi4+0x2b0>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d914      	bls.n	80009e8 <__udivmoddi4+0x2b0>
 80009be:	3e02      	subs	r6, #2
 80009c0:	4461      	add	r1, ip
 80009c2:	1ac9      	subs	r1, r1, r3
 80009c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80009c8:	e738      	b.n	800083c <__udivmoddi4+0x104>
 80009ca:	462e      	mov	r6, r5
 80009cc:	4628      	mov	r0, r5
 80009ce:	e705      	b.n	80007dc <__udivmoddi4+0xa4>
 80009d0:	4606      	mov	r6, r0
 80009d2:	e6e3      	b.n	800079c <__udivmoddi4+0x64>
 80009d4:	4618      	mov	r0, r3
 80009d6:	e6f8      	b.n	80007ca <__udivmoddi4+0x92>
 80009d8:	454b      	cmp	r3, r9
 80009da:	d2a9      	bcs.n	8000930 <__udivmoddi4+0x1f8>
 80009dc:	ebb9 0802 	subs.w	r8, r9, r2
 80009e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009e4:	3801      	subs	r0, #1
 80009e6:	e7a3      	b.n	8000930 <__udivmoddi4+0x1f8>
 80009e8:	4646      	mov	r6, r8
 80009ea:	e7ea      	b.n	80009c2 <__udivmoddi4+0x28a>
 80009ec:	4620      	mov	r0, r4
 80009ee:	e794      	b.n	800091a <__udivmoddi4+0x1e2>
 80009f0:	4640      	mov	r0, r8
 80009f2:	e7d1      	b.n	8000998 <__udivmoddi4+0x260>
 80009f4:	46d0      	mov	r8, sl
 80009f6:	e77b      	b.n	80008f0 <__udivmoddi4+0x1b8>
 80009f8:	3b02      	subs	r3, #2
 80009fa:	4461      	add	r1, ip
 80009fc:	e732      	b.n	8000864 <__udivmoddi4+0x12c>
 80009fe:	4630      	mov	r0, r6
 8000a00:	e709      	b.n	8000816 <__udivmoddi4+0xde>
 8000a02:	4464      	add	r4, ip
 8000a04:	3802      	subs	r0, #2
 8000a06:	e742      	b.n	800088e <__udivmoddi4+0x156>

08000a08 <__aeabi_idiv0>:
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <cc1120_gdo0_register_callback>:
uint16_t (*gdo2_cb)(void);



void cc1120_gdo0_register_callback(uint16_t (*cb)(void))
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  gdo0_cb = cb;
 8000a14:	4a04      	ldr	r2, [pc, #16]	; (8000a28 <cc1120_gdo0_register_callback+0x1c>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6013      	str	r3, [r2, #0]
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	2000008c 	.word	0x2000008c

08000a2c <cc112x_hw_rst>:
{
  gdo2_cb = cb;
}


void cc112x_hw_rst(void) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(CC1120_RST_PORT, CC1120_RST_PIN, GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2110      	movs	r1, #16
 8000a34:	4807      	ldr	r0, [pc, #28]	; (8000a54 <cc112x_hw_rst+0x28>)
 8000a36:	f003 fe69 	bl	800470c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000a3a:	200a      	movs	r0, #10
 8000a3c:	f003 fb02 	bl	8004044 <HAL_Delay>
  HAL_GPIO_WritePin(CC1120_RST_PORT, CC1120_RST_PIN, GPIO_PIN_SET);
 8000a40:	2201      	movs	r2, #1
 8000a42:	2110      	movs	r1, #16
 8000a44:	4803      	ldr	r0, [pc, #12]	; (8000a54 <cc112x_hw_rst+0x28>)
 8000a46:	f003 fe61 	bl	800470c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000a4a:	2005      	movs	r0, #5
 8000a4c:	f003 fafa 	bl	8004044 <HAL_Delay>
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40020800 	.word	0x40020800

08000a58 <CC1120_SpiRead>:



uint8_t CC1120_SpiRead(uint8_t c)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af02      	add	r7, sp, #8
 8000a5e:	4603      	mov	r3, r0
 8000a60:	71fb      	strb	r3, [r7, #7]
	uint8_t rc;
	HAL_StatusTypeDef status = HAL_OK;
 8000a62:	2300      	movs	r3, #0
 8000a64:	73fb      	strb	r3, [r7, #15]
	status = HAL_SPI_TransmitReceive(&hspi1, &c, &rc, 1, 20);
 8000a66:	f107 020e 	add.w	r2, r7, #14
 8000a6a:	1df9      	adds	r1, r7, #7
 8000a6c:	2314      	movs	r3, #20
 8000a6e:	9300      	str	r3, [sp, #0]
 8000a70:	2301      	movs	r3, #1
 8000a72:	4807      	ldr	r0, [pc, #28]	; (8000a90 <CC1120_SpiRead+0x38>)
 8000a74:	f004 fe1d 	bl	80056b2 <HAL_SPI_TransmitReceive>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK)
 8000a7c:	7bfb      	ldrb	r3, [r7, #15]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <CC1120_SpiRead+0x2e>
	{
		return 0xff;
 8000a82:	23ff      	movs	r3, #255	; 0xff
 8000a84:	e000      	b.n	8000a88 <CC1120_SpiRead+0x30>
	}
	return (rc);
 8000a86:	7bbb      	ldrb	r3, [r7, #14]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3710      	adds	r7, #16
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000678 	.word	0x20000678

08000a94 <CC1120_SpiWrite>:

uint8_t CC1120_SpiWrite(uint8_t c)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status = HAL_OK;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	73fb      	strb	r3, [r7, #15]
	status = HAL_SPI_Transmit(&hspi1, &c, 1, 20);
 8000aa2:	1df9      	adds	r1, r7, #7
 8000aa4:	2314      	movs	r3, #20
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	4807      	ldr	r0, [pc, #28]	; (8000ac8 <CC1120_SpiWrite+0x34>)
 8000aaa:	f004 fcc6 	bl	800543a <HAL_SPI_Transmit>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK)
 8000ab2:	7bfb      	ldrb	r3, [r7, #15]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <CC1120_SpiWrite+0x28>
	{
		return 0xff;
 8000ab8:	23ff      	movs	r3, #255	; 0xff
 8000aba:	e000      	b.n	8000abe <CC1120_SpiWrite+0x2a>
	}
	return c;
 8000abc:	79fb      	ldrb	r3, [r7, #7]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000678 	.word	0x20000678

08000acc <CC1120_SpiCmdStrobe>:

uint8_t CC1120_SpiCmdStrobe(uint8_t cmd)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af02      	add	r7, sp, #8
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status = HAL_OK;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	73fb      	strb	r3, [r7, #15]

	uint8_t rc;
	SPI1_NSS_LOW();
 8000ada:	2200      	movs	r2, #0
 8000adc:	2110      	movs	r1, #16
 8000ade:	480e      	ldr	r0, [pc, #56]	; (8000b18 <CC1120_SpiCmdStrobe+0x4c>)
 8000ae0:	f003 fe14 	bl	800470c <HAL_GPIO_WritePin>

	status = HAL_SPI_TransmitReceive(&hspi1, &cmd, &rc, 1, 20);
 8000ae4:	f107 020e 	add.w	r2, r7, #14
 8000ae8:	1df9      	adds	r1, r7, #7
 8000aea:	2314      	movs	r3, #20
 8000aec:	9300      	str	r3, [sp, #0]
 8000aee:	2301      	movs	r3, #1
 8000af0:	480a      	ldr	r0, [pc, #40]	; (8000b1c <CC1120_SpiCmdStrobe+0x50>)
 8000af2:	f004 fdde 	bl	80056b2 <HAL_SPI_TransmitReceive>
 8000af6:	4603      	mov	r3, r0
 8000af8:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK)
 8000afa:	7bfb      	ldrb	r3, [r7, #15]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <CC1120_SpiCmdStrobe+0x38>
	{

		return 0xFF;
 8000b00:	23ff      	movs	r3, #255	; 0xff
 8000b02:	e005      	b.n	8000b10 <CC1120_SpiCmdStrobe+0x44>
	}
	SPI1_NSS_HIGH();
 8000b04:	2201      	movs	r2, #1
 8000b06:	2110      	movs	r1, #16
 8000b08:	4803      	ldr	r0, [pc, #12]	; (8000b18 <CC1120_SpiCmdStrobe+0x4c>)
 8000b0a:	f003 fdff 	bl	800470c <HAL_GPIO_WritePin>
	return (rc);
 8000b0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40020000 	.word	0x40020000
 8000b1c:	20000678 	.word	0x20000678

08000b20 <CC1120_ReadWriteBurstSingle>:
// ---------------------------------------

void CC1120_ReadWriteBurstSingle(uint16_t addr, uint8_t *pData, uint8_t len)
{
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	6039      	str	r1, [r7, #0]
 8000b2a:	80fb      	strh	r3, [r7, #6]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	717b      	strb	r3, [r7, #5]
	unsigned i;
	/* Communicate len number of bytes: if RX - the procedure sends 0x00 to push bytes from slave*/
	if (addr & RADIO_READ_ACCESS)
 8000b30:	88fb      	ldrh	r3, [r7, #6]
 8000b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d01f      	beq.n	8000b7a <CC1120_ReadWriteBurstSingle+0x5a>
	{
		if (addr & RADIO_BURST_ACCESS)
 8000b3a:	88fb      	ldrh	r3, [r7, #6]
 8000b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d012      	beq.n	8000b6a <CC1120_ReadWriteBurstSingle+0x4a>
		{
			for (i = 0; i < len; i++)
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	e00a      	b.n	8000b60 <CC1120_ReadWriteBurstSingle+0x40>
			{
				*pData++ = CC1120_SpiRead(0); /* Possible to combining read and write as one access type */
 8000b4a:	683c      	ldr	r4, [r7, #0]
 8000b4c:	1c63      	adds	r3, r4, #1
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	2000      	movs	r0, #0
 8000b52:	f7ff ff81 	bl	8000a58 <CC1120_SpiRead>
 8000b56:	4603      	mov	r3, r0
 8000b58:	7023      	strb	r3, [r4, #0]
			for (i = 0; i < len; i++)
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	797b      	ldrb	r3, [r7, #5]
 8000b62:	68fa      	ldr	r2, [r7, #12]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d3f0      	bcc.n	8000b4a <CC1120_ReadWriteBurstSingle+0x2a>
		else
		{
			CC1120_SpiWrite(*pData);
		}
	}
	return;
 8000b68:	e024      	b.n	8000bb4 <CC1120_ReadWriteBurstSingle+0x94>
			*pData = CC1120_SpiRead(0);
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f7ff ff74 	bl	8000a58 <CC1120_SpiRead>
 8000b70:	4603      	mov	r3, r0
 8000b72:	461a      	mov	r2, r3
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	701a      	strb	r2, [r3, #0]
	return;
 8000b78:	e01c      	b.n	8000bb4 <CC1120_ReadWriteBurstSingle+0x94>
		if (addr & RADIO_BURST_ACCESS)
 8000b7a:	88fb      	ldrh	r3, [r7, #6]
 8000b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d011      	beq.n	8000ba8 <CC1120_ReadWriteBurstSingle+0x88>
			for (i = 0; i < len; i++)
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	e009      	b.n	8000b9e <CC1120_ReadWriteBurstSingle+0x7e>
				CC1120_SpiWrite(*pData++);
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	1c5a      	adds	r2, r3, #1
 8000b8e:	603a      	str	r2, [r7, #0]
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff ff7e 	bl	8000a94 <CC1120_SpiWrite>
			for (i = 0; i < len; i++)
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	797b      	ldrb	r3, [r7, #5]
 8000ba0:	68fa      	ldr	r2, [r7, #12]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d3f1      	bcc.n	8000b8a <CC1120_ReadWriteBurstSingle+0x6a>
	return;
 8000ba6:	e005      	b.n	8000bb4 <CC1120_ReadWriteBurstSingle+0x94>
			CC1120_SpiWrite(*pData);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ff71 	bl	8000a94 <CC1120_SpiWrite>
	return;
 8000bb2:	bf00      	nop
}
 8000bb4:	3714      	adds	r7, #20
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd90      	pop	{r4, r7, pc}
	...

08000bbc <CC1120_8BitRegAccess>:

uint8_t CC1120_8BitRegAccess(uint8_t accessType, uint8_t addrByte, uint8_t *pData, uint8_t len)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	603a      	str	r2, [r7, #0]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
 8000bca:	460b      	mov	r3, r1
 8000bcc:	71bb      	strb	r3, [r7, #6]
 8000bce:	4613      	mov	r3, r2
 8000bd0:	717b      	strb	r3, [r7, #5]
	char readValue;

	/* Pull CS_N low and wait for SO to go low before communication starts */
	SPI1_NSS_LOW();
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2110      	movs	r1, #16
 8000bd6:	4810      	ldr	r0, [pc, #64]	; (8000c18 <CC1120_8BitRegAccess+0x5c>)
 8000bd8:	f003 fd98 	bl	800470c <HAL_GPIO_WritePin>
	/* send register address byte */
	readValue = CC1120_SpiRead(accessType | addrByte);
 8000bdc:	79fa      	ldrb	r2, [r7, #7]
 8000bde:	79bb      	ldrb	r3, [r7, #6]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff ff37 	bl	8000a58 <CC1120_SpiRead>
 8000bea:	4603      	mov	r3, r0
 8000bec:	73fb      	strb	r3, [r7, #15]
	CC1120_ReadWriteBurstSingle(accessType | addrByte, pData, len);
 8000bee:	79fa      	ldrb	r2, [r7, #7]
 8000bf0:	79bb      	ldrb	r3, [r7, #6]
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	797a      	ldrb	r2, [r7, #5]
 8000bfa:	6839      	ldr	r1, [r7, #0]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff ff8f 	bl	8000b20 <CC1120_ReadWriteBurstSingle>
	SPI1_NSS_HIGH();
 8000c02:	2201      	movs	r2, #1
 8000c04:	2110      	movs	r1, #16
 8000c06:	4804      	ldr	r0, [pc, #16]	; (8000c18 <CC1120_8BitRegAccess+0x5c>)
 8000c08:	f003 fd80 	bl	800470c <HAL_GPIO_WritePin>
	/* return the status byte value */
	return (readValue);
 8000c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40020000 	.word	0x40020000

08000c1c <CC1120_16BitRegAccess>:

uint8_t CC1120_16BitRegAccess(uint8_t accessType, uint8_t extAddr, uint8_t regAddr, uint8_t *pData, uint8_t len)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	4603      	mov	r3, r0
 8000c26:	71fb      	strb	r3, [r7, #7]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	71bb      	strb	r3, [r7, #6]
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	717b      	strb	r3, [r7, #5]
	uint8_t readValue;

	SPI1_NSS_LOW();
 8000c30:	2200      	movs	r2, #0
 8000c32:	2110      	movs	r1, #16
 8000c34:	4811      	ldr	r0, [pc, #68]	; (8000c7c <CC1120_16BitRegAccess+0x60>)
 8000c36:	f003 fd69 	bl	800470c <HAL_GPIO_WritePin>
	/* send extended address byte with access type bits set */
	readValue = CC1120_SpiRead(accessType | extAddr);
 8000c3a:	79fa      	ldrb	r2, [r7, #7]
 8000c3c:	79bb      	ldrb	r3, [r7, #6]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff ff08 	bl	8000a58 <CC1120_SpiRead>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	73fb      	strb	r3, [r7, #15]
	CC1120_SpiWrite(regAddr);
 8000c4c:	797b      	ldrb	r3, [r7, #5]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff ff20 	bl	8000a94 <CC1120_SpiWrite>
	/* Communicate len number of bytes */
	CC1120_ReadWriteBurstSingle(accessType | extAddr, pData, len);
 8000c54:	79fa      	ldrb	r2, [r7, #7]
 8000c56:	79bb      	ldrb	r3, [r7, #6]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	7e3a      	ldrb	r2, [r7, #24]
 8000c60:	6839      	ldr	r1, [r7, #0]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff ff5c 	bl	8000b20 <CC1120_ReadWriteBurstSingle>
	SPI1_NSS_HIGH();
 8000c68:	2201      	movs	r2, #1
 8000c6a:	2110      	movs	r1, #16
 8000c6c:	4803      	ldr	r0, [pc, #12]	; (8000c7c <CC1120_16BitRegAccess+0x60>)
 8000c6e:	f003 fd4d 	bl	800470c <HAL_GPIO_WritePin>
	/* return the status byte value */
	return (readValue);
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40020000 	.word	0x40020000

08000c80 <CC1120_SpiWriteReg>:

uint8_t CC1120_SpiWriteReg(uint16_t addr, uint8_t *pData, uint8_t len)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af02      	add	r7, sp, #8
 8000c86:	4603      	mov	r3, r0
 8000c88:	6039      	str	r1, [r7, #0]
 8000c8a:	80fb      	strh	r3, [r7, #6]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	717b      	strb	r3, [r7, #5]
	uint8_t tempExt = (uint8_t) (addr >> 8);
 8000c90:	88fb      	ldrh	r3, [r7, #6]
 8000c92:	0a1b      	lsrs	r3, r3, #8
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	73bb      	strb	r3, [r7, #14]
	uint8_t tempAddr = (uint8_t) (addr & 0x00FF);
 8000c98:	88fb      	ldrh	r3, [r7, #6]
 8000c9a:	737b      	strb	r3, [r7, #13]
	uint8_t rc;

	/* Checking if this is a FIFO access - returns chip not ready */
	if ((CC112X_SINGLE_TXFIFO <= tempAddr) && (tempExt == 0))
 8000c9c:	7b7b      	ldrb	r3, [r7, #13]
 8000c9e:	2b3e      	cmp	r3, #62	; 0x3e
 8000ca0:	d904      	bls.n	8000cac <CC1120_SpiWriteReg+0x2c>
 8000ca2:	7bbb      	ldrb	r3, [r7, #14]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d101      	bne.n	8000cac <CC1120_SpiWriteReg+0x2c>
		return STATUS_CHIP_RDYn_BM;
 8000ca8:	2380      	movs	r3, #128	; 0x80
 8000caa:	e019      	b.n	8000ce0 <CC1120_SpiWriteReg+0x60>

	/* Decide what register space is accessed */
	if (!tempExt)
 8000cac:	7bbb      	ldrb	r3, [r7, #14]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d108      	bne.n	8000cc4 <CC1120_SpiWriteReg+0x44>
	{
		rc = CC1120_8BitRegAccess((RADIO_BURST_ACCESS | RADIO_WRITE_ACCESS), tempAddr, pData, len);
 8000cb2:	797b      	ldrb	r3, [r7, #5]
 8000cb4:	7b79      	ldrb	r1, [r7, #13]
 8000cb6:	683a      	ldr	r2, [r7, #0]
 8000cb8:	2040      	movs	r0, #64	; 0x40
 8000cba:	f7ff ff7f 	bl	8000bbc <CC1120_8BitRegAccess>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	73fb      	strb	r3, [r7, #15]
 8000cc2:	e00c      	b.n	8000cde <CC1120_SpiWriteReg+0x5e>
	}
	else if (tempExt == 0x2F)
 8000cc4:	7bbb      	ldrb	r3, [r7, #14]
 8000cc6:	2b2f      	cmp	r3, #47	; 0x2f
 8000cc8:	d109      	bne.n	8000cde <CC1120_SpiWriteReg+0x5e>
	{
		rc = CC1120_16BitRegAccess((RADIO_BURST_ACCESS | RADIO_WRITE_ACCESS), tempExt, tempAddr, pData, len);
 8000cca:	7b7a      	ldrb	r2, [r7, #13]
 8000ccc:	7bb9      	ldrb	r1, [r7, #14]
 8000cce:	797b      	ldrb	r3, [r7, #5]
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	2040      	movs	r0, #64	; 0x40
 8000cd6:	f7ff ffa1 	bl	8000c1c <CC1120_16BitRegAccess>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	73fb      	strb	r3, [r7, #15]
	}
	return (rc);
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3710      	adds	r7, #16
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <CC1120_SpiReadReg>:

uint8_t CC1120_SpiReadReg(uint16_t addr, uint8_t *pData, uint8_t len)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af02      	add	r7, sp, #8
 8000cee:	4603      	mov	r3, r0
 8000cf0:	6039      	str	r1, [r7, #0]
 8000cf2:	80fb      	strh	r3, [r7, #6]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	717b      	strb	r3, [r7, #5]
	uint8_t tempExt = (uint8_t) (addr >> 8);
 8000cf8:	88fb      	ldrh	r3, [r7, #6]
 8000cfa:	0a1b      	lsrs	r3, r3, #8
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	73bb      	strb	r3, [r7, #14]
	uint8_t tempAddr = (uint8_t) (addr & 0x00FF);
 8000d00:	88fb      	ldrh	r3, [r7, #6]
 8000d02:	737b      	strb	r3, [r7, #13]
	uint8_t rc;

	/* Checking if this is a FIFO access -> returns chip not ready  */
	if ((CC112X_SINGLE_TXFIFO <= tempAddr) && (tempExt == 0))
 8000d04:	7b7b      	ldrb	r3, [r7, #13]
 8000d06:	2b3e      	cmp	r3, #62	; 0x3e
 8000d08:	d904      	bls.n	8000d14 <CC1120_SpiReadReg+0x2c>
 8000d0a:	7bbb      	ldrb	r3, [r7, #14]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d101      	bne.n	8000d14 <CC1120_SpiReadReg+0x2c>
		return STATUS_CHIP_RDYn_BM;
 8000d10:	2380      	movs	r3, #128	; 0x80
 8000d12:	e019      	b.n	8000d48 <CC1120_SpiReadReg+0x60>

	/* Decide what register space is accessed */
	if (!tempExt)
 8000d14:	7bbb      	ldrb	r3, [r7, #14]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d108      	bne.n	8000d2c <CC1120_SpiReadReg+0x44>
	{
		rc = CC1120_8BitRegAccess((RADIO_BURST_ACCESS | RADIO_READ_ACCESS), tempAddr, pData, len);
 8000d1a:	797b      	ldrb	r3, [r7, #5]
 8000d1c:	7b79      	ldrb	r1, [r7, #13]
 8000d1e:	683a      	ldr	r2, [r7, #0]
 8000d20:	20c0      	movs	r0, #192	; 0xc0
 8000d22:	f7ff ff4b 	bl	8000bbc <CC1120_8BitRegAccess>
 8000d26:	4603      	mov	r3, r0
 8000d28:	73fb      	strb	r3, [r7, #15]
 8000d2a:	e00c      	b.n	8000d46 <CC1120_SpiReadReg+0x5e>
	}
	else if (tempExt == 0x2F)
 8000d2c:	7bbb      	ldrb	r3, [r7, #14]
 8000d2e:	2b2f      	cmp	r3, #47	; 0x2f
 8000d30:	d109      	bne.n	8000d46 <CC1120_SpiReadReg+0x5e>
	{
		rc = CC1120_16BitRegAccess((RADIO_BURST_ACCESS | RADIO_READ_ACCESS), tempExt, tempAddr, pData, len);
 8000d32:	7b7a      	ldrb	r2, [r7, #13]
 8000d34:	7bb9      	ldrb	r1, [r7, #14]
 8000d36:	797b      	ldrb	r3, [r7, #5]
 8000d38:	9300      	str	r3, [sp, #0]
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	20c0      	movs	r0, #192	; 0xc0
 8000d3e:	f7ff ff6d 	bl	8000c1c <CC1120_16BitRegAccess>
 8000d42:	4603      	mov	r3, r0
 8000d44:	73fb      	strb	r3, [r7, #15]
	}
	return (rc);
 8000d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <CC1120_SpiWriteTxFifo>:

uint8_t CC1120_SpiWriteTxFifo(uint8_t *pData, uint8_t len)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	460b      	mov	r3, r1
 8000d5a:	70fb      	strb	r3, [r7, #3]
	uint8_t rc;
	rc = CC1120_8BitRegAccess(0x00, CC112X_BURST_TXFIFO, pData, len);
 8000d5c:	78fb      	ldrb	r3, [r7, #3]
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	217f      	movs	r1, #127	; 0x7f
 8000d62:	2000      	movs	r0, #0
 8000d64:	f7ff ff2a 	bl	8000bbc <CC1120_8BitRegAccess>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	73fb      	strb	r3, [r7, #15]
	return (rc);
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <CC1120_SpiReadRxFifo>:

uint8_t CC1120_SpiReadRxFifo(uint8_t * pData, uint8_t len)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b084      	sub	sp, #16
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
 8000d7e:	460b      	mov	r3, r1
 8000d80:	70fb      	strb	r3, [r7, #3]
	uint8_t rc;
	rc = CC1120_8BitRegAccess(0x00, CC112X_BURST_RXFIFO, pData, len);
 8000d82:	78fb      	ldrb	r3, [r7, #3]
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	21ff      	movs	r1, #255	; 0xff
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f7ff ff17 	bl	8000bbc <CC1120_8BitRegAccess>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	73fb      	strb	r3, [r7, #15]
	return (rc);
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <GetPartAndVersion>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GetPartAndVersion()
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	; 0x28
 8000da0:	af00      	add	r7, sp, #0
	uint8_t readData;
	uint8_t buffertt[32] = {0x00,};
 8000da2:	2300      	movs	r3, #0
 8000da4:	607b      	str	r3, [r7, #4]
 8000da6:	f107 0308 	add.w	r3, r7, #8
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
 8000db4:	611a      	str	r2, [r3, #16]
 8000db6:	615a      	str	r2, [r3, #20]
 8000db8:	619a      	str	r2, [r3, #24]

	CC1120_SpiReadReg(CC112X_PARTNUMBER, &readData, 1);
 8000dba:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f642 708f 	movw	r0, #12175	; 0x2f8f
 8000dc6:	f7ff ff8f 	bl	8000ce8 <CC1120_SpiReadReg>
	sprintf(buffertt, "PARTNUMBER %02x\r\n", readData);
 8000dca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000dce:	461a      	mov	r2, r3
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	4917      	ldr	r1, [pc, #92]	; (8000e30 <GetPartAndVersion+0x94>)
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f006 fa2d 	bl	8007234 <siprintf>
	HAL_UART_Transmit(&huart1, buffertt, strlen(buffertt), 100);
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff f9f7 	bl	80001d0 <strlen>
 8000de2:	4603      	mov	r3, r0
 8000de4:	b29a      	uxth	r2, r3
 8000de6:	1d39      	adds	r1, r7, #4
 8000de8:	2364      	movs	r3, #100	; 0x64
 8000dea:	4812      	ldr	r0, [pc, #72]	; (8000e34 <GetPartAndVersion+0x98>)
 8000dec:	f005 f887 	bl	8005efe <HAL_UART_Transmit>
	//printf("CC1120 part num: 0x%02X\n", readData);

	CC1120_SpiReadReg(CC112X_PARTVERSION, &readData, 1);
 8000df0:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8000df4:	2201      	movs	r2, #1
 8000df6:	4619      	mov	r1, r3
 8000df8:	f642 7090 	movw	r0, #12176	; 0x2f90
 8000dfc:	f7ff ff74 	bl	8000ce8 <CC1120_SpiReadReg>
	sprintf(buffertt, "partversion %02x\r\n", readData);
 8000e00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e04:	461a      	mov	r2, r3
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	490b      	ldr	r1, [pc, #44]	; (8000e38 <GetPartAndVersion+0x9c>)
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f006 fa12 	bl	8007234 <siprintf>
	HAL_UART_Transmit(&huart1, buffertt, strlen(buffertt), 100);
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff f9dc 	bl	80001d0 <strlen>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	1d39      	adds	r1, r7, #4
 8000e1e:	2364      	movs	r3, #100	; 0x64
 8000e20:	4804      	ldr	r0, [pc, #16]	; (8000e34 <GetPartAndVersion+0x98>)
 8000e22:	f005 f86c 	bl	8005efe <HAL_UART_Transmit>
	//printf("CC1120 part ver: 0x%02X\n", readData);
}
 8000e26:	bf00      	nop
 8000e28:	3728      	adds	r7, #40	; 0x28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	080077e0 	.word	0x080077e0
 8000e34:	2000071c 	.word	0x2000071c
 8000e38:	080077f4 	.word	0x080077f4

08000e3c <registerConfig>:
* @param       none
*
* @return      none
*/
void registerConfig(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
    uint8_t writeByte;

    // Reset radio
    CC1120_SpiCmdStrobe(CC112X_SRES);
 8000e42:	2030      	movs	r0, #48	; 0x30
 8000e44:	f7ff fe42 	bl	8000acc <CC1120_SpiCmdStrobe>


    // Write registers to radio
    for(uint16_t i = 0; i < (sizeof  preferredSettings/sizeof(registerSetting_t)); i++) {
 8000e48:	2300      	movs	r3, #0
 8000e4a:	80fb      	strh	r3, [r7, #6]
 8000e4c:	e014      	b.n	8000e78 <registerConfig+0x3c>
      writeByte =  preferredSettings[i].data;
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	4a0d      	ldr	r2, [pc, #52]	; (8000e88 <registerConfig+0x4c>)
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	4413      	add	r3, r2
 8000e56:	789b      	ldrb	r3, [r3, #2]
 8000e58:	717b      	strb	r3, [r7, #5]
      CC1120_SpiWriteReg( preferredSettings[i].addr, &writeByte, 1);
 8000e5a:	88fb      	ldrh	r3, [r7, #6]
 8000e5c:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <registerConfig+0x4c>)
 8000e5e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8000e62:	1d79      	adds	r1, r7, #5
 8000e64:	2201      	movs	r2, #1
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ff0a 	bl	8000c80 <CC1120_SpiWriteReg>
      // 2022 04 01 안하면 제대로 안되 현상이 나옴
      HAL_Delay(1);
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	f003 f8e9 	bl	8004044 <HAL_Delay>
    for(uint16_t i = 0; i < (sizeof  preferredSettings/sizeof(registerSetting_t)); i++) {
 8000e72:	88fb      	ldrh	r3, [r7, #6]
 8000e74:	3301      	adds	r3, #1
 8000e76:	80fb      	strh	r3, [r7, #6]
 8000e78:	88fb      	ldrh	r3, [r7, #6]
 8000e7a:	2b2d      	cmp	r3, #45	; 0x2d
 8000e7c:	d9e7      	bls.n	8000e4e <registerConfig+0x12>
      //printf("idx %d [%02x, %02x]\r\n", i+1, preferredSettings[i].addr, writeByte );
    }
}
 8000e7e:	bf00      	nop
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	08007898 	.word	0x08007898
 8000e8c:	00000000 	.word	0x00000000

08000e90 <CC1120_setFrequency>:



uint8_t CC1120_setFrequency(float centre) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	ed87 0a01 	vstr	s0, [r7, #4]
  uint32_t FREQ;
  uint8_t bandselect, lo_divider;
  uint8_t fs_cfg;
  uint8_t freq2, freq1,freq0;

  float fxosc = 32.0;
 8000e9a:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
 8000e9e:	613b      	str	r3, [r7, #16]

  if (centre >= 820.0 && centre <= 960.0) {
 8000ea0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ea4:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001080 <CC1120_setFrequency+0x1f0>
 8000ea8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eb0:	db0c      	blt.n	8000ecc <CC1120_setFrequency+0x3c>
 8000eb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000eb6:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8001084 <CC1120_setFrequency+0x1f4>
 8000eba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ec2:	d803      	bhi.n	8000ecc <CC1120_setFrequency+0x3c>
    lo_divider = 4;
 8000ec4:	2304      	movs	r3, #4
 8000ec6:	75bb      	strb	r3, [r7, #22]
    bandselect = 0x02;//0b0010;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	75fb      	strb	r3, [r7, #23]
  }

  if (centre >= 410.0 && centre <= 480.0) {
 8000ecc:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ed0:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8001088 <CC1120_setFrequency+0x1f8>
 8000ed4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000edc:	db0c      	blt.n	8000ef8 <CC1120_setFrequency+0x68>
 8000ede:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ee2:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800108c <CC1120_setFrequency+0x1fc>
 8000ee6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eee:	d803      	bhi.n	8000ef8 <CC1120_setFrequency+0x68>
    lo_divider = 8;
 8000ef0:	2308      	movs	r3, #8
 8000ef2:	75bb      	strb	r3, [r7, #22]
    bandselect = 0x04;//0b0100;
 8000ef4:	2304      	movs	r3, #4
 8000ef6:	75fb      	strb	r3, [r7, #23]
  }

  if (centre >= 273.3 && centre <= 320.0) {
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f7ff fb25 	bl	8000548 <__aeabi_f2d>
 8000efe:	a35c      	add	r3, pc, #368	; (adr r3, 8001070 <CC1120_setFrequency+0x1e0>)
 8000f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f04:	f7ff fbec 	bl	80006e0 <__aeabi_dcmpge>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d00c      	beq.n	8000f28 <CC1120_setFrequency+0x98>
 8000f0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f12:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001090 <CC1120_setFrequency+0x200>
 8000f16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f1e:	d803      	bhi.n	8000f28 <CC1120_setFrequency+0x98>
    lo_divider = 12;
 8000f20:	230c      	movs	r3, #12
 8000f22:	75bb      	strb	r3, [r7, #22]
    bandselect = 0x06;//0b0110;
 8000f24:	2306      	movs	r3, #6
 8000f26:	75fb      	strb	r3, [r7, #23]
  }

  if (centre >= 205.0 && centre <= 240.0) {
 8000f28:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f2c:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8001094 <CC1120_setFrequency+0x204>
 8000f30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f38:	db0c      	blt.n	8000f54 <CC1120_setFrequency+0xc4>
 8000f3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f3e:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001098 <CC1120_setFrequency+0x208>
 8000f42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f4a:	d803      	bhi.n	8000f54 <CC1120_setFrequency+0xc4>
    lo_divider = 16;
 8000f4c:	2310      	movs	r3, #16
 8000f4e:	75bb      	strb	r3, [r7, #22]
    bandselect = 0x08;//0b1000;
 8000f50:	2308      	movs	r3, #8
 8000f52:	75fb      	strb	r3, [r7, #23]
  }

  if (centre >= 164.0 && centre <= 192.0) {
 8000f54:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f58:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800109c <CC1120_setFrequency+0x20c>
 8000f5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f64:	db0c      	blt.n	8000f80 <CC1120_setFrequency+0xf0>
 8000f66:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f6a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80010a0 <CC1120_setFrequency+0x210>
 8000f6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f76:	d803      	bhi.n	8000f80 <CC1120_setFrequency+0xf0>
    lo_divider = 20;
 8000f78:	2314      	movs	r3, #20
 8000f7a:	75bb      	strb	r3, [r7, #22]
    bandselect = 0x0a;//0b1010;
 8000f7c:	230a      	movs	r3, #10
 8000f7e:	75fb      	strb	r3, [r7, #23]
  }

  if (centre >= 136.7 && centre <= 160.0) {
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f7ff fae1 	bl	8000548 <__aeabi_f2d>
 8000f86:	a33c      	add	r3, pc, #240	; (adr r3, 8001078 <CC1120_setFrequency+0x1e8>)
 8000f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8c:	f7ff fba8 	bl	80006e0 <__aeabi_dcmpge>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d00c      	beq.n	8000fb0 <CC1120_setFrequency+0x120>
 8000f96:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f9a:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80010a4 <CC1120_setFrequency+0x214>
 8000f9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa6:	d803      	bhi.n	8000fb0 <CC1120_setFrequency+0x120>
    lo_divider = 24;
 8000fa8:	2318      	movs	r3, #24
 8000faa:	75bb      	strb	r3, [r7, #22]
    bandselect = 0x0b;//0b1011;
 8000fac:	230b      	movs	r3, #11
 8000fae:	75fb      	strb	r3, [r7, #23]
  }

  FREQ = (uint32_t)(centre * 65536 * lo_divider / fxosc);
 8000fb0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fb4:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80010a8 <CC1120_setFrequency+0x218>
 8000fb8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fbc:	7dbb      	ldrb	r3, [r7, #22]
 8000fbe:	ee07 3a90 	vmov	s15, r3
 8000fc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fc6:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000fca:	ed97 7a04 	vldr	s14, [r7, #16]
 8000fce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fd6:	ee17 3a90 	vmov	r3, s15
 8000fda:	60fb      	str	r3, [r7, #12]

  // Some trivial checks
  if (FREQ & 0xff000000)
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <CC1120_setFrequency+0x15a>
    return 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e03c      	b.n	8001064 <CC1120_setFrequency+0x1d4>

  freq2 = (FREQ >> 16) & 0xff;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	0c1b      	lsrs	r3, r3, #16
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	72bb      	strb	r3, [r7, #10]
  freq1 = (FREQ >> 8) & 0xff;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	727b      	strb	r3, [r7, #9]
  freq0 = FREQ & 0xff;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	723b      	strb	r3, [r7, #8]
  CC1120_SpiWriteReg(CC112X_FREQ2, &freq2, 1);
 8001000:	f107 030a 	add.w	r3, r7, #10
 8001004:	2201      	movs	r2, #1
 8001006:	4619      	mov	r1, r3
 8001008:	f642 700c 	movw	r0, #12044	; 0x2f0c
 800100c:	f7ff fe38 	bl	8000c80 <CC1120_SpiWriteReg>
  CC1120_SpiWriteReg(CC112X_FREQ1, &freq1, 1);
 8001010:	f107 0309 	add.w	r3, r7, #9
 8001014:	2201      	movs	r2, #1
 8001016:	4619      	mov	r1, r3
 8001018:	f642 700d 	movw	r0, #12045	; 0x2f0d
 800101c:	f7ff fe30 	bl	8000c80 <CC1120_SpiWriteReg>
  CC1120_SpiWriteReg(CC112X_FREQ0, &freq0, 1);
 8001020:	f107 0308 	add.w	r3, r7, #8
 8001024:	2201      	movs	r2, #1
 8001026:	4619      	mov	r1, r3
 8001028:	f642 700e 	movw	r0, #12046	; 0x2f0e
 800102c:	f7ff fe28 	bl	8000c80 <CC1120_SpiWriteReg>

  CC1120_SpiReadReg(CC112X_FS_CFG, &fs_cfg, 1);
 8001030:	f107 030b 	add.w	r3, r7, #11
 8001034:	2201      	movs	r2, #1
 8001036:	4619      	mov	r1, r3
 8001038:	2021      	movs	r0, #33	; 0x21
 800103a:	f7ff fe55 	bl	8000ce8 <CC1120_SpiReadReg>
  fs_cfg = (fs_cfg & ~0x0F/*~0b1111*/) | bandselect;
 800103e:	7afb      	ldrb	r3, [r7, #11]
 8001040:	b25b      	sxtb	r3, r3
 8001042:	f023 030f 	bic.w	r3, r3, #15
 8001046:	b25a      	sxtb	r2, r3
 8001048:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800104c:	4313      	orrs	r3, r2
 800104e:	b25b      	sxtb	r3, r3
 8001050:	b2db      	uxtb	r3, r3
 8001052:	72fb      	strb	r3, [r7, #11]
  CC1120_SpiWriteReg(CC112X_FS_CFG, &fs_cfg, 1);
 8001054:	f107 030b 	add.w	r3, r7, #11
 8001058:	2201      	movs	r2, #1
 800105a:	4619      	mov	r1, r3
 800105c:	2021      	movs	r0, #33	; 0x21
 800105e:	f7ff fe0f 	bl	8000c80 <CC1120_SpiWriteReg>

  return 1;
 8001062:	2301      	movs	r3, #1
}
 8001064:	4618      	mov	r0, r3
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	f3af 8000 	nop.w
 8001070:	cccccccd 	.word	0xcccccccd
 8001074:	407114cc 	.word	0x407114cc
 8001078:	66666666 	.word	0x66666666
 800107c:	40611666 	.word	0x40611666
 8001080:	444d0000 	.word	0x444d0000
 8001084:	44700000 	.word	0x44700000
 8001088:	43cd0000 	.word	0x43cd0000
 800108c:	43f00000 	.word	0x43f00000
 8001090:	43a00000 	.word	0x43a00000
 8001094:	434d0000 	.word	0x434d0000
 8001098:	43700000 	.word	0x43700000
 800109c:	43240000 	.word	0x43240000
 80010a0:	43400000 	.word	0x43400000
 80010a4:	43200000 	.word	0x43200000
 80010a8:	47800000 	.word	0x47800000

080010ac <manualCalibration>:
#define FS_VCO2_INDEX 0
#define FS_VCO4_INDEX 1
#define FS_CHP_INDEX 2

void manualCalibration()
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
	uint8_t calResults_for_vcdac_start_mid[3];
	uint8_t marcstate;
	uint8_t writeByte;

	// 1) Set VCO cap-array to 0 (FS_VCO2 = 0x00)
	writeByte = 0x00;
 80010b2:	2300      	movs	r3, #0
 80010b4:	71bb      	strb	r3, [r7, #6]
	CC1120_SpiWriteReg(CC112X_FS_VCO2, &writeByte, 1);
 80010b6:	1dbb      	adds	r3, r7, #6
 80010b8:	2201      	movs	r2, #1
 80010ba:	4619      	mov	r1, r3
 80010bc:	f642 7025 	movw	r0, #12069	; 0x2f25
 80010c0:	f7ff fdde 	bl	8000c80 <CC1120_SpiWriteReg>

	// 2) Start with high VCDAC (original VCDAC_START + 2):
	CC1120_SpiReadReg(CC112X_FS_CAL2, &original_fs_cal2, 1);
 80010c4:	f107 030f 	add.w	r3, r7, #15
 80010c8:	2201      	movs	r2, #1
 80010ca:	4619      	mov	r1, r3
 80010cc:	f642 7015 	movw	r0, #12053	; 0x2f15
 80010d0:	f7ff fe0a 	bl	8000ce8 <CC1120_SpiReadReg>
	writeByte = original_fs_cal2 + VCDAC_START_OFFSET;
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
 80010d6:	3302      	adds	r3, #2
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	71bb      	strb	r3, [r7, #6]
	CC1120_SpiWriteReg(CC112X_FS_CAL2, &writeByte, 1);
 80010dc:	1dbb      	adds	r3, r7, #6
 80010de:	2201      	movs	r2, #1
 80010e0:	4619      	mov	r1, r3
 80010e2:	f642 7015 	movw	r0, #12053	; 0x2f15
 80010e6:	f7ff fdcb 	bl	8000c80 <CC1120_SpiWriteReg>

	// 3) Calibrate and wait for calibration to be done
	//   (radio back in IDLE state)
	CC1120_SpiCmdStrobe(CC112X_SCAL);
 80010ea:	2033      	movs	r0, #51	; 0x33
 80010ec:	f7ff fcee 	bl	8000acc <CC1120_SpiCmdStrobe>

	do
	{
		CC1120_SpiReadReg(CC112X_MARCSTATE, &marcstate, 1);
 80010f0:	1dfb      	adds	r3, r7, #7
 80010f2:	2201      	movs	r2, #1
 80010f4:	4619      	mov	r1, r3
 80010f6:	f642 7073 	movw	r0, #12147	; 0x2f73
 80010fa:	f7ff fdf5 	bl	8000ce8 <CC1120_SpiReadReg>
	} while (marcstate != 0x41);
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	2b41      	cmp	r3, #65	; 0x41
 8001102:	d1f5      	bne.n	80010f0 <manualCalibration+0x44>

	// 4) Read FS_VCO2, FS_VCO4 and FS_CHP register obtained with
	//    high VCDAC_START value
	CC1120_SpiReadReg(CC112X_FS_VCO2, &calResults_for_vcdac_start_high[FS_VCO2_INDEX], 1);
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	2201      	movs	r2, #1
 800110a:	4619      	mov	r1, r3
 800110c:	f642 7025 	movw	r0, #12069	; 0x2f25
 8001110:	f7ff fdea 	bl	8000ce8 <CC1120_SpiReadReg>
	CC1120_SpiReadReg(CC112X_FS_VCO4, &calResults_for_vcdac_start_high[FS_VCO4_INDEX], 1);
 8001114:	f107 030c 	add.w	r3, r7, #12
 8001118:	3301      	adds	r3, #1
 800111a:	2201      	movs	r2, #1
 800111c:	4619      	mov	r1, r3
 800111e:	f642 7023 	movw	r0, #12067	; 0x2f23
 8001122:	f7ff fde1 	bl	8000ce8 <CC1120_SpiReadReg>
	CC1120_SpiReadReg(CC112X_FS_CHP, &calResults_for_vcdac_start_high[FS_CHP_INDEX], 1);
 8001126:	f107 030c 	add.w	r3, r7, #12
 800112a:	3302      	adds	r3, #2
 800112c:	2201      	movs	r2, #1
 800112e:	4619      	mov	r1, r3
 8001130:	f642 7018 	movw	r0, #12056	; 0x2f18
 8001134:	f7ff fdd8 	bl	8000ce8 <CC1120_SpiReadReg>

	// 5) Set VCO cap-array to 0 (FS_VCO2 = 0x00)
	writeByte = 0x00;
 8001138:	2300      	movs	r3, #0
 800113a:	71bb      	strb	r3, [r7, #6]
	CC1120_SpiWriteReg(CC112X_FS_VCO2, &writeByte, 1);
 800113c:	1dbb      	adds	r3, r7, #6
 800113e:	2201      	movs	r2, #1
 8001140:	4619      	mov	r1, r3
 8001142:	f642 7025 	movw	r0, #12069	; 0x2f25
 8001146:	f7ff fd9b 	bl	8000c80 <CC1120_SpiWriteReg>

	// 6) Continue with mid VCDAC (original VCDAC_START):
	writeByte = original_fs_cal2;
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	71bb      	strb	r3, [r7, #6]
	CC1120_SpiWriteReg(CC112X_FS_CAL2, &writeByte, 1);
 800114e:	1dbb      	adds	r3, r7, #6
 8001150:	2201      	movs	r2, #1
 8001152:	4619      	mov	r1, r3
 8001154:	f642 7015 	movw	r0, #12053	; 0x2f15
 8001158:	f7ff fd92 	bl	8000c80 <CC1120_SpiWriteReg>

	// 7) Calibrate and wait for calibration to be done
	//   (radio back in IDLE state)
	CC1120_SpiCmdStrobe(CC112X_SCAL);
 800115c:	2033      	movs	r0, #51	; 0x33
 800115e:	f7ff fcb5 	bl	8000acc <CC1120_SpiCmdStrobe>

	do
	{
		CC1120_SpiReadReg(CC112X_MARCSTATE, &marcstate, 1);
 8001162:	1dfb      	adds	r3, r7, #7
 8001164:	2201      	movs	r2, #1
 8001166:	4619      	mov	r1, r3
 8001168:	f642 7073 	movw	r0, #12147	; 0x2f73
 800116c:	f7ff fdbc 	bl	8000ce8 <CC1120_SpiReadReg>
	} while (marcstate != 0x41);
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	2b41      	cmp	r3, #65	; 0x41
 8001174:	d1f5      	bne.n	8001162 <manualCalibration+0xb6>

	// 8) Read FS_VCO2, FS_VCO4 and FS_CHP register obtained
	//    with mid VCDAC_START value
	CC1120_SpiReadReg(CC112X_FS_VCO2, &calResults_for_vcdac_start_mid[FS_VCO2_INDEX], 1);
 8001176:	f107 0308 	add.w	r3, r7, #8
 800117a:	2201      	movs	r2, #1
 800117c:	4619      	mov	r1, r3
 800117e:	f642 7025 	movw	r0, #12069	; 0x2f25
 8001182:	f7ff fdb1 	bl	8000ce8 <CC1120_SpiReadReg>
	CC1120_SpiReadReg(CC112X_FS_VCO4, &calResults_for_vcdac_start_mid[FS_VCO4_INDEX], 1);
 8001186:	f107 0308 	add.w	r3, r7, #8
 800118a:	3301      	adds	r3, #1
 800118c:	2201      	movs	r2, #1
 800118e:	4619      	mov	r1, r3
 8001190:	f642 7023 	movw	r0, #12067	; 0x2f23
 8001194:	f7ff fda8 	bl	8000ce8 <CC1120_SpiReadReg>
	CC1120_SpiReadReg(CC112X_FS_CHP, &calResults_for_vcdac_start_mid[FS_CHP_INDEX], 1);
 8001198:	f107 0308 	add.w	r3, r7, #8
 800119c:	3302      	adds	r3, #2
 800119e:	2201      	movs	r2, #1
 80011a0:	4619      	mov	r1, r3
 80011a2:	f642 7018 	movw	r0, #12056	; 0x2f18
 80011a6:	f7ff fd9f 	bl	8000ce8 <CC1120_SpiReadReg>

	// 9) Write back highest FS_VCO2 and corresponding FS_VCO
	//    and FS_CHP result
	if (calResults_for_vcdac_start_high[FS_VCO2_INDEX] > calResults_for_vcdac_start_mid[FS_VCO2_INDEX])
 80011aa:	7b3a      	ldrb	r2, [r7, #12]
 80011ac:	7a3b      	ldrb	r3, [r7, #8]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d91b      	bls.n	80011ea <manualCalibration+0x13e>
	{
		writeByte = calResults_for_vcdac_start_high[FS_VCO2_INDEX];
 80011b2:	7b3b      	ldrb	r3, [r7, #12]
 80011b4:	71bb      	strb	r3, [r7, #6]
		CC1120_SpiWriteReg(CC112X_FS_VCO2, &writeByte, 1);
 80011b6:	1dbb      	adds	r3, r7, #6
 80011b8:	2201      	movs	r2, #1
 80011ba:	4619      	mov	r1, r3
 80011bc:	f642 7025 	movw	r0, #12069	; 0x2f25
 80011c0:	f7ff fd5e 	bl	8000c80 <CC1120_SpiWriteReg>
		writeByte = calResults_for_vcdac_start_high[FS_VCO4_INDEX];
 80011c4:	7b7b      	ldrb	r3, [r7, #13]
 80011c6:	71bb      	strb	r3, [r7, #6]
		CC1120_SpiWriteReg(CC112X_FS_VCO4, &writeByte, 1);
 80011c8:	1dbb      	adds	r3, r7, #6
 80011ca:	2201      	movs	r2, #1
 80011cc:	4619      	mov	r1, r3
 80011ce:	f642 7023 	movw	r0, #12067	; 0x2f23
 80011d2:	f7ff fd55 	bl	8000c80 <CC1120_SpiWriteReg>
		writeByte = calResults_for_vcdac_start_high[FS_CHP_INDEX];
 80011d6:	7bbb      	ldrb	r3, [r7, #14]
 80011d8:	71bb      	strb	r3, [r7, #6]
		CC1120_SpiWriteReg(CC112X_FS_CHP, &writeByte, 1);
 80011da:	1dbb      	adds	r3, r7, #6
 80011dc:	2201      	movs	r2, #1
 80011de:	4619      	mov	r1, r3
 80011e0:	f642 7018 	movw	r0, #12056	; 0x2f18
 80011e4:	f7ff fd4c 	bl	8000c80 <CC1120_SpiWriteReg>
		writeByte = calResults_for_vcdac_start_mid[FS_VCO4_INDEX];
		CC1120_SpiWriteReg(CC112X_FS_VCO4, &writeByte, 1);
		writeByte = calResults_for_vcdac_start_mid[FS_CHP_INDEX];
		CC1120_SpiWriteReg(CC112X_FS_CHP, &writeByte, 1);
	}
}
 80011e8:	e01a      	b.n	8001220 <manualCalibration+0x174>
		writeByte = calResults_for_vcdac_start_mid[FS_VCO2_INDEX];
 80011ea:	7a3b      	ldrb	r3, [r7, #8]
 80011ec:	71bb      	strb	r3, [r7, #6]
		CC1120_SpiWriteReg(CC112X_FS_VCO2, &writeByte, 1);
 80011ee:	1dbb      	adds	r3, r7, #6
 80011f0:	2201      	movs	r2, #1
 80011f2:	4619      	mov	r1, r3
 80011f4:	f642 7025 	movw	r0, #12069	; 0x2f25
 80011f8:	f7ff fd42 	bl	8000c80 <CC1120_SpiWriteReg>
		writeByte = calResults_for_vcdac_start_mid[FS_VCO4_INDEX];
 80011fc:	7a7b      	ldrb	r3, [r7, #9]
 80011fe:	71bb      	strb	r3, [r7, #6]
		CC1120_SpiWriteReg(CC112X_FS_VCO4, &writeByte, 1);
 8001200:	1dbb      	adds	r3, r7, #6
 8001202:	2201      	movs	r2, #1
 8001204:	4619      	mov	r1, r3
 8001206:	f642 7023 	movw	r0, #12067	; 0x2f23
 800120a:	f7ff fd39 	bl	8000c80 <CC1120_SpiWriteReg>
		writeByte = calResults_for_vcdac_start_mid[FS_CHP_INDEX];
 800120e:	7abb      	ldrb	r3, [r7, #10]
 8001210:	71bb      	strb	r3, [r7, #6]
		CC1120_SpiWriteReg(CC112X_FS_CHP, &writeByte, 1);
 8001212:	1dbb      	adds	r3, r7, #6
 8001214:	2201      	movs	r2, #1
 8001216:	4619      	mov	r1, r3
 8001218:	f642 7018 	movw	r0, #12056	; 0x2f18
 800121c:	f7ff fd30 	bl	8000c80 <CC1120_SpiWriteReg>
}
 8001220:	bf00      	nop
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <perCC112xSetOutputPower>:
* output parameters
*
* @return      void
*/
void perCC112xSetOutputPower(uint8_t index)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
  /* Oring in the PA power ramp value */
  level |= paPowerRamp[index];
  /* Updating PA_CFG2 register with its' new value */
  CC1120_SpiWriteReg(CC112X_PA_CFG2,&level,1);
#endif
  level = paPowerRamp[index];
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	4a06      	ldr	r2, [pc, #24]	; (8001250 <perCC112xSetOutputPower+0x28>)
 8001236:	5cd3      	ldrb	r3, [r2, r3]
 8001238:	73fb      	strb	r3, [r7, #15]
  CC1120_SpiWriteReg(CC112X_PA_CFG2,&level,1);
 800123a:	f107 030f 	add.w	r3, r7, #15
 800123e:	2201      	movs	r2, #1
 8001240:	4619      	mov	r1, r3
 8001242:	202b      	movs	r0, #43	; 0x2b
 8001244:	f7ff fd1c 	bl	8000c80 <CC1120_SpiWriteReg>

  return;
 8001248:	bf00      	nop
}
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	08007950 	.word	0x08007950

08001254 <cc1120_cmd_idle>:




void cc1120_cmd_idle(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
  uint8_t state,sate2;

  sate2 = CC1120_SpiCmdStrobe(CC112X_SNOP);
 800125a:	203d      	movs	r0, #61	; 0x3d
 800125c:	f7ff fc36 	bl	8000acc <CC1120_SpiCmdStrobe>
 8001260:	4603      	mov	r3, r0
 8001262:	71fb      	strb	r3, [r7, #7]
  //printf("sts =%02x\r\n",sate2);
  state = sate2 & CC112X_STATUS_MASK;
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800126a:	71bb      	strb	r3, [r7, #6]
  //state = CC1120_SpiCmdStrobe(CC112X_SNOP) & CC112X_STATUS_MASK;

  switch (state)
 800126c:	79bb      	ldrb	r3, [r7, #6]
 800126e:	2b60      	cmp	r3, #96	; 0x60
 8001270:	d002      	beq.n	8001278 <cc1120_cmd_idle+0x24>
 8001272:	2b70      	cmp	r3, #112	; 0x70
 8001274:	d004      	beq.n	8001280 <cc1120_cmd_idle+0x2c>
 8001276:	e007      	b.n	8001288 <cc1120_cmd_idle+0x34>
  {
    case CC112X_STATE_RXFIFO_ERROR:
    	cc1120_cmd_flush_rx();
 8001278:	203a      	movs	r0, #58	; 0x3a
 800127a:	f7ff fc27 	bl	8000acc <CC1120_SpiCmdStrobe>
      break;
 800127e:	e007      	b.n	8001290 <cc1120_cmd_idle+0x3c>
    case CC112X_STATE_TXFIFO_ERROR:
    	cc1120_cmd_flush_tx();
 8001280:	203b      	movs	r0, #59	; 0x3b
 8001282:	f7ff fc23 	bl	8000acc <CC1120_SpiCmdStrobe>
      break;
 8001286:	e003      	b.n	8001290 <cc1120_cmd_idle+0x3c>
    default:
    	CC1120_SpiCmdStrobe(CC112X_SIDLE);
 8001288:	2036      	movs	r0, #54	; 0x36
 800128a:	f7ff fc1f 	bl	8000acc <CC1120_SpiCmdStrobe>
  // 2022 03 31 block 벗어 나지 못함
  //while ((CC1120_SpiCmdStrobe(CC112X_SNOP) & CC112X_STATUS_MASK) != CC112X_STATE_IDLE) {
//	  CC1120_SpiCmdStrobe(CC112X_SIDLE);
//  }

}
 800128e:	bf00      	nop
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <send_packet2>:


	return temp_byte;
}

void send_packet2(uint8_t * sendBuffer, uint8_t len) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	460b      	mov	r3, r1
 80012a2:	70fb      	strb	r3, [r7, #3]
//	do
//	{
//		CC1120_SpiReadReg(CC112X_MARCSTATE, &marcstate, 1);
//	} while (marcstate != 0x41);		// IDLE 모드 될때까지 확인

	CC1120_SpiCmdStrobe(CC112X_SFTX);					/*  SFTX    - Flush the TX FIFO buffer. */
 80012a4:	203b      	movs	r0, #59	; 0x3b
 80012a6:	f7ff fc11 	bl	8000acc <CC1120_SpiCmdStrobe>
	CC1120_SpiCmdStrobe(CC112X_SFRX);					/*  SFRX    - Flush the RX FIFO buffer. */
 80012aa:	203a      	movs	r0, #58	; 0x3a
 80012ac:	f7ff fc0e 	bl	8000acc <CC1120_SpiCmdStrobe>
	//temp_byte = 0x06;							// 확인해봐야지
	//CC1120_SpiWriteReg(CC112X_IOCFG3, &temp_byte, 1);

	// Write packet to TX FIFO
	CC1120_SpiWriteTxFifo(sendBuffer, len+1); //
 80012b0:	78fb      	ldrb	r3, [r7, #3]
 80012b2:	3301      	adds	r3, #1
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	4619      	mov	r1, r3
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff fd49 	bl	8000d50 <CC1120_SpiWriteTxFifo>

	// Strobe TX to send packet
	CC1120_SpiCmdStrobe(CC112X_STX);
 80012be:	2035      	movs	r0, #53	; 0x35
 80012c0:	f7ff fc04 	bl	8000acc <CC1120_SpiCmdStrobe>


	// 2022 03 31 Master add
	do {
		//os_dly_wait (1);
		CC1120_SpiReadReg(CC112X_MARC_STATUS1, &temp_byte, 1);
 80012c4:	f107 030f 	add.w	r3, r7, #15
 80012c8:	2201      	movs	r2, #1
 80012ca:	4619      	mov	r1, r3
 80012cc:	f642 7094 	movw	r0, #12180	; 0x2f94
 80012d0:	f7ff fd0a 	bl	8000ce8 <CC1120_SpiReadReg>
		//printf("marcstate: %02x\r\n", marcState);
	} while (( temp_byte) == 0x00);
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d0f4      	beq.n	80012c4 <send_packet2+0x2c>

	//CC1120_SpiCmdStrobe(CC112X_SIDLE);

	CC1120_SpiCmdStrobe(CC112X_SRX);
 80012da:	2034      	movs	r0, #52	; 0x34
 80012dc:	f7ff fbf6 	bl	8000acc <CC1120_SpiCmdStrobe>
	//return temp_byte;
}
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <HAL_GPIO_EXTI_Callback>:

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	80fb      	strh	r3, [r7, #6]
	if ( GPIO_Pin == GPIO0_PIN )
 80012f2:	88fb      	ldrh	r3, [r7, #6]
 80012f4:	2b08      	cmp	r3, #8
 80012f6:	d106      	bne.n	8001306 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		if (gdo0_cb != 0x0)
 80012f8:	4b05      	ldr	r3, [pc, #20]	; (8001310 <HAL_GPIO_EXTI_Callback+0x28>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d002      	beq.n	8001306 <HAL_GPIO_EXTI_Callback+0x1e>
		{
			gdo0_cb();
 8001300:	4b03      	ldr	r3, [pc, #12]	; (8001310 <HAL_GPIO_EXTI_Callback+0x28>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4798      	blx	r3
//		if (gdo2_cb != 0x0)
//		{
//			gdo2_cb();
//		}
//	}
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	2000008c 	.word	0x2000008c

08001314 <cc1120_init>:


void cc1120_init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
	gdo0_cb = 0x0;
 8001318:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <cc1120_init+0x34>)
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
	gdo2_cb = 0x0;
 800131e:	4b0b      	ldr	r3, [pc, #44]	; (800134c <cc1120_init+0x38>)
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]

	cc112x_hw_rst();
 8001324:	f7ff fb82 	bl	8000a2c <cc112x_hw_rst>
	GetPartAndVersion();
 8001328:	f7ff fd38 	bl	8000d9c <GetPartAndVersion>

	registerConfig();
 800132c:	f7ff fd86 	bl	8000e3c <registerConfig>
	CC1120_setFrequency(868.2140);
 8001330:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8001350 <cc1120_init+0x3c>
 8001334:	f7ff fdac 	bl	8000e90 <CC1120_setFrequency>

	//cc112xConfigChek(23);
	manualCalibration();
 8001338:	f7ff feb8 	bl	80010ac <manualCalibration>
	perCC112xSetOutputPower(18);
 800133c:	2012      	movs	r0, #18
 800133e:	f7ff ff73 	bl	8001228 <perCC112xSetOutputPower>
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	2000008c 	.word	0x2000008c
 800134c:	20000090 	.word	0x20000090
 8001350:	44590db2 	.word	0x44590db2

08001354 <uartRingBuff_init>:
}flash_tag_t;


flash_tag_t user_flash;

void uartRingBuff_init(void) {
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	ringbuf_init(&rxrb, rxdata, RX_BUFFERSIZE);
 8001358:	2280      	movs	r2, #128	; 0x80
 800135a:	4903      	ldr	r1, [pc, #12]	; (8001368 <uartRingBuff_init+0x14>)
 800135c:	4803      	ldr	r0, [pc, #12]	; (800136c <uartRingBuff_init+0x18>)
 800135e:	f000 f961 	bl	8001624 <ringbuf_init>
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200000ac 	.word	0x200000ac
 800136c:	2000009c 	.word	0x2000009c

08001370 <recvUartPkt>:

int recvUartPkt() {
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
	uint8_t c, i = 0, l = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	71fb      	strb	r3, [r7, #7]
 800137a:	2300      	movs	r3, #0
 800137c:	71bb      	strb	r3, [r7, #6]
	//uint32_t used;

	for (i = 0; i < RX_BUFFERSIZE; i++)
 800137e:	2300      	movs	r3, #0
 8001380:	71fb      	strb	r3, [r7, #7]
 8001382:	e006      	b.n	8001392 <recvUartPkt+0x22>
		cmdBuffer[i] = 0;
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	4a1b      	ldr	r2, [pc, #108]	; (80013f4 <recvUartPkt+0x84>)
 8001388:	2100      	movs	r1, #0
 800138a:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < RX_BUFFERSIZE; i++)
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	3301      	adds	r3, #1
 8001390:	71fb      	strb	r3, [r7, #7]
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	2b00      	cmp	r3, #0
 8001398:	daf4      	bge.n	8001384 <recvUartPkt+0x14>

	used = ringbuf_used(&rxrb);
 800139a:	4817      	ldr	r0, [pc, #92]	; (80013f8 <recvUartPkt+0x88>)
 800139c:	f000 f8db 	bl	8001556 <ringbuf_used>
 80013a0:	4603      	mov	r3, r0
 80013a2:	4a16      	ldr	r2, [pc, #88]	; (80013fc <recvUartPkt+0x8c>)
 80013a4:	6013      	str	r3, [r2, #0]

	for (i = 0; i < used; i++) {
 80013a6:	2300      	movs	r3, #0
 80013a8:	71fb      	strb	r3, [r7, #7]
 80013aa:	e015      	b.n	80013d8 <recvUartPkt+0x68>
		c = ringbuf_readone(&rxrb);
 80013ac:	4812      	ldr	r0, [pc, #72]	; (80013f8 <recvUartPkt+0x88>)
 80013ae:	f000 f900 	bl	80015b2 <ringbuf_readone>
 80013b2:	4603      	mov	r3, r0
 80013b4:	717b      	strb	r3, [r7, #5]
		if (c == 0x03)
 80013b6:	797b      	ldrb	r3, [r7, #5]
 80013b8:	2b03      	cmp	r3, #3
 80013ba:	d106      	bne.n	80013ca <recvUartPkt+0x5a>
		{
			pktLen = i;
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	b29a      	uxth	r2, r3
 80013c0:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <recvUartPkt+0x90>)
 80013c2:	801a      	strh	r2, [r3, #0]
			return pktLen;
 80013c4:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <recvUartPkt+0x90>)
 80013c6:	881b      	ldrh	r3, [r3, #0]
 80013c8:	e010      	b.n	80013ec <recvUartPkt+0x7c>
		} else
			cmdBuffer[i] = c;
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	4909      	ldr	r1, [pc, #36]	; (80013f4 <recvUartPkt+0x84>)
 80013ce:	797a      	ldrb	r2, [r7, #5]
 80013d0:	54ca      	strb	r2, [r1, r3]
	for (i = 0; i < used; i++) {
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	3301      	adds	r3, #1
 80013d6:	71fb      	strb	r3, [r7, #7]
 80013d8:	79fa      	ldrb	r2, [r7, #7]
 80013da:	4b08      	ldr	r3, [pc, #32]	; (80013fc <recvUartPkt+0x8c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d3e4      	bcc.n	80013ac <recvUartPkt+0x3c>
	}
	pktLen = 0;
 80013e2:	4b07      	ldr	r3, [pc, #28]	; (8001400 <recvUartPkt+0x90>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	801a      	strh	r2, [r3, #0]
	return -1;
 80013e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	2000012c 	.word	0x2000012c
 80013f8:	2000009c 	.word	0x2000009c
 80013fc:	20000098 	.word	0x20000098
 8001400:	200001ac 	.word	0x200001ac

08001404 <handleUart2Pkt>:
uint8_t readTest_1[120];
int handleUart2Pkt() {
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
	#endif 
	uint8_t id_buff;
	uint8_t temp_sec;
	uint8_t temp_min;

	switch (cmdBuffer[0]) 
 800140a:	4b37      	ldr	r3, [pc, #220]	; (80014e8 <handleUart2Pkt+0xe4>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b02      	cmp	r3, #2
 8001410:	d02e      	beq.n	8001470 <handleUart2Pkt+0x6c>
 8001412:	2b02      	cmp	r3, #2
 8001414:	db60      	blt.n	80014d8 <handleUart2Pkt+0xd4>
 8001416:	2b53      	cmp	r3, #83	; 0x53
 8001418:	dc5e      	bgt.n	80014d8 <handleUart2Pkt+0xd4>
 800141a:	2b43      	cmp	r3, #67	; 0x43
 800141c:	db5c      	blt.n	80014d8 <handleUart2Pkt+0xd4>
 800141e:	3b43      	subs	r3, #67	; 0x43
 8001420:	2b10      	cmp	r3, #16
 8001422:	d859      	bhi.n	80014d8 <handleUart2Pkt+0xd4>
 8001424:	a201      	add	r2, pc, #4	; (adr r2, 800142c <handleUart2Pkt+0x28>)
 8001426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800142a:	bf00      	nop
 800142c:	080014d9 	.word	0x080014d9
 8001430:	080014d9 	.word	0x080014d9
 8001434:	080014d9 	.word	0x080014d9
 8001438:	080014d9 	.word	0x080014d9
 800143c:	080014d9 	.word	0x080014d9
 8001440:	080014d9 	.word	0x080014d9
 8001444:	080014d9 	.word	0x080014d9
 8001448:	080014d9 	.word	0x080014d9
 800144c:	080014d9 	.word	0x080014d9
 8001450:	080014d9 	.word	0x080014d9
 8001454:	080014c9 	.word	0x080014c9
 8001458:	080014d9 	.word	0x080014d9
 800145c:	080014d9 	.word	0x080014d9
 8001460:	080014d9 	.word	0x080014d9
 8001464:	080014d9 	.word	0x080014d9
 8001468:	080014d9 	.word	0x080014d9
 800146c:	080014d9 	.word	0x080014d9
	{
	case 0x02: // TEST
		id_buff = cmdBuffer[1] - '0';
 8001470:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <handleUart2Pkt+0xe4>)
 8001472:	785b      	ldrb	r3, [r3, #1]
 8001474:	3b30      	subs	r3, #48	; 0x30
 8001476:	71fb      	strb	r3, [r7, #7]
		temp_min = (cmdBuffer[2] - '0')*10 + (cmdBuffer[3] - '0');
 8001478:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <handleUart2Pkt+0xe4>)
 800147a:	789b      	ldrb	r3, [r3, #2]
 800147c:	461a      	mov	r2, r3
 800147e:	0092      	lsls	r2, r2, #2
 8001480:	4413      	add	r3, r2
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	b2da      	uxtb	r2, r3
 8001486:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <handleUart2Pkt+0xe4>)
 8001488:	78db      	ldrb	r3, [r3, #3]
 800148a:	4413      	add	r3, r2
 800148c:	b2db      	uxtb	r3, r3
 800148e:	3b10      	subs	r3, #16
 8001490:	71bb      	strb	r3, [r7, #6]
		temp_sec = (cmdBuffer[4] - '0')*10 + (cmdBuffer[5] - '0');
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <handleUart2Pkt+0xe4>)
 8001494:	791b      	ldrb	r3, [r3, #4]
 8001496:	461a      	mov	r2, r3
 8001498:	0092      	lsls	r2, r2, #2
 800149a:	4413      	add	r3, r2
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <handleUart2Pkt+0xe4>)
 80014a2:	795b      	ldrb	r3, [r3, #5]
 80014a4:	4413      	add	r3, r2
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	3b10      	subs	r3, #16
 80014aa:	717b      	strb	r3, [r7, #5]
		node_id[id_buff-1].sec = temp_sec;
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	490e      	ldr	r1, [pc, #56]	; (80014ec <handleUart2Pkt+0xe8>)
 80014b2:	797a      	ldrb	r2, [r7, #5]
 80014b4:	f801 2013 	strb.w	r2, [r1, r3, lsl #1]
		node_id[id_buff-1].min = temp_min;
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	4a0b      	ldr	r2, [pc, #44]	; (80014ec <handleUart2Pkt+0xe8>)
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	4413      	add	r3, r2
 80014c2:	79ba      	ldrb	r2, [r7, #6]
 80014c4:	705a      	strb	r2, [r3, #1]
		write_flash_temp[id_buff*2] = temp_min;
		write_flash_temp[id_buff*2+1] = temp_sec;
		stm32_flash_write(0x80000 , (uint8_t*)&write_flash_temp, 16);
		stm32_flash_read(0x80000 , (uint8_t*)&readTest_1, 16);
		#endif
		break;
 80014c6:	e008      	b.n	80014da <handleUart2Pkt+0xd6>
	case 'R':
		//handleReset();
		break;

	case 'M':
		switch (cmdBuffer[1]) {
 80014c8:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <handleUart2Pkt+0xe4>)
 80014ca:	785b      	ldrb	r3, [r3, #1]
 80014cc:	2b43      	cmp	r3, #67	; 0x43
 80014ce:	d002      	beq.n	80014d6 <handleUart2Pkt+0xd2>
 80014d0:	2b45      	cmp	r3, #69	; 0x45
 80014d2:	d101      	bne.n	80014d8 <handleUart2Pkt+0xd4>
		case 'C':
//                    HAL_UART_Transmit(&hlpuart1, "C", 1, 100);
			break;
		case 'E':
//                    HAL_UART_Transmit(&hlpuart1, "E", 1, 100);
			break;
 80014d4:	e000      	b.n	80014d8 <handleUart2Pkt+0xd4>
			break;
 80014d6:	bf00      	nop
		}

	default:

		break;
 80014d8:	bf00      	nop
	}

	return 0;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	2000012c 	.word	0x2000012c
 80014ec:	20000210 	.word	0x20000210

080014f0 <uart2_receive_func>:

void uart2_receive_func(void) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	if (uart_flag == 1)
 80014f4:	4b07      	ldr	r3, [pc, #28]	; (8001514 <uart2_receive_func+0x24>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d109      	bne.n	8001510 <uart2_receive_func+0x20>
	{
		if (recvUartPkt() > 0)
 80014fc:	f7ff ff38 	bl	8001370 <recvUartPkt>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	dd04      	ble.n	8001510 <uart2_receive_func+0x20>
		{
			handleUart2Pkt();
 8001506:	f7ff ff7d 	bl	8001404 <handleUart2Pkt>
			uart_flag = 0;
 800150a:	4b02      	ldr	r3, [pc, #8]	; (8001514 <uart2_receive_func+0x24>)
 800150c:	2200      	movs	r2, #0
 800150e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000094 	.word	0x20000094

08001518 <update_index_atomic>:
//
//*****************************************************************************
static void
update_index_atomic(uint32_t volatile *pui32Val, uint32_t ui32Delta,
                    uint32_t ui32Size)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
#endif

    //
    // Update the variable value.
    //
    *pui32Val += ui32Delta;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	441a      	add	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	601a      	str	r2, [r3, #0]
    // Correct for wrap.  We use a loop here since we don't want to use a
    // modulus operation with interrupts off but we don't want to fail in
    // case ui32Delta is greater than ui32Size (which is extremely unlikely
    // but...)
    //
    while (*pui32Val >= ui32Size) {
 8001530:	e005      	b.n	800153e <update_index_atomic+0x26>
        *pui32Val -= ui32Size;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	1ad2      	subs	r2, r2, r3
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	601a      	str	r2, [r3, #0]
    while (*pui32Val >= ui32Size) {
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	429a      	cmp	r2, r3
 8001546:	d9f4      	bls.n	8001532 <update_index_atomic+0x1a>
    // Restore the interrupt state
    //
#if __USE_INTERRUPT
    INT_Enable();
#endif
}
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <ringbuf_used>:
//! \return Returns the number of bytes stored in the ring buffer.
//
//*****************************************************************************
uint32_t
ringbuf_used(ringbuffer_t *psRingBuf)
{
 8001556:	b480      	push	{r7}
 8001558:	b085      	sub	sp, #20
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
    __ASSERT(psRingBuf != NULL);

    //
    // Copy the Read/Write indices for calculation.
    //
    ui32Write = psRingBuf->ui32WriteIndex;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	60fb      	str	r3, [r7, #12]
    ui32Read = psRingBuf->ui32ReadIndex;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	60bb      	str	r3, [r7, #8]

    //
    // Return the number of bytes contained in the ring buffer.
    //
    return ((ui32Write >= ui32Read) ? (ui32Write - ui32Read) :
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	429a      	cmp	r2, r3
 8001570:	d303      	bcc.n	800157a <ringbuf_used+0x24>
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	e005      	b.n	8001586 <ringbuf_used+0x30>
            (psRingBuf->ui32Size - (ui32Read - ui32Write)));
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	68f9      	ldr	r1, [r7, #12]
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	1acb      	subs	r3, r1, r3
    return ((ui32Write >= ui32Read) ? (ui32Write - ui32Read) :
 8001584:	4413      	add	r3, r2
}
 8001586:	4618      	mov	r0, r3
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <ringbuf_free>:
//! \return Returns the number of bytes available in the ring buffer.
//
//*****************************************************************************
uint32_t
ringbuf_free(ringbuffer_t *psRingBuf)
{
 8001592:	b590      	push	{r4, r7, lr}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
    __ASSERT(psRingBuf != NULL);

    //
    // Return the number of bytes available in the ring buffer.
    //
    return ((psRingBuf->ui32Size - 1) - ringbuf_used(psRingBuf));
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681c      	ldr	r4, [r3, #0]
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff ffd9 	bl	8001556 <ringbuf_used>
 80015a4:	4603      	mov	r3, r0
 80015a6:	1ae3      	subs	r3, r4, r3
 80015a8:	3b01      	subs	r3, #1
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd90      	pop	{r4, r7, pc}

080015b2 <ringbuf_readone>:
//! \return The byte read from the ring buffer.
//
//*****************************************************************************
uint8_t
ringbuf_readone(ringbuffer_t *psRingBuf)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b084      	sub	sp, #16
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
    __ASSERT(ringbuf_used(psRingBuf) != 0);

    //
    // Write the data byte.
    //
    ui8Temp = psRingBuf->pui8Buf[psRingBuf->ui32ReadIndex];
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68da      	ldr	r2, [r3, #12]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	4413      	add	r3, r2
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	73fb      	strb	r3, [r7, #15]

    //
    // Increment the read index.
    //
    update_index_atomic(&psRingBuf->ui32ReadIndex, 1, psRingBuf->ui32Size);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f103 0008 	add.w	r0, r3, #8
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	2101      	movs	r1, #1
 80015d6:	f7ff ff9f 	bl	8001518 <update_index_atomic>

    //
    // Return the character read.
    //
    return (ui8Temp);
 80015da:	7bfb      	ldrb	r3, [r7, #15]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <ringbuf_writeone>:
//!
//! \return None.
//
//*****************************************************************************
void ringbuf_writeone(ringbuffer_t *psRingBuf, uint8_t ui8Data)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	70fb      	strb	r3, [r7, #3]
    //
    // Verify that space is available in the buffer.
    //
    __ASSERT(ringbuf_free(psRingBuf) != 0);

	if(ringbuf_free(psRingBuf) == 0)
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff ffce 	bl	8001592 <ringbuf_free>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d00f      	beq.n	800161c <ringbuf_writeone+0x38>
	  return;
    //
    // Write the data byte.
    //
    psRingBuf->pui8Buf[psRingBuf->ui32WriteIndex] = ui8Data;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68da      	ldr	r2, [r3, #12]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	4413      	add	r3, r2
 8001606:	78fa      	ldrb	r2, [r7, #3]
 8001608:	701a      	strb	r2, [r3, #0]

    //
    // Increment the write index.
    //
    update_index_atomic(&psRingBuf->ui32WriteIndex, 1, psRingBuf->ui32Size);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	1d18      	adds	r0, r3, #4
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	461a      	mov	r2, r3
 8001614:	2101      	movs	r1, #1
 8001616:	f7ff ff7f 	bl	8001518 <update_index_atomic>
 800161a:	e000      	b.n	800161e <ringbuf_writeone+0x3a>
	  return;
 800161c:	bf00      	nop
}
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <ringbuf_init>:
//
//*****************************************************************************
void
ringbuf_init(ringbuffer_t *psRingBuf, uint8_t *pui8Buf,
             uint32_t ui32Size)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
    __ASSERT(ui32Size != 0);

    //
    // Initialize the ring buffer object.
    //
    psRingBuf->ui32Size = ui32Size;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	601a      	str	r2, [r3, #0]
    psRingBuf->pui8Buf = pui8Buf;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	68ba      	ldr	r2, [r7, #8]
 800163a:	60da      	str	r2, [r3, #12]
    psRingBuf->ui32WriteIndex = psRingBuf->ui32ReadIndex = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	6093      	str	r3, [r2, #8]
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	6053      	str	r3, [r2, #4]
}
 8001646:	bf00      	nop
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <send_to_pc>:



#if 1
void send_to_pc()
{
 8001654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001656:	b0b7      	sub	sp, #220	; 0xdc
 8001658:	af12      	add	r7, sp, #72	; 0x48
	uint16_t nodeIdIdx;

	nodeIdIdx = (data_msg.hdr.fctl & 0x0F) - 1;
 800165a:	4ba2      	ldr	r3, [pc, #648]	; (80018e4 <send_to_pc+0x290>)
 800165c:	785b      	ldrb	r3, [r3, #1]
 800165e:	b29b      	uxth	r3, r3
 8001660:	f003 030f 	and.w	r3, r3, #15
 8001664:	b29b      	uxth	r3, r3
 8001666:	3b01      	subs	r3, #1
 8001668:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	nodeIdIdx = nodeIdIdx << 4;
 800166c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8001670:	011b      	lsls	r3, r3, #4
 8001672:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e

	switch (data_msg.payload[0])
 8001676:	4b9b      	ldr	r3, [pc, #620]	; (80018e4 <send_to_pc+0x290>)
 8001678:	789b      	ldrb	r3, [r3, #2]
 800167a:	3b01      	subs	r3, #1
 800167c:	2b08      	cmp	r3, #8
 800167e:	f201 83af 	bhi.w	8002de0 <send_to_pc+0x178c>
 8001682:	a201      	add	r2, pc, #4	; (adr r2, 8001688 <send_to_pc+0x34>)
 8001684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001688:	080016ad 	.word	0x080016ad
 800168c:	0800190d 	.word	0x0800190d
 8001690:	08001c9b 	.word	0x08001c9b
 8001694:	08001e71 	.word	0x08001e71
 8001698:	08002023 	.word	0x08002023
 800169c:	08002191 	.word	0x08002191
 80016a0:	080026dd 	.word	0x080026dd
 80016a4:	080028a5 	.word	0x080028a5
 80016a8:	08002c31 	.word	0x08002c31
	{
		case NTC_SEN_ID: //type
		{
			uint8_t ntc_type = data_msg.payload[0];
 80016ac:	4b8d      	ldr	r3, [pc, #564]	; (80018e4 <send_to_pc+0x290>)
 80016ae:	789b      	ldrb	r3, [r3, #2]
 80016b0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			uint8_t ntc_value_100;
			uint8_t ntc_value_10;
			uint8_t ntc_value_1;
			uint8_t ntc_sign;
			uint8_t bat_h =data_msg.payload[7];
 80016b4:	4b8b      	ldr	r3, [pc, #556]	; (80018e4 <send_to_pc+0x290>)
 80016b6:	7a5b      	ldrb	r3, [r3, #9]
 80016b8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			uint8_t bat_l =data_msg.payload[8];
 80016bc:	4b89      	ldr	r3, [pc, #548]	; (80018e4 <send_to_pc+0x290>)
 80016be:	7a9b      	ldrb	r3, [r3, #10]
 80016c0:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			uint16_t tmpValue;
			

			if( data_msg.payload[1] == 1) // +
 80016c4:	4b87      	ldr	r3, [pc, #540]	; (80018e4 <send_to_pc+0x290>)
 80016c6:	78db      	ldrb	r3, [r3, #3]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d103      	bne.n	80016d4 <send_to_pc+0x80>
			{
				ntc_sign = 0x2b;
 80016cc:	232b      	movs	r3, #43	; 0x2b
 80016ce:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 80016d2:	e002      	b.n	80016da <send_to_pc+0x86>
			}
			else   // - 
			{
				ntc_sign = 0x2d;
 80016d4:	232d      	movs	r3, #45	; 0x2d
 80016d6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
			}
			ntc_value_100 = data_msg.payload[2]%1000/100;
 80016da:	4b82      	ldr	r3, [pc, #520]	; (80018e4 <send_to_pc+0x290>)
 80016dc:	791b      	ldrb	r3, [r3, #4]
 80016de:	461a      	mov	r2, r3
 80016e0:	4b81      	ldr	r3, [pc, #516]	; (80018e8 <send_to_pc+0x294>)
 80016e2:	fb83 1302 	smull	r1, r3, r3, r2
 80016e6:	1199      	asrs	r1, r3, #6
 80016e8:	17d3      	asrs	r3, r2, #31
 80016ea:	1acb      	subs	r3, r1, r3
 80016ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016f0:	fb01 f303 	mul.w	r3, r1, r3
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	4a7d      	ldr	r2, [pc, #500]	; (80018ec <send_to_pc+0x298>)
 80016f8:	fb82 1203 	smull	r1, r2, r2, r3
 80016fc:	1152      	asrs	r2, r2, #5
 80016fe:	17db      	asrs	r3, r3, #31
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			ntc_value_10 = data_msg.payload[2]%1000%100/10;
 8001706:	4b77      	ldr	r3, [pc, #476]	; (80018e4 <send_to_pc+0x290>)
 8001708:	791b      	ldrb	r3, [r3, #4]
 800170a:	461a      	mov	r2, r3
 800170c:	4b76      	ldr	r3, [pc, #472]	; (80018e8 <send_to_pc+0x294>)
 800170e:	fb83 1302 	smull	r1, r3, r3, r2
 8001712:	1199      	asrs	r1, r3, #6
 8001714:	17d3      	asrs	r3, r2, #31
 8001716:	1acb      	subs	r3, r1, r3
 8001718:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800171c:	fb01 f303 	mul.w	r3, r1, r3
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	4a72      	ldr	r2, [pc, #456]	; (80018ec <send_to_pc+0x298>)
 8001724:	fb82 1203 	smull	r1, r2, r2, r3
 8001728:	1151      	asrs	r1, r2, #5
 800172a:	17da      	asrs	r2, r3, #31
 800172c:	1a8a      	subs	r2, r1, r2
 800172e:	2164      	movs	r1, #100	; 0x64
 8001730:	fb01 f202 	mul.w	r2, r1, r2
 8001734:	1a9a      	subs	r2, r3, r2
 8001736:	4b6e      	ldr	r3, [pc, #440]	; (80018f0 <send_to_pc+0x29c>)
 8001738:	fb83 1302 	smull	r1, r3, r3, r2
 800173c:	1099      	asrs	r1, r3, #2
 800173e:	17d3      	asrs	r3, r2, #31
 8001740:	1acb      	subs	r3, r1, r3
 8001742:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
			ntc_value_1 = data_msg.payload[2]%1000%100%10/1;
 8001746:	4b67      	ldr	r3, [pc, #412]	; (80018e4 <send_to_pc+0x290>)
 8001748:	791b      	ldrb	r3, [r3, #4]
 800174a:	461a      	mov	r2, r3
 800174c:	4b66      	ldr	r3, [pc, #408]	; (80018e8 <send_to_pc+0x294>)
 800174e:	fb83 1302 	smull	r1, r3, r3, r2
 8001752:	1199      	asrs	r1, r3, #6
 8001754:	17d3      	asrs	r3, r2, #31
 8001756:	1acb      	subs	r3, r1, r3
 8001758:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800175c:	fb01 f303 	mul.w	r3, r1, r3
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	4a62      	ldr	r2, [pc, #392]	; (80018ec <send_to_pc+0x298>)
 8001764:	fb82 1203 	smull	r1, r2, r2, r3
 8001768:	1151      	asrs	r1, r2, #5
 800176a:	17da      	asrs	r2, r3, #31
 800176c:	1a8a      	subs	r2, r1, r2
 800176e:	2164      	movs	r1, #100	; 0x64
 8001770:	fb01 f202 	mul.w	r2, r1, r2
 8001774:	1a9a      	subs	r2, r3, r2
 8001776:	4b5e      	ldr	r3, [pc, #376]	; (80018f0 <send_to_pc+0x29c>)
 8001778:	fb83 1302 	smull	r1, r3, r3, r2
 800177c:	1099      	asrs	r1, r3, #2
 800177e:	17d3      	asrs	r3, r2, #31
 8001780:	1ac9      	subs	r1, r1, r3
 8001782:	460b      	mov	r3, r1
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	440b      	add	r3, r1
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	1ad1      	subs	r1, r2, r3
 800178c:	460b      	mov	r3, r1
 800178e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39

			tmpValue = (ntc_value_100 *100)  + (ntc_value_10 *10) + ntc_value_1 ;
 8001792:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001796:	b29b      	uxth	r3, r3
 8001798:	461a      	mov	r2, r3
 800179a:	0092      	lsls	r2, r2, #2
 800179c:	4413      	add	r3, r2
 800179e:	461a      	mov	r2, r3
 80017a0:	0091      	lsls	r1, r2, #2
 80017a2:	461a      	mov	r2, r3
 80017a4:	460b      	mov	r3, r1
 80017a6:	4413      	add	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	4619      	mov	r1, r3
 80017b4:	0089      	lsls	r1, r1, #2
 80017b6:	440b      	add	r3, r1
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	4413      	add	r3, r2
 80017be:	b29a      	uxth	r2, r3
 80017c0:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	4413      	add	r3, r2
 80017c8:	86fb      	strh	r3, [r7, #54]	; 0x36

			REG_INPUT_BUF[nodeIdIdx++] = ntc_type; // TPYE
 80017ca:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	f8a7 208e 	strh.w	r2, [r7, #142]	; 0x8e
 80017d4:	461a      	mov	r2, r3
 80017d6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80017da:	b299      	uxth	r1, r3
 80017dc:	4b45      	ldr	r3, [pc, #276]	; (80018f4 <send_to_pc+0x2a0>)
 80017de:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			REG_INPUT_BUF[nodeIdIdx++] = 1+2; // DATA LEN
 80017e2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	f8a7 208e 	strh.w	r2, [r7, #142]	; 0x8e
 80017ec:	461a      	mov	r2, r3
 80017ee:	4b41      	ldr	r3, [pc, #260]	; (80018f4 <send_to_pc+0x2a0>)
 80017f0:	2103      	movs	r1, #3
 80017f2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			if ( ntc_sign == 0x2b ) // +
 80017f6:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80017fa:	2b2b      	cmp	r3, #43	; 0x2b
 80017fc:	d10a      	bne.n	8001814 <send_to_pc+0x1c0>
			{
				REG_INPUT_BUF[nodeIdIdx++] = tmpValue ;
 80017fe:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8001802:	1c5a      	adds	r2, r3, #1
 8001804:	f8a7 208e 	strh.w	r2, [r7, #142]	; 0x8e
 8001808:	4619      	mov	r1, r3
 800180a:	4a3a      	ldr	r2, [pc, #232]	; (80018f4 <send_to_pc+0x2a0>)
 800180c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800180e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 8001812:	e00b      	b.n	800182c <send_to_pc+0x1d8>
			}
			else
			{
				REG_INPUT_BUF[nodeIdIdx++] = -tmpValue ;
 8001814:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8001818:	1c5a      	adds	r2, r3, #1
 800181a:	f8a7 208e 	strh.w	r2, [r7, #142]	; 0x8e
 800181e:	461a      	mov	r2, r3
 8001820:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001822:	425b      	negs	r3, r3
 8001824:	b299      	uxth	r1, r3
 8001826:	4b33      	ldr	r3, [pc, #204]	; (80018f4 <send_to_pc+0x2a0>)
 8001828:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			}

			REG_INPUT_BUF[nodeIdIdx++] = bat_h*10 + bat_l ;
 800182c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001830:	b29b      	uxth	r3, r3
 8001832:	461a      	mov	r2, r3
 8001834:	0092      	lsls	r2, r2, #2
 8001836:	4413      	add	r3, r2
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	b299      	uxth	r1, r3
 800183c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001840:	b29a      	uxth	r2, r3
 8001842:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8001846:	1c58      	adds	r0, r3, #1
 8001848:	f8a7 008e 	strh.w	r0, [r7, #142]	; 0x8e
 800184c:	4618      	mov	r0, r3
 800184e:	188b      	adds	r3, r1, r2
 8001850:	b29a      	uxth	r2, r3
 8001852:	4b28      	ldr	r3, [pc, #160]	; (80018f4 <send_to_pc+0x2a0>)
 8001854:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
			REG_INPUT_BUF[nodeIdIdx++] = -footer.rssi;
 8001858:	4b27      	ldr	r3, [pc, #156]	; (80018f8 <send_to_pc+0x2a4>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	b299      	uxth	r1, r3
 800185e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8001862:	1c5a      	adds	r2, r3, #1
 8001864:	f8a7 208e 	strh.w	r2, [r7, #142]	; 0x8e
 8001868:	461a      	mov	r2, r3
 800186a:	460b      	mov	r3, r1
 800186c:	425b      	negs	r3, r3
 800186e:	b299      	uxth	r1, r3
 8001870:	4b20      	ldr	r3, [pc, #128]	; (80018f4 <send_to_pc+0x2a0>)
 8001872:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			sprintf(send_pc_buf, "%c%d%d%d%c%d%d%d%d%d%d%c", 					STX,	// stx

																				data_msg.hdr.length-2,  // ?
 8001876:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <send_to_pc+0x290>)
 8001878:	781b      	ldrb	r3, [r3, #0]
			sprintf(send_pc_buf, "%c%d%d%d%c%d%d%d%d%d%d%c", 					STX,	// stx
 800187a:	f1a3 0c02 	sub.w	ip, r3, #2
 800187e:	4b1f      	ldr	r3, [pc, #124]	; (80018fc <send_to_pc+0x2a8>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001884:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001888:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
 800188c:	62ba      	str	r2, [r7, #40]	; 0x28
 800188e:	f897 103b 	ldrb.w	r1, [r7, #59]	; 0x3b
 8001892:	f897 003a 	ldrb.w	r0, [r7, #58]	; 0x3a
 8001896:	f897 4039 	ldrb.w	r4, [r7, #57]	; 0x39
 800189a:	f897 503d 	ldrb.w	r5, [r7, #61]	; 0x3d
 800189e:	f897 603c 	ldrb.w	r6, [r7, #60]	; 0x3c
																				ntc_value_100,   // NTC VALUE
																				ntc_value_10,   // NTC VALUE
																				ntc_value_1,   // NTC VALUE
																				bat_h,  // bat H
																				bat_l,  // bat L
																				footer.rssi,
 80018a2:	4a15      	ldr	r2, [pc, #84]	; (80018f8 <send_to_pc+0x2a4>)
 80018a4:	f892 e000 	ldrb.w	lr, [r2]
			sprintf(send_pc_buf, "%c%d%d%d%c%d%d%d%d%d%d%c", 					STX,	// stx
 80018a8:	f8c7 e024 	str.w	lr, [r7, #36]	; 0x24
 80018ac:	2203      	movs	r2, #3
 80018ae:	9209      	str	r2, [sp, #36]	; 0x24
 80018b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018b2:	9208      	str	r2, [sp, #32]
 80018b4:	9607      	str	r6, [sp, #28]
 80018b6:	9506      	str	r5, [sp, #24]
 80018b8:	9405      	str	r4, [sp, #20]
 80018ba:	9004      	str	r0, [sp, #16]
 80018bc:	9103      	str	r1, [sp, #12]
 80018be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018c0:	9202      	str	r2, [sp, #8]
 80018c2:	9301      	str	r3, [sp, #4]
 80018c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	4663      	mov	r3, ip
 80018ca:	2202      	movs	r2, #2
 80018cc:	490c      	ldr	r1, [pc, #48]	; (8001900 <send_to_pc+0x2ac>)
 80018ce:	480d      	ldr	r0, [pc, #52]	; (8001904 <send_to_pc+0x2b0>)
 80018d0:	f005 fcb0 	bl	8007234 <siprintf>
																				ETX
			);
			HAL_UART_Transmit(&huart1, send_pc_buf, 14, 10);
 80018d4:	230a      	movs	r3, #10
 80018d6:	220e      	movs	r2, #14
 80018d8:	490a      	ldr	r1, [pc, #40]	; (8001904 <send_to_pc+0x2b0>)
 80018da:	480b      	ldr	r0, [pc, #44]	; (8001908 <send_to_pc+0x2b4>)
 80018dc:	f004 fb0f 	bl	8005efe <HAL_UART_Transmit>
		}
		break;
 80018e0:	f001 ba7e 	b.w	8002de0 <send_to_pc+0x178c>
 80018e4:	200002cc 	.word	0x200002cc
 80018e8:	10624dd3 	.word	0x10624dd3
 80018ec:	51eb851f 	.word	0x51eb851f
 80018f0:	66666667 	.word	0x66666667
 80018f4:	20000300 	.word	0x20000300
 80018f8:	200002dc 	.word	0x200002dc
 80018fc:	200002e4 	.word	0x200002e4
 8001900:	08007808 	.word	0x08007808
 8001904:	200001b0 	.word	0x200001b0
 8001908:	2000071c 	.word	0x2000071c
		case PHASE_3_VOL_ID:
		{
			uint8_t phase_3_vol = data_msg.payload[0];
 800190c:	4bc9      	ldr	r3, [pc, #804]	; (8001c34 <send_to_pc+0x5e0>)
 800190e:	789b      	ldrb	r3, [r3, #2]
 8001910:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
			
			uint8_t phase_R_vol_100 = data_msg.payload[1]/10;
 8001914:	4bc7      	ldr	r3, [pc, #796]	; (8001c34 <send_to_pc+0x5e0>)
 8001916:	78db      	ldrb	r3, [r3, #3]
 8001918:	4ac7      	ldr	r2, [pc, #796]	; (8001c38 <send_to_pc+0x5e4>)
 800191a:	fba2 2303 	umull	r2, r3, r2, r3
 800191e:	08db      	lsrs	r3, r3, #3
 8001920:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
			uint8_t phase_R_vol_10 = data_msg.payload[1]%10;
 8001924:	4bc3      	ldr	r3, [pc, #780]	; (8001c34 <send_to_pc+0x5e0>)
 8001926:	78da      	ldrb	r2, [r3, #3]
 8001928:	4bc3      	ldr	r3, [pc, #780]	; (8001c38 <send_to_pc+0x5e4>)
 800192a:	fba3 1302 	umull	r1, r3, r3, r2
 800192e:	08d9      	lsrs	r1, r3, #3
 8001930:	460b      	mov	r3, r1
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	440b      	add	r3, r1
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			uint8_t phase_R_vol_1 = data_msg.payload[2]/10;
 800193e:	4bbd      	ldr	r3, [pc, #756]	; (8001c34 <send_to_pc+0x5e0>)
 8001940:	791b      	ldrb	r3, [r3, #4]
 8001942:	4abd      	ldr	r2, [pc, #756]	; (8001c38 <send_to_pc+0x5e4>)
 8001944:	fba2 2303 	umull	r2, r3, r2, r3
 8001948:	08db      	lsrs	r3, r3, #3
 800194a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
			uint8_t phase_R_vol_0 = data_msg.payload[2]%10;
 800194e:	4bb9      	ldr	r3, [pc, #740]	; (8001c34 <send_to_pc+0x5e0>)
 8001950:	791a      	ldrb	r2, [r3, #4]
 8001952:	4bb9      	ldr	r3, [pc, #740]	; (8001c38 <send_to_pc+0x5e4>)
 8001954:	fba3 1302 	umull	r1, r3, r3, r2
 8001958:	08d9      	lsrs	r1, r3, #3
 800195a:	460b      	mov	r3, r1
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	440b      	add	r3, r1
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

			uint8_t phase_S_vol_100 = data_msg.payload[3]/10;
 8001968:	4bb2      	ldr	r3, [pc, #712]	; (8001c34 <send_to_pc+0x5e0>)
 800196a:	795b      	ldrb	r3, [r3, #5]
 800196c:	4ab2      	ldr	r2, [pc, #712]	; (8001c38 <send_to_pc+0x5e4>)
 800196e:	fba2 2303 	umull	r2, r3, r2, r3
 8001972:	08db      	lsrs	r3, r3, #3
 8001974:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
			uint8_t phase_S_vol_10 = data_msg.payload[3]%10;
 8001978:	4bae      	ldr	r3, [pc, #696]	; (8001c34 <send_to_pc+0x5e0>)
 800197a:	795a      	ldrb	r2, [r3, #5]
 800197c:	4bae      	ldr	r3, [pc, #696]	; (8001c38 <send_to_pc+0x5e4>)
 800197e:	fba3 1302 	umull	r1, r3, r3, r2
 8001982:	08d9      	lsrs	r1, r3, #3
 8001984:	460b      	mov	r3, r1
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	440b      	add	r3, r1
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			uint8_t phase_S_vol_1 = data_msg.payload[4]/10;
 8001992:	4ba8      	ldr	r3, [pc, #672]	; (8001c34 <send_to_pc+0x5e0>)
 8001994:	799b      	ldrb	r3, [r3, #6]
 8001996:	4aa8      	ldr	r2, [pc, #672]	; (8001c38 <send_to_pc+0x5e4>)
 8001998:	fba2 2303 	umull	r2, r3, r2, r3
 800199c:	08db      	lsrs	r3, r3, #3
 800199e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
			uint8_t phase_S_vol_0 = data_msg.payload[4]%10;
 80019a2:	4ba4      	ldr	r3, [pc, #656]	; (8001c34 <send_to_pc+0x5e0>)
 80019a4:	799a      	ldrb	r2, [r3, #6]
 80019a6:	4ba4      	ldr	r3, [pc, #656]	; (8001c38 <send_to_pc+0x5e4>)
 80019a8:	fba3 1302 	umull	r1, r3, r3, r2
 80019ac:	08d9      	lsrs	r1, r3, #3
 80019ae:	460b      	mov	r3, r1
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	440b      	add	r3, r1
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

			uint8_t phase_T_vol_100 = data_msg.payload[5]/10;
 80019bc:	4b9d      	ldr	r3, [pc, #628]	; (8001c34 <send_to_pc+0x5e0>)
 80019be:	79db      	ldrb	r3, [r3, #7]
 80019c0:	4a9d      	ldr	r2, [pc, #628]	; (8001c38 <send_to_pc+0x5e4>)
 80019c2:	fba2 2303 	umull	r2, r3, r2, r3
 80019c6:	08db      	lsrs	r3, r3, #3
 80019c8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
			uint8_t phase_T_vol_10 = data_msg.payload[5]%10;
 80019cc:	4b99      	ldr	r3, [pc, #612]	; (8001c34 <send_to_pc+0x5e0>)
 80019ce:	79da      	ldrb	r2, [r3, #7]
 80019d0:	4b99      	ldr	r3, [pc, #612]	; (8001c38 <send_to_pc+0x5e4>)
 80019d2:	fba3 1302 	umull	r1, r3, r3, r2
 80019d6:	08d9      	lsrs	r1, r3, #3
 80019d8:	460b      	mov	r3, r1
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			uint8_t phase_T_vol_1 = data_msg.payload[6]/10;
 80019e6:	4b93      	ldr	r3, [pc, #588]	; (8001c34 <send_to_pc+0x5e0>)
 80019e8:	7a1b      	ldrb	r3, [r3, #8]
 80019ea:	4a93      	ldr	r2, [pc, #588]	; (8001c38 <send_to_pc+0x5e4>)
 80019ec:	fba2 2303 	umull	r2, r3, r2, r3
 80019f0:	08db      	lsrs	r3, r3, #3
 80019f2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			uint8_t phase_T_vol_0 = data_msg.payload[6]%10;
 80019f6:	4b8f      	ldr	r3, [pc, #572]	; (8001c34 <send_to_pc+0x5e0>)
 80019f8:	7a1a      	ldrb	r2, [r3, #8]
 80019fa:	4b8f      	ldr	r3, [pc, #572]	; (8001c38 <send_to_pc+0x5e4>)
 80019fc:	fba3 1302 	umull	r1, r3, r3, r2
 8001a00:	08d9      	lsrs	r1, r3, #3
 8001a02:	460b      	mov	r3, r1
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	440b      	add	r3, r1
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

			uint8_t bat_h =data_msg.payload[7];
 8001a10:	4b88      	ldr	r3, [pc, #544]	; (8001c34 <send_to_pc+0x5e0>)
 8001a12:	7a5b      	ldrb	r3, [r3, #9]
 8001a14:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
			uint8_t bat_l =data_msg.payload[8];
 8001a18:	4b86      	ldr	r3, [pc, #536]	; (8001c34 <send_to_pc+0x5e0>)
 8001a1a:	7a9b      	ldrb	r3, [r3, #10]
 8001a1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f


			REG_INPUT_BUF[nodeIdIdx++] = phase_3_vol; // TPYE
 8001a20:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8001a24:	1c5a      	adds	r2, r3, #1
 8001a26:	f8a7 208e 	strh.w	r2, [r7, #142]	; 0x8e
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a30:	b299      	uxth	r1, r3
 8001a32:	4b82      	ldr	r3, [pc, #520]	; (8001c3c <send_to_pc+0x5e8>)
 8001a34:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			REG_INPUT_BUF[nodeIdIdx++] = 3+2; // DATA LEN  3PHASE   R S T
 8001a38:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8001a3c:	1c5a      	adds	r2, r3, #1
 8001a3e:	f8a7 208e 	strh.w	r2, [r7, #142]	; 0x8e
 8001a42:	461a      	mov	r2, r3
 8001a44:	4b7d      	ldr	r3, [pc, #500]	; (8001c3c <send_to_pc+0x5e8>)
 8001a46:	2105      	movs	r1, #5
 8001a48:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]



			REG_INPUT_BUF[nodeIdIdx++] = (phase_R_vol_100 *1000)  + (phase_R_vol_10 *100) + (phase_R_vol_1 *10)+ phase_R_vol_0 ;
 8001a4c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	461a      	mov	r2, r3
 8001a54:	0152      	lsls	r2, r2, #5
 8001a56:	1ad2      	subs	r2, r2, r3
 8001a58:	0092      	lsls	r2, r2, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	4619      	mov	r1, r3
 8001a68:	0089      	lsls	r1, r1, #2
 8001a6a:	440b      	add	r3, r1
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	0088      	lsls	r0, r1, #2
 8001a70:	4619      	mov	r1, r3
 8001a72:	4603      	mov	r3, r0
 8001a74:	440b      	add	r3, r1
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	4413      	add	r3, r2
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	4619      	mov	r1, r3
 8001a86:	0089      	lsls	r1, r1, #2
 8001a88:	440b      	add	r3, r1
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	4413      	add	r3, r2
 8001a90:	b299      	uxth	r1, r3
 8001a92:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8001a9c:	1c58      	adds	r0, r3, #1
 8001a9e:	f8a7 008e 	strh.w	r0, [r7, #142]	; 0x8e
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	188b      	adds	r3, r1, r2
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	4b64      	ldr	r3, [pc, #400]	; (8001c3c <send_to_pc+0x5e8>)
 8001aaa:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
			REG_INPUT_BUF[nodeIdIdx++] = (phase_S_vol_100 *1000)  + (phase_S_vol_10 *100) + (phase_S_vol_1 *10)+ phase_S_vol_0 ;
 8001aae:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	0152      	lsls	r2, r2, #5
 8001ab8:	1ad2      	subs	r2, r2, r3
 8001aba:	0092      	lsls	r2, r2, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	4619      	mov	r1, r3
 8001aca:	0089      	lsls	r1, r1, #2
 8001acc:	440b      	add	r3, r1
 8001ace:	4619      	mov	r1, r3
 8001ad0:	0088      	lsls	r0, r1, #2
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	440b      	add	r3, r1
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	4413      	add	r3, r2
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	0089      	lsls	r1, r1, #2
 8001aea:	440b      	add	r3, r1
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	4413      	add	r3, r2
 8001af2:	b299      	uxth	r1, r3
 8001af4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8001afe:	1c58      	adds	r0, r3, #1
 8001b00:	f8a7 008e 	strh.w	r0, [r7, #142]	; 0x8e
 8001b04:	4618      	mov	r0, r3
 8001b06:	188b      	adds	r3, r1, r2
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	4b4c      	ldr	r3, [pc, #304]	; (8001c3c <send_to_pc+0x5e8>)
 8001b0c:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
			REG_INPUT_BUF[nodeIdIdx++] = (phase_T_vol_100 *1000)  + (phase_T_vol_10 *100) + (phase_T_vol_1 *10)+ phase_T_vol_0 ;
 8001b10:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	461a      	mov	r2, r3
 8001b18:	0152      	lsls	r2, r2, #5
 8001b1a:	1ad2      	subs	r2, r2, r3
 8001b1c:	0092      	lsls	r2, r2, #2
 8001b1e:	4413      	add	r3, r2
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	0089      	lsls	r1, r1, #2
 8001b2e:	440b      	add	r3, r1
 8001b30:	4619      	mov	r1, r3
 8001b32:	0088      	lsls	r0, r1, #2
 8001b34:	4619      	mov	r1, r3
 8001b36:	4603      	mov	r3, r0
 8001b38:	440b      	add	r3, r1
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	4413      	add	r3, r2
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	4619      	mov	r1, r3
 8001b4a:	0089      	lsls	r1, r1, #2
 8001b4c:	440b      	add	r3, r1
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	4413      	add	r3, r2
 8001b54:	b299      	uxth	r1, r3
 8001b56:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8001b60:	1c58      	adds	r0, r3, #1
 8001b62:	f8a7 008e 	strh.w	r0, [r7, #142]	; 0x8e
 8001b66:	4618      	mov	r0, r3
 8001b68:	188b      	adds	r3, r1, r2
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	4b33      	ldr	r3, [pc, #204]	; (8001c3c <send_to_pc+0x5e8>)
 8001b6e:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
			REG_INPUT_BUF[nodeIdIdx++] = bat_h*10 + bat_l ;
 8001b72:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	461a      	mov	r2, r3
 8001b7a:	0092      	lsls	r2, r2, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	b299      	uxth	r1, r3
 8001b82:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8001b8c:	1c58      	adds	r0, r3, #1
 8001b8e:	f8a7 008e 	strh.w	r0, [r7, #142]	; 0x8e
 8001b92:	4618      	mov	r0, r3
 8001b94:	188b      	adds	r3, r1, r2
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	4b28      	ldr	r3, [pc, #160]	; (8001c3c <send_to_pc+0x5e8>)
 8001b9a:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
			REG_INPUT_BUF[nodeIdIdx++] = -footer.rssi;
 8001b9e:	4b28      	ldr	r3, [pc, #160]	; (8001c40 <send_to_pc+0x5ec>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	b299      	uxth	r1, r3
 8001ba4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8001ba8:	1c5a      	adds	r2, r3, #1
 8001baa:	f8a7 208e 	strh.w	r2, [r7, #142]	; 0x8e
 8001bae:	461a      	mov	r2, r3
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	425b      	negs	r3, r3
 8001bb4:	b299      	uxth	r1, r3
 8001bb6:	4b21      	ldr	r3, [pc, #132]	; (8001c3c <send_to_pc+0x5e8>)
 8001bb8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			sprintf(send_pc_buf, "%c%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%c", 											STX,	// stx
																										data_msg.hdr.length+6,  // ?
 8001bbc:	4b1d      	ldr	r3, [pc, #116]	; (8001c34 <send_to_pc+0x5e0>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
			sprintf(send_pc_buf, "%c%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%c", 											STX,	// stx
 8001bc0:	f103 0c06 	add.w	ip, r3, #6
 8001bc4:	4b1f      	ldr	r3, [pc, #124]	; (8001c44 <send_to_pc+0x5f0>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bca:	f897 504d 	ldrb.w	r5, [r7, #77]	; 0x4d
 8001bce:	f897 604c 	ldrb.w	r6, [r7, #76]	; 0x4c
 8001bd2:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8001bd6:	62ba      	str	r2, [r7, #40]	; 0x28
 8001bd8:	f897 104a 	ldrb.w	r1, [r7, #74]	; 0x4a
 8001bdc:	6279      	str	r1, [r7, #36]	; 0x24
 8001bde:	f897 0049 	ldrb.w	r0, [r7, #73]	; 0x49
 8001be2:	6238      	str	r0, [r7, #32]
 8001be4:	f897 4048 	ldrb.w	r4, [r7, #72]	; 0x48
 8001be8:	61fc      	str	r4, [r7, #28]
 8001bea:	f897 e047 	ldrb.w	lr, [r7, #71]	; 0x47
 8001bee:	4673      	mov	r3, lr
 8001bf0:	61bb      	str	r3, [r7, #24]
 8001bf2:	f897 e046 	ldrb.w	lr, [r7, #70]	; 0x46
 8001bf6:	4672      	mov	r2, lr
 8001bf8:	617a      	str	r2, [r7, #20]
 8001bfa:	f897 e045 	ldrb.w	lr, [r7, #69]	; 0x45
 8001bfe:	4671      	mov	r1, lr
 8001c00:	6139      	str	r1, [r7, #16]
 8001c02:	f897 e044 	ldrb.w	lr, [r7, #68]	; 0x44
 8001c06:	4670      	mov	r0, lr
 8001c08:	60f8      	str	r0, [r7, #12]
 8001c0a:	f897 e043 	ldrb.w	lr, [r7, #67]	; 0x43
 8001c0e:	4674      	mov	r4, lr
 8001c10:	60bc      	str	r4, [r7, #8]
 8001c12:	f897 e042 	ldrb.w	lr, [r7, #66]	; 0x42
 8001c16:	4673      	mov	r3, lr
 8001c18:	607b      	str	r3, [r7, #4]
 8001c1a:	f897 4041 	ldrb.w	r4, [r7, #65]	; 0x41
 8001c1e:	f897 0040 	ldrb.w	r0, [r7, #64]	; 0x40
 8001c22:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
																										phase_T_vol_10,
																										phase_T_vol_1,
																										phase_T_vol_0,
																										bat_h,  // bat H
																										bat_l,  // bat L
																										footer.rssi,
 8001c26:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <send_to_pc+0x5ec>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
			sprintf(send_pc_buf, "%c%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%c", 											STX,	// stx
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	9311      	str	r3, [sp, #68]	; 0x44
 8001c30:	9210      	str	r2, [sp, #64]	; 0x40
 8001c32:	e009      	b.n	8001c48 <send_to_pc+0x5f4>
 8001c34:	200002cc 	.word	0x200002cc
 8001c38:	cccccccd 	.word	0xcccccccd
 8001c3c:	20000300 	.word	0x20000300
 8001c40:	200002dc 	.word	0x200002dc
 8001c44:	200002e4 	.word	0x200002e4
 8001c48:	910f      	str	r1, [sp, #60]	; 0x3c
 8001c4a:	900e      	str	r0, [sp, #56]	; 0x38
 8001c4c:	940d      	str	r4, [sp, #52]	; 0x34
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	930c      	str	r3, [sp, #48]	; 0x30
 8001c52:	68bc      	ldr	r4, [r7, #8]
 8001c54:	940b      	str	r4, [sp, #44]	; 0x2c
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	900a      	str	r0, [sp, #40]	; 0x28
 8001c5a:	6939      	ldr	r1, [r7, #16]
 8001c5c:	9109      	str	r1, [sp, #36]	; 0x24
 8001c5e:	697a      	ldr	r2, [r7, #20]
 8001c60:	9208      	str	r2, [sp, #32]
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	9307      	str	r3, [sp, #28]
 8001c66:	69fc      	ldr	r4, [r7, #28]
 8001c68:	9406      	str	r4, [sp, #24]
 8001c6a:	6a38      	ldr	r0, [r7, #32]
 8001c6c:	9005      	str	r0, [sp, #20]
 8001c6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c70:	9104      	str	r1, [sp, #16]
 8001c72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c74:	9203      	str	r2, [sp, #12]
 8001c76:	9602      	str	r6, [sp, #8]
 8001c78:	9501      	str	r5, [sp, #4]
 8001c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	4663      	mov	r3, ip
 8001c80:	2202      	movs	r2, #2
 8001c82:	4972      	ldr	r1, [pc, #456]	; (8001e4c <send_to_pc+0x7f8>)
 8001c84:	4872      	ldr	r0, [pc, #456]	; (8001e50 <send_to_pc+0x7fc>)
 8001c86:	f005 fad5 	bl	8007234 <siprintf>
																										ETX
			);
			HAL_UART_Transmit(&huart1, send_pc_buf,22, 10);
 8001c8a:	230a      	movs	r3, #10
 8001c8c:	2216      	movs	r2, #22
 8001c8e:	4970      	ldr	r1, [pc, #448]	; (8001e50 <send_to_pc+0x7fc>)
 8001c90:	4870      	ldr	r0, [pc, #448]	; (8001e54 <send_to_pc+0x800>)
 8001c92:	f004 f934 	bl	8005efe <HAL_UART_Transmit>
		}
		break;
 8001c96:	f001 b8a3 	b.w	8002de0 <send_to_pc+0x178c>
		case PHASE_2_VOL_ID:
		{
			uint8_t phase_2_vol = data_msg.payload[0];
 8001c9a:	4b6f      	ldr	r3, [pc, #444]	; (8001e58 <send_to_pc+0x804>)
 8001c9c:	789b      	ldrb	r3, [r3, #2]
 8001c9e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
			
			uint8_t phase_2_vol_100 = data_msg.payload[1]/10;
 8001ca2:	4b6d      	ldr	r3, [pc, #436]	; (8001e58 <send_to_pc+0x804>)
 8001ca4:	78db      	ldrb	r3, [r3, #3]
 8001ca6:	4a6d      	ldr	r2, [pc, #436]	; (8001e5c <send_to_pc+0x808>)
 8001ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cac:	08db      	lsrs	r3, r3, #3
 8001cae:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			uint8_t phase_2_vol_10 = data_msg.payload[1]%10;
 8001cb2:	4b69      	ldr	r3, [pc, #420]	; (8001e58 <send_to_pc+0x804>)
 8001cb4:	78da      	ldrb	r2, [r3, #3]
 8001cb6:	4b69      	ldr	r3, [pc, #420]	; (8001e5c <send_to_pc+0x808>)
 8001cb8:	fba3 1302 	umull	r1, r3, r3, r2
 8001cbc:	08d9      	lsrs	r1, r3, #3
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	440b      	add	r3, r1
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
			uint8_t phase_2_vol_1 = data_msg.payload[2]/10;
 8001ccc:	4b62      	ldr	r3, [pc, #392]	; (8001e58 <send_to_pc+0x804>)
 8001cce:	791b      	ldrb	r3, [r3, #4]
 8001cd0:	4a62      	ldr	r2, [pc, #392]	; (8001e5c <send_to_pc+0x808>)
 8001cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd6:	08db      	lsrs	r3, r3, #3
 8001cd8:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
			uint8_t phase_2_vol_0 = data_msg.payload[2]%10;
 8001cdc:	4b5e      	ldr	r3, [pc, #376]	; (8001e58 <send_to_pc+0x804>)
 8001cde:	791a      	ldrb	r2, [r3, #4]
 8001ce0:	4b5e      	ldr	r3, [pc, #376]	; (8001e5c <send_to_pc+0x808>)
 8001ce2:	fba3 1302 	umull	r1, r3, r3, r2
 8001ce6:	08d9      	lsrs	r1, r3, #3
 8001ce8:	460b      	mov	r3, r1
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	440b      	add	r3, r1
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
			uint8_t bat_h =data_msg.payload[7];
 8001cf6:	4b58      	ldr	r3, [pc, #352]	; (8001e58 <send_to_pc+0x804>)
 8001cf8:	7a5b      	ldrb	r3, [r3, #9]
 8001cfa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			uint8_t bat_l =data_msg.payload[8];
 8001cfe:	4b56      	ldr	r3, [pc, #344]	; (8001e58 <send_to_pc+0x804>)
 8001d00:	7a9b      	ldrb	r3, [r3, #10]
 8001d02:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

			REG_INPUT_BUF[nodeIdIdx++] = phase_2_vol; // TPYE
 8001d06:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8001d0a:	1c5a      	adds	r2, r3, #1
 8001d0c:	f8a7 208e 	strh.w	r2, [r7, #142]	; 0x8e
 8001d10:	461a      	mov	r2, r3
 8001d12:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001d16:	b299      	uxth	r1, r3
 8001d18:	4b51      	ldr	r3, [pc, #324]	; (8001e60 <send_to_pc+0x80c>)
 8001d1a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			REG_INPUT_BUF[nodeIdIdx++] = 1+2; // DATA LEN
 8001d1e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8001d22:	1c5a      	adds	r2, r3, #1
 8001d24:	f8a7 208e 	strh.w	r2, [r7, #142]	; 0x8e
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4b4d      	ldr	r3, [pc, #308]	; (8001e60 <send_to_pc+0x80c>)
 8001d2c:	2103      	movs	r1, #3
 8001d2e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			REG_INPUT_BUF[nodeIdIdx++] = (phase_2_vol_100 *1000)  + (phase_2_vol_10 *100) + (phase_2_vol_1 *10) + phase_2_vol_0;
 8001d32:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	461a      	mov	r2, r3
 8001d3a:	0152      	lsls	r2, r2, #5
 8001d3c:	1ad2      	subs	r2, r2, r3
 8001d3e:	0092      	lsls	r2, r2, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	0089      	lsls	r1, r1, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	4619      	mov	r1, r3
 8001d54:	0088      	lsls	r0, r1, #2
 8001d56:	4619      	mov	r1, r3
 8001d58:	4603      	mov	r3, r0
 8001d5a:	440b      	add	r3, r1
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	4413      	add	r3, r2
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	0089      	lsls	r1, r1, #2
 8001d6e:	440b      	add	r3, r1
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	4413      	add	r3, r2
 8001d76:	b299      	uxth	r1, r3
 8001d78:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8001d82:	1c58      	adds	r0, r3, #1
 8001d84:	f8a7 008e 	strh.w	r0, [r7, #142]	; 0x8e
 8001d88:	4618      	mov	r0, r3
 8001d8a:	188b      	adds	r3, r1, r2
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	4b34      	ldr	r3, [pc, #208]	; (8001e60 <send_to_pc+0x80c>)
 8001d90:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
			REG_INPUT_BUF[nodeIdIdx++] = bat_h*10 + bat_l ;
 8001d94:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	0092      	lsls	r2, r2, #2
 8001d9e:	4413      	add	r3, r2
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	b299      	uxth	r1, r3
 8001da4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8001dae:	1c58      	adds	r0, r3, #1
 8001db0:	f8a7 008e 	strh.w	r0, [r7, #142]	; 0x8e
 8001db4:	4618      	mov	r0, r3
 8001db6:	188b      	adds	r3, r1, r2
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	4b29      	ldr	r3, [pc, #164]	; (8001e60 <send_to_pc+0x80c>)
 8001dbc:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
			REG_INPUT_BUF[nodeIdIdx++] = -footer.rssi;
 8001dc0:	4b28      	ldr	r3, [pc, #160]	; (8001e64 <send_to_pc+0x810>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	b299      	uxth	r1, r3
 8001dc6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8001dca:	1c5a      	adds	r2, r3, #1
 8001dcc:	f8a7 208e 	strh.w	r2, [r7, #142]	; 0x8e
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	425b      	negs	r3, r3
 8001dd6:	b299      	uxth	r1, r3
 8001dd8:	4b21      	ldr	r3, [pc, #132]	; (8001e60 <send_to_pc+0x80c>)
 8001dda:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			sprintf(send_pc_buf, "%c%d%d%d%d%d%d%d%d%d%d%c", 											STX,	// stx
																										data_msg.hdr.length-2,  // ?
 8001dde:	4b1e      	ldr	r3, [pc, #120]	; (8001e58 <send_to_pc+0x804>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
			sprintf(send_pc_buf, "%c%d%d%d%d%d%d%d%d%d%d%c", 											STX,	// stx
 8001de2:	f1a3 0c02 	sub.w	ip, r3, #2
 8001de6:	4b20      	ldr	r3, [pc, #128]	; (8001e68 <send_to_pc+0x814>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dec:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001df0:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8001df4:	62ba      	str	r2, [r7, #40]	; 0x28
 8001df6:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8001dfa:	f897 0051 	ldrb.w	r0, [r7, #81]	; 0x51
 8001dfe:	f897 4050 	ldrb.w	r4, [r7, #80]	; 0x50
 8001e02:	f897 504f 	ldrb.w	r5, [r7, #79]	; 0x4f
 8001e06:	f897 604e 	ldrb.w	r6, [r7, #78]	; 0x4e
																										phase_2_vol_10,
																										phase_2_vol_1,
																										phase_2_vol_0,
																										bat_h,  // bat H
																										bat_l,  // bat L
																										footer.rssi,
 8001e0a:	4a16      	ldr	r2, [pc, #88]	; (8001e64 <send_to_pc+0x810>)
 8001e0c:	f892 e000 	ldrb.w	lr, [r2]
			sprintf(send_pc_buf, "%c%d%d%d%d%d%d%d%d%d%d%c", 											STX,	// stx
 8001e10:	f8c7 e024 	str.w	lr, [r7, #36]	; 0x24
 8001e14:	2203      	movs	r2, #3
 8001e16:	9209      	str	r2, [sp, #36]	; 0x24
 8001e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e1a:	9208      	str	r2, [sp, #32]
 8001e1c:	9607      	str	r6, [sp, #28]
 8001e1e:	9506      	str	r5, [sp, #24]
 8001e20:	9405      	str	r4, [sp, #20]
 8001e22:	9004      	str	r0, [sp, #16]
 8001e24:	9103      	str	r1, [sp, #12]
 8001e26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e28:	9202      	str	r2, [sp, #8]
 8001e2a:	9301      	str	r3, [sp, #4]
 8001e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	4663      	mov	r3, ip
 8001e32:	2202      	movs	r2, #2
 8001e34:	490d      	ldr	r1, [pc, #52]	; (8001e6c <send_to_pc+0x818>)
 8001e36:	4806      	ldr	r0, [pc, #24]	; (8001e50 <send_to_pc+0x7fc>)
 8001e38:	f005 f9fc 	bl	8007234 <siprintf>
																										ETX
			);
			HAL_UART_Transmit(&huart1, send_pc_buf,14, 10);
 8001e3c:	230a      	movs	r3, #10
 8001e3e:	220e      	movs	r2, #14
 8001e40:	4903      	ldr	r1, [pc, #12]	; (8001e50 <send_to_pc+0x7fc>)
 8001e42:	4804      	ldr	r0, [pc, #16]	; (8001e54 <send_to_pc+0x800>)
 8001e44:	f004 f85b 	bl	8005efe <HAL_UART_Transmit>
		}
		break;
 8001e48:	f000 bfca 	b.w	8002de0 <send_to_pc+0x178c>
 8001e4c:	08007824 	.word	0x08007824
 8001e50:	200001b0 	.word	0x200001b0
 8001e54:	2000071c 	.word	0x2000071c
 8001e58:	200002cc 	.word	0x200002cc
 8001e5c:	cccccccd 	.word	0xcccccccd
 8001e60:	20000300 	.word	0x20000300
 8001e64:	200002dc 	.word	0x200002dc
 8001e68:	200002e4 	.word	0x200002e4
 8001e6c:	08007850 	.word	0x08007850
		case PREASURE_ID:
		{
			uint8_t preasure_type=data_msg.payload[0];
 8001e70:	4bbe      	ldr	r3, [pc, #760]	; (800216c <send_to_pc+0xb18>)
 8001e72:	789b      	ldrb	r3, [r3, #2]
 8001e74:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

			uint8_t preasure_val_1 		= data_msg.payload[1]/10;
 8001e78:	4bbc      	ldr	r3, [pc, #752]	; (800216c <send_to_pc+0xb18>)
 8001e7a:	78db      	ldrb	r3, [r3, #3]
 8001e7c:	4abc      	ldr	r2, [pc, #752]	; (8002170 <send_to_pc+0xb1c>)
 8001e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e82:	08db      	lsrs	r3, r3, #3
 8001e84:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
			uint8_t preasure_val_2 		= data_msg.payload[1]%10;
 8001e88:	4bb8      	ldr	r3, [pc, #736]	; (800216c <send_to_pc+0xb18>)
 8001e8a:	78da      	ldrb	r2, [r3, #3]
 8001e8c:	4bb8      	ldr	r3, [pc, #736]	; (8002170 <send_to_pc+0xb1c>)
 8001e8e:	fba3 1302 	umull	r1, r3, r3, r2
 8001e92:	08d9      	lsrs	r1, r3, #3
 8001e94:	460b      	mov	r3, r1
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	440b      	add	r3, r1
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
			uint8_t preasure_val_3 		= data_msg.payload[2]/10;
 8001ea2:	4bb2      	ldr	r3, [pc, #712]	; (800216c <send_to_pc+0xb18>)
 8001ea4:	791b      	ldrb	r3, [r3, #4]
 8001ea6:	4ab2      	ldr	r2, [pc, #712]	; (8002170 <send_to_pc+0xb1c>)
 8001ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8001eac:	08db      	lsrs	r3, r3, #3
 8001eae:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
			uint8_t preasure_val_4      = data_msg.payload[2]%10;
 8001eb2:	4bae      	ldr	r3, [pc, #696]	; (800216c <send_to_pc+0xb18>)
 8001eb4:	791a      	ldrb	r2, [r3, #4]
 8001eb6:	4bae      	ldr	r3, [pc, #696]	; (8002170 <send_to_pc+0xb1c>)
 8001eb8:	fba3 1302 	umull	r1, r3, r3, r2
 8001ebc:	08d9      	lsrs	r1, r3, #3
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	440b      	add	r3, r1
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			uint8_t bat_h =data_msg.payload[7];
 8001ecc:	4ba7      	ldr	r3, [pc, #668]	; (800216c <send_to_pc+0xb18>)
 8001ece:	7a5b      	ldrb	r3, [r3, #9]
 8001ed0:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			uint8_t bat_l =data_msg.payload[8];
 8001ed4:	4ba5      	ldr	r3, [pc, #660]	; (800216c <send_to_pc+0xb18>)
 8001ed6:	7a9b      	ldrb	r3, [r3, #10]
 8001ed8:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55


			REG_INPUT_BUF[nodeIdIdx++] = preasure_type; // TPYE
 8001edc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8001ee0:	1c5a      	adds	r2, r3, #1
 8001ee2:	f8a7 208e 	strh.w	r2, [r7, #142]	; 0x8e
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001eec:	b299      	uxth	r1, r3
 8001eee:	4ba1      	ldr	r3, [pc, #644]	; (8002174 <send_to_pc+0xb20>)
 8001ef0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			REG_INPUT_BUF[nodeIdIdx++] = 1+2; // DATA LEN
 8001ef4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8001ef8:	1c5a      	adds	r2, r3, #1
 8001efa:	f8a7 208e 	strh.w	r2, [r7, #142]	; 0x8e
 8001efe:	461a      	mov	r2, r3
 8001f00:	4b9c      	ldr	r3, [pc, #624]	; (8002174 <send_to_pc+0xb20>)
 8001f02:	2103      	movs	r1, #3
 8001f04:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			REG_INPUT_BUF[nodeIdIdx++] = (preasure_val_1 *1000)  + (preasure_val_2 *100) + (preasure_val_3 *10) + preasure_val_4;
 8001f08:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	461a      	mov	r2, r3
 8001f10:	0152      	lsls	r2, r2, #5
 8001f12:	1ad2      	subs	r2, r2, r3
 8001f14:	0092      	lsls	r2, r2, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	4619      	mov	r1, r3
 8001f24:	0089      	lsls	r1, r1, #2
 8001f26:	440b      	add	r3, r1
 8001f28:	4619      	mov	r1, r3
 8001f2a:	0088      	lsls	r0, r1, #2
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4603      	mov	r3, r0
 8001f30:	440b      	add	r3, r1
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	4413      	add	r3, r2
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	4619      	mov	r1, r3
 8001f42:	0089      	lsls	r1, r1, #2
 8001f44:	440b      	add	r3, r1
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	4413      	add	r3, r2
 8001f4c:	b299      	uxth	r1, r3
 8001f4e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8001f58:	1c58      	adds	r0, r3, #1
 8001f5a:	f8a7 008e 	strh.w	r0, [r7, #142]	; 0x8e
 8001f5e:	4618      	mov	r0, r3
 8001f60:	188b      	adds	r3, r1, r2
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	4b83      	ldr	r3, [pc, #524]	; (8002174 <send_to_pc+0xb20>)
 8001f66:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
			REG_INPUT_BUF[nodeIdIdx++] = bat_h*10 + bat_l ;
 8001f6a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	461a      	mov	r2, r3
 8001f72:	0092      	lsls	r2, r2, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	b299      	uxth	r1, r3
 8001f7a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8001f84:	1c58      	adds	r0, r3, #1
 8001f86:	f8a7 008e 	strh.w	r0, [r7, #142]	; 0x8e
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	188b      	adds	r3, r1, r2
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	4b78      	ldr	r3, [pc, #480]	; (8002174 <send_to_pc+0xb20>)
 8001f92:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
			REG_INPUT_BUF[nodeIdIdx++] = -footer.rssi;
 8001f96:	4b78      	ldr	r3, [pc, #480]	; (8002178 <send_to_pc+0xb24>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	b299      	uxth	r1, r3
 8001f9c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8001fa0:	1c5a      	adds	r2, r3, #1
 8001fa2:	f8a7 208e 	strh.w	r2, [r7, #142]	; 0x8e
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	460b      	mov	r3, r1
 8001faa:	425b      	negs	r3, r3
 8001fac:	b299      	uxth	r1, r3
 8001fae:	4b71      	ldr	r3, [pc, #452]	; (8002174 <send_to_pc+0xb20>)
 8001fb0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
#if 1
			sprintf(send_pc_buf, "%c%d%d%d%d%d%d%d%d%d%d%c", 											STX,	// stx
																										data_msg.hdr.length-2,  // ?
 8001fb4:	4b6d      	ldr	r3, [pc, #436]	; (800216c <send_to_pc+0xb18>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
			sprintf(send_pc_buf, "%c%d%d%d%d%d%d%d%d%d%d%c", 											STX,	// stx
 8001fb8:	f1a3 0c02 	sub.w	ip, r3, #2
 8001fbc:	4b6f      	ldr	r3, [pc, #444]	; (800217c <send_to_pc+0xb28>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fc2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001fc6:	f897 205a 	ldrb.w	r2, [r7, #90]	; 0x5a
 8001fca:	62ba      	str	r2, [r7, #40]	; 0x28
 8001fcc:	f897 1059 	ldrb.w	r1, [r7, #89]	; 0x59
 8001fd0:	f897 0058 	ldrb.w	r0, [r7, #88]	; 0x58
 8001fd4:	f897 4057 	ldrb.w	r4, [r7, #87]	; 0x57
 8001fd8:	f897 5056 	ldrb.w	r5, [r7, #86]	; 0x56
 8001fdc:	f897 6055 	ldrb.w	r6, [r7, #85]	; 0x55
																										preasure_val_2,
																										preasure_val_3,
																										preasure_val_4,
																										bat_h,  // bat H
																										bat_l,  // bat L
																										footer.rssi,
 8001fe0:	4a65      	ldr	r2, [pc, #404]	; (8002178 <send_to_pc+0xb24>)
 8001fe2:	f892 e000 	ldrb.w	lr, [r2]
			sprintf(send_pc_buf, "%c%d%d%d%d%d%d%d%d%d%d%c", 											STX,	// stx
 8001fe6:	f8c7 e024 	str.w	lr, [r7, #36]	; 0x24
 8001fea:	2203      	movs	r2, #3
 8001fec:	9209      	str	r2, [sp, #36]	; 0x24
 8001fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ff0:	9208      	str	r2, [sp, #32]
 8001ff2:	9607      	str	r6, [sp, #28]
 8001ff4:	9506      	str	r5, [sp, #24]
 8001ff6:	9405      	str	r4, [sp, #20]
 8001ff8:	9004      	str	r0, [sp, #16]
 8001ffa:	9103      	str	r1, [sp, #12]
 8001ffc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ffe:	9202      	str	r2, [sp, #8]
 8002000:	9301      	str	r3, [sp, #4]
 8002002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	4663      	mov	r3, ip
 8002008:	2202      	movs	r2, #2
 800200a:	495d      	ldr	r1, [pc, #372]	; (8002180 <send_to_pc+0xb2c>)
 800200c:	485d      	ldr	r0, [pc, #372]	; (8002184 <send_to_pc+0xb30>)
 800200e:	f005 f911 	bl	8007234 <siprintf>
																										ETX
			);
			HAL_UART_Transmit(&huart1, send_pc_buf,14, 10);
 8002012:	230a      	movs	r3, #10
 8002014:	220e      	movs	r2, #14
 8002016:	495b      	ldr	r1, [pc, #364]	; (8002184 <send_to_pc+0xb30>)
 8002018:	485b      	ldr	r0, [pc, #364]	; (8002188 <send_to_pc+0xb34>)
 800201a:	f003 ff70 	bl	8005efe <HAL_UART_Transmit>
#endif
		}
		break;
 800201e:	f000 bedf 	b.w	8002de0 <send_to_pc+0x178c>
		case WATER_LEAK_ID:
		{
			char sen_value;
			uint8_t water_type = data_msg.payload[0];
 8002022:	4b52      	ldr	r3, [pc, #328]	; (800216c <send_to_pc+0xb18>)
 8002024:	789b      	ldrb	r3, [r3, #2]
 8002026:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			uint8_t dont_care = 0;
 800202a:	2300      	movs	r3, #0
 800202c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			uint8_t bat_h =data_msg.payload[7];
 8002030:	4b4e      	ldr	r3, [pc, #312]	; (800216c <send_to_pc+0xb18>)
 8002032:	7a5b      	ldrb	r3, [r3, #9]
 8002034:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
			uint8_t bat_l =data_msg.payload[8];
 8002038:	4b4c      	ldr	r3, [pc, #304]	; (800216c <send_to_pc+0xb18>)
 800203a:	7a9b      	ldrb	r3, [r3, #10]
 800203c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
			if( data_msg.payload[2] )
 8002040:	4b4a      	ldr	r3, [pc, #296]	; (800216c <send_to_pc+0xb18>)
 8002042:	791b      	ldrb	r3, [r3, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <send_to_pc+0x9fc>
			{
				sen_value = 'D';
 8002048:	2344      	movs	r3, #68	; 0x44
 800204a:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
 800204e:	e002      	b.n	8002056 <send_to_pc+0xa02>
			}
			else
			{
				sen_value = 'N';
 8002050:	234e      	movs	r3, #78	; 0x4e
 8002052:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
			}


			REG_INPUT_BUF[nodeIdIdx++] = water_type; // TPYE
 8002056:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800205a:	1c5a      	adds	r2, r3, #1
 800205c:	f8a7 208e 	strh.w	r2, [r7, #142]	; 0x8e
 8002060:	461a      	mov	r2, r3
 8002062:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002066:	b299      	uxth	r1, r3
 8002068:	4b42      	ldr	r3, [pc, #264]	; (8002174 <send_to_pc+0xb20>)
 800206a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			REG_INPUT_BUF[nodeIdIdx++] = 1+2; // DATA LEN
 800206e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002072:	1c5a      	adds	r2, r3, #1
 8002074:	f8a7 208e 	strh.w	r2, [r7, #142]	; 0x8e
 8002078:	461a      	mov	r2, r3
 800207a:	4b3e      	ldr	r3, [pc, #248]	; (8002174 <send_to_pc+0xb20>)
 800207c:	2103      	movs	r1, #3
 800207e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			if ( sen_value == 'D')
 8002082:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8002086:	2b44      	cmp	r3, #68	; 0x44
 8002088:	d10a      	bne.n	80020a0 <send_to_pc+0xa4c>
				REG_INPUT_BUF[nodeIdIdx++] = 0x0001;
 800208a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800208e:	1c5a      	adds	r2, r3, #1
 8002090:	f8a7 208e 	strh.w	r2, [r7, #142]	; 0x8e
 8002094:	461a      	mov	r2, r3
 8002096:	4b37      	ldr	r3, [pc, #220]	; (8002174 <send_to_pc+0xb20>)
 8002098:	2101      	movs	r1, #1
 800209a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800209e:	e009      	b.n	80020b4 <send_to_pc+0xa60>
			else
				REG_INPUT_BUF[nodeIdIdx++] = 0x0000;
 80020a0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80020a4:	1c5a      	adds	r2, r3, #1
 80020a6:	f8a7 208e 	strh.w	r2, [r7, #142]	; 0x8e
 80020aa:	461a      	mov	r2, r3
 80020ac:	4b31      	ldr	r3, [pc, #196]	; (8002174 <send_to_pc+0xb20>)
 80020ae:	2100      	movs	r1, #0
 80020b0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			REG_INPUT_BUF[nodeIdIdx++] = bat_h*10 + bat_l ;
 80020b4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	461a      	mov	r2, r3
 80020bc:	0092      	lsls	r2, r2, #2
 80020be:	4413      	add	r3, r2
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	b299      	uxth	r1, r3
 80020c4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80020ce:	1c58      	adds	r0, r3, #1
 80020d0:	f8a7 008e 	strh.w	r0, [r7, #142]	; 0x8e
 80020d4:	4618      	mov	r0, r3
 80020d6:	188b      	adds	r3, r1, r2
 80020d8:	b29a      	uxth	r2, r3
 80020da:	4b26      	ldr	r3, [pc, #152]	; (8002174 <send_to_pc+0xb20>)
 80020dc:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
			REG_INPUT_BUF[nodeIdIdx++] = -footer.rssi;
 80020e0:	4b25      	ldr	r3, [pc, #148]	; (8002178 <send_to_pc+0xb24>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	b299      	uxth	r1, r3
 80020e6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	f8a7 208e 	strh.w	r2, [r7, #142]	; 0x8e
 80020f0:	461a      	mov	r2, r3
 80020f2:	460b      	mov	r3, r1
 80020f4:	425b      	negs	r3, r3
 80020f6:	b299      	uxth	r1, r3
 80020f8:	4b1e      	ldr	r3, [pc, #120]	; (8002174 <send_to_pc+0xb20>)
 80020fa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			sprintf(send_pc_buf, "%c%d%d%d%c%d%d%d%d%d%d%c", 											STX,	// stx
																										data_msg.hdr.length-2,  // ?
 80020fe:	4b1b      	ldr	r3, [pc, #108]	; (800216c <send_to_pc+0xb18>)
 8002100:	781b      	ldrb	r3, [r3, #0]
			sprintf(send_pc_buf, "%c%d%d%d%c%d%d%d%d%d%d%c", 											STX,	// stx
 8002102:	f1a3 0c02 	sub.w	ip, r3, #2
 8002106:	4b1d      	ldr	r3, [pc, #116]	; (800217c <send_to_pc+0xb28>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800210c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002110:	f897 208c 	ldrb.w	r2, [r7, #140]	; 0x8c
 8002114:	62ba      	str	r2, [r7, #40]	; 0x28
 8002116:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 800211a:	f897 005e 	ldrb.w	r0, [r7, #94]	; 0x5e
 800211e:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 8002122:	f897 505d 	ldrb.w	r5, [r7, #93]	; 0x5d
 8002126:	f897 605c 	ldrb.w	r6, [r7, #92]	; 0x5c
																										dont_care,
																										dont_care,
																										dont_care,
																										bat_h,  // bat H
																										bat_l,  // bat L
																										footer.rssi,
 800212a:	4a13      	ldr	r2, [pc, #76]	; (8002178 <send_to_pc+0xb24>)
 800212c:	f892 e000 	ldrb.w	lr, [r2]
			sprintf(send_pc_buf, "%c%d%d%d%c%d%d%d%d%d%d%c", 											STX,	// stx
 8002130:	f8c7 e024 	str.w	lr, [r7, #36]	; 0x24
 8002134:	2203      	movs	r2, #3
 8002136:	9209      	str	r2, [sp, #36]	; 0x24
 8002138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800213a:	9208      	str	r2, [sp, #32]
 800213c:	9607      	str	r6, [sp, #28]
 800213e:	9506      	str	r5, [sp, #24]
 8002140:	9405      	str	r4, [sp, #20]
 8002142:	9004      	str	r0, [sp, #16]
 8002144:	9103      	str	r1, [sp, #12]
 8002146:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002148:	9202      	str	r2, [sp, #8]
 800214a:	9301      	str	r3, [sp, #4]
 800214c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	4663      	mov	r3, ip
 8002152:	2202      	movs	r2, #2
 8002154:	490d      	ldr	r1, [pc, #52]	; (800218c <send_to_pc+0xb38>)
 8002156:	480b      	ldr	r0, [pc, #44]	; (8002184 <send_to_pc+0xb30>)
 8002158:	f005 f86c 	bl	8007234 <siprintf>
																										ETX
			);
			HAL_UART_Transmit(&huart1, send_pc_buf,14, 10);
 800215c:	230a      	movs	r3, #10
 800215e:	220e      	movs	r2, #14
 8002160:	4908      	ldr	r1, [pc, #32]	; (8002184 <send_to_pc+0xb30>)
 8002162:	4809      	ldr	r0, [pc, #36]	; (8002188 <send_to_pc+0xb34>)
 8002164:	f003 fecb 	bl	8005efe <HAL_UART_Transmit>
		}
		break;
 8002168:	f000 be3a 	b.w	8002de0 <send_to_pc+0x178c>
 800216c:	200002cc 	.word	0x200002cc
 8002170:	cccccccd 	.word	0xcccccccd
 8002174:	20000300 	.word	0x20000300
 8002178:	200002dc 	.word	0x200002dc
 800217c:	200002e4 	.word	0x200002e4
 8002180:	08007850 	.word	0x08007850
 8002184:	200001b0 	.word	0x200001b0
 8002188:	2000071c 	.word	0x2000071c
 800218c:	08007808 	.word	0x08007808
		case VIB_ID:
		{
			uint8_t vib_type = data_msg.payload[0];
 8002190:	4b14      	ldr	r3, [pc, #80]	; (80021e4 <send_to_pc+0xb90>)
 8002192:	789b      	ldrb	r3, [r3, #2]
 8002194:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			uint8_t y_data_sign;
			uint8_t z_data_100;
			uint8_t z_data_10;
			uint8_t z_data_1;
			uint8_t z_data_sign;
			uint8_t bat_h =data_msg.payload[7];
 8002198:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <send_to_pc+0xb90>)
 800219a:	7a5b      	ldrb	r3, [r3, #9]
 800219c:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
			uint8_t bat_l =data_msg.payload[8];
 80021a0:	4b10      	ldr	r3, [pc, #64]	; (80021e4 <send_to_pc+0xb90>)
 80021a2:	7a9b      	ldrb	r3, [r3, #10]
 80021a4:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
			uint16_t tmpValue[3];

			if( data_msg.payload[1] == 0) // +
 80021a8:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <send_to_pc+0xb90>)
 80021aa:	78db      	ldrb	r3, [r3, #3]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d103      	bne.n	80021b8 <send_to_pc+0xb64>
			{
				x_data_sign = 0x2b;
 80021b0:	232b      	movs	r3, #43	; 0x2b
 80021b2:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 80021b6:	e002      	b.n	80021be <send_to_pc+0xb6a>
			}
			else
			{
				x_data_sign = 0x2d;
 80021b8:	232d      	movs	r3, #45	; 0x2d
 80021ba:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			}
			if( data_msg.payload[3] == 0) // +
 80021be:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <send_to_pc+0xb90>)
 80021c0:	795b      	ldrb	r3, [r3, #5]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d103      	bne.n	80021ce <send_to_pc+0xb7a>
			{
				y_data_sign = 0x2b;
 80021c6:	232b      	movs	r3, #43	; 0x2b
 80021c8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
 80021cc:	e002      	b.n	80021d4 <send_to_pc+0xb80>
			}
			else
			{
				y_data_sign = 0x2d;
 80021ce:	232d      	movs	r3, #45	; 0x2d
 80021d0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
			}

			if( data_msg.payload[5] == 0) // +
 80021d4:	4b03      	ldr	r3, [pc, #12]	; (80021e4 <send_to_pc+0xb90>)
 80021d6:	79db      	ldrb	r3, [r3, #7]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d105      	bne.n	80021e8 <send_to_pc+0xb94>
			{
				z_data_sign = 0x2b;
 80021dc:	232b      	movs	r3, #43	; 0x2b
 80021de:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
 80021e2:	e004      	b.n	80021ee <send_to_pc+0xb9a>
 80021e4:	200002cc 	.word	0x200002cc
			}
			else
			{
				z_data_sign = 0x2d;
 80021e8:	232d      	movs	r3, #45	; 0x2d
 80021ea:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
			}
			x_data_100 = data_msg.payload[2]%1000/100;
 80021ee:	4bc8      	ldr	r3, [pc, #800]	; (8002510 <send_to_pc+0xebc>)
 80021f0:	791b      	ldrb	r3, [r3, #4]
 80021f2:	461a      	mov	r2, r3
 80021f4:	4bc7      	ldr	r3, [pc, #796]	; (8002514 <send_to_pc+0xec0>)
 80021f6:	fb83 1302 	smull	r1, r3, r3, r2
 80021fa:	1199      	asrs	r1, r3, #6
 80021fc:	17d3      	asrs	r3, r2, #31
 80021fe:	1acb      	subs	r3, r1, r3
 8002200:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002204:	fb01 f303 	mul.w	r3, r1, r3
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	4ac3      	ldr	r2, [pc, #780]	; (8002518 <send_to_pc+0xec4>)
 800220c:	fb82 1203 	smull	r1, r2, r2, r3
 8002210:	1152      	asrs	r2, r2, #5
 8002212:	17db      	asrs	r3, r3, #31
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
			x_data_10  = data_msg.payload[2]%1000%100/10;
 800221a:	4bbd      	ldr	r3, [pc, #756]	; (8002510 <send_to_pc+0xebc>)
 800221c:	791b      	ldrb	r3, [r3, #4]
 800221e:	461a      	mov	r2, r3
 8002220:	4bbc      	ldr	r3, [pc, #752]	; (8002514 <send_to_pc+0xec0>)
 8002222:	fb83 1302 	smull	r1, r3, r3, r2
 8002226:	1199      	asrs	r1, r3, #6
 8002228:	17d3      	asrs	r3, r2, #31
 800222a:	1acb      	subs	r3, r1, r3
 800222c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002230:	fb01 f303 	mul.w	r3, r1, r3
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	4ab8      	ldr	r2, [pc, #736]	; (8002518 <send_to_pc+0xec4>)
 8002238:	fb82 1203 	smull	r1, r2, r2, r3
 800223c:	1151      	asrs	r1, r2, #5
 800223e:	17da      	asrs	r2, r3, #31
 8002240:	1a8a      	subs	r2, r1, r2
 8002242:	2164      	movs	r1, #100	; 0x64
 8002244:	fb01 f202 	mul.w	r2, r1, r2
 8002248:	1a9a      	subs	r2, r3, r2
 800224a:	4bb4      	ldr	r3, [pc, #720]	; (800251c <send_to_pc+0xec8>)
 800224c:	fb83 1302 	smull	r1, r3, r3, r2
 8002250:	1099      	asrs	r1, r3, #2
 8002252:	17d3      	asrs	r3, r2, #31
 8002254:	1acb      	subs	r3, r1, r3
 8002256:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			x_data_1   = data_msg.payload[2]%1000%100%10/1;
 800225a:	4bad      	ldr	r3, [pc, #692]	; (8002510 <send_to_pc+0xebc>)
 800225c:	791b      	ldrb	r3, [r3, #4]
 800225e:	461a      	mov	r2, r3
 8002260:	4bac      	ldr	r3, [pc, #688]	; (8002514 <send_to_pc+0xec0>)
 8002262:	fb83 1302 	smull	r1, r3, r3, r2
 8002266:	1199      	asrs	r1, r3, #6
 8002268:	17d3      	asrs	r3, r2, #31
 800226a:	1acb      	subs	r3, r1, r3
 800226c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002270:	fb01 f303 	mul.w	r3, r1, r3
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	4aa8      	ldr	r2, [pc, #672]	; (8002518 <send_to_pc+0xec4>)
 8002278:	fb82 1203 	smull	r1, r2, r2, r3
 800227c:	1151      	asrs	r1, r2, #5
 800227e:	17da      	asrs	r2, r3, #31
 8002280:	1a8a      	subs	r2, r1, r2
 8002282:	2164      	movs	r1, #100	; 0x64
 8002284:	fb01 f202 	mul.w	r2, r1, r2
 8002288:	1a9a      	subs	r2, r3, r2
 800228a:	4ba4      	ldr	r3, [pc, #656]	; (800251c <send_to_pc+0xec8>)
 800228c:	fb83 1302 	smull	r1, r3, r3, r2
 8002290:	1099      	asrs	r1, r3, #2
 8002292:	17d3      	asrs	r3, r2, #31
 8002294:	1ac9      	subs	r1, r1, r3
 8002296:	460b      	mov	r3, r1
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	440b      	add	r3, r1
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	1ad1      	subs	r1, r2, r3
 80022a0:	460b      	mov	r3, r1
 80022a2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
			y_data_100 = data_msg.payload[4]%1000/100;
 80022a6:	4b9a      	ldr	r3, [pc, #616]	; (8002510 <send_to_pc+0xebc>)
 80022a8:	799b      	ldrb	r3, [r3, #6]
 80022aa:	461a      	mov	r2, r3
 80022ac:	4b99      	ldr	r3, [pc, #612]	; (8002514 <send_to_pc+0xec0>)
 80022ae:	fb83 1302 	smull	r1, r3, r3, r2
 80022b2:	1199      	asrs	r1, r3, #6
 80022b4:	17d3      	asrs	r3, r2, #31
 80022b6:	1acb      	subs	r3, r1, r3
 80022b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80022bc:	fb01 f303 	mul.w	r3, r1, r3
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	4a95      	ldr	r2, [pc, #596]	; (8002518 <send_to_pc+0xec4>)
 80022c4:	fb82 1203 	smull	r1, r2, r2, r3
 80022c8:	1152      	asrs	r2, r2, #5
 80022ca:	17db      	asrs	r3, r3, #31
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			y_data_10  = data_msg.payload[4]%1000%100/10;
 80022d2:	4b8f      	ldr	r3, [pc, #572]	; (8002510 <send_to_pc+0xebc>)
 80022d4:	799b      	ldrb	r3, [r3, #6]
 80022d6:	461a      	mov	r2, r3
 80022d8:	4b8e      	ldr	r3, [pc, #568]	; (8002514 <send_to_pc+0xec0>)
 80022da:	fb83 1302 	smull	r1, r3, r3, r2
 80022de:	1199      	asrs	r1, r3, #6
 80022e0:	17d3      	asrs	r3, r2, #31
 80022e2:	1acb      	subs	r3, r1, r3
 80022e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80022e8:	fb01 f303 	mul.w	r3, r1, r3
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	4a8a      	ldr	r2, [pc, #552]	; (8002518 <send_to_pc+0xec4>)
 80022f0:	fb82 1203 	smull	r1, r2, r2, r3
 80022f4:	1151      	asrs	r1, r2, #5
 80022f6:	17da      	asrs	r2, r3, #31
 80022f8:	1a8a      	subs	r2, r1, r2
 80022fa:	2164      	movs	r1, #100	; 0x64
 80022fc:	fb01 f202 	mul.w	r2, r1, r2
 8002300:	1a9a      	subs	r2, r3, r2
 8002302:	4b86      	ldr	r3, [pc, #536]	; (800251c <send_to_pc+0xec8>)
 8002304:	fb83 1302 	smull	r1, r3, r3, r2
 8002308:	1099      	asrs	r1, r3, #2
 800230a:	17d3      	asrs	r3, r2, #31
 800230c:	1acb      	subs	r3, r1, r3
 800230e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
			y_data_1   = data_msg.payload[4]%1000%100%10/1;
 8002312:	4b7f      	ldr	r3, [pc, #508]	; (8002510 <send_to_pc+0xebc>)
 8002314:	799b      	ldrb	r3, [r3, #6]
 8002316:	461a      	mov	r2, r3
 8002318:	4b7e      	ldr	r3, [pc, #504]	; (8002514 <send_to_pc+0xec0>)
 800231a:	fb83 1302 	smull	r1, r3, r3, r2
 800231e:	1199      	asrs	r1, r3, #6
 8002320:	17d3      	asrs	r3, r2, #31
 8002322:	1acb      	subs	r3, r1, r3
 8002324:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002328:	fb01 f303 	mul.w	r3, r1, r3
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	4a7a      	ldr	r2, [pc, #488]	; (8002518 <send_to_pc+0xec4>)
 8002330:	fb82 1203 	smull	r1, r2, r2, r3
 8002334:	1151      	asrs	r1, r2, #5
 8002336:	17da      	asrs	r2, r3, #31
 8002338:	1a8a      	subs	r2, r1, r2
 800233a:	2164      	movs	r1, #100	; 0x64
 800233c:	fb01 f202 	mul.w	r2, r1, r2
 8002340:	1a9a      	subs	r2, r3, r2
 8002342:	4b76      	ldr	r3, [pc, #472]	; (800251c <send_to_pc+0xec8>)
 8002344:	fb83 1302 	smull	r1, r3, r3, r2
 8002348:	1099      	asrs	r1, r3, #2
 800234a:	17d3      	asrs	r3, r2, #31
 800234c:	1ac9      	subs	r1, r1, r3
 800234e:	460b      	mov	r3, r1
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	440b      	add	r3, r1
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	1ad1      	subs	r1, r2, r3
 8002358:	460b      	mov	r3, r1
 800235a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			z_data_100 = data_msg.payload[6]%1000/100;
 800235e:	4b6c      	ldr	r3, [pc, #432]	; (8002510 <send_to_pc+0xebc>)
 8002360:	7a1b      	ldrb	r3, [r3, #8]
 8002362:	461a      	mov	r2, r3
 8002364:	4b6b      	ldr	r3, [pc, #428]	; (8002514 <send_to_pc+0xec0>)
 8002366:	fb83 1302 	smull	r1, r3, r3, r2
 800236a:	1199      	asrs	r1, r3, #6
 800236c:	17d3      	asrs	r3, r2, #31
 800236e:	1acb      	subs	r3, r1, r3
 8002370:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002374:	fb01 f303 	mul.w	r3, r1, r3
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	4a67      	ldr	r2, [pc, #412]	; (8002518 <send_to_pc+0xec4>)
 800237c:	fb82 1203 	smull	r1, r2, r2, r3
 8002380:	1152      	asrs	r2, r2, #5
 8002382:	17db      	asrs	r3, r3, #31
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
			z_data_10  = data_msg.payload[6]%1000%100/10;
 800238a:	4b61      	ldr	r3, [pc, #388]	; (8002510 <send_to_pc+0xebc>)
 800238c:	7a1b      	ldrb	r3, [r3, #8]
 800238e:	461a      	mov	r2, r3
 8002390:	4b60      	ldr	r3, [pc, #384]	; (8002514 <send_to_pc+0xec0>)
 8002392:	fb83 1302 	smull	r1, r3, r3, r2
 8002396:	1199      	asrs	r1, r3, #6
 8002398:	17d3      	asrs	r3, r2, #31
 800239a:	1acb      	subs	r3, r1, r3
 800239c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80023a0:	fb01 f303 	mul.w	r3, r1, r3
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	4a5c      	ldr	r2, [pc, #368]	; (8002518 <send_to_pc+0xec4>)
 80023a8:	fb82 1203 	smull	r1, r2, r2, r3
 80023ac:	1151      	asrs	r1, r2, #5
 80023ae:	17da      	asrs	r2, r3, #31
 80023b0:	1a8a      	subs	r2, r1, r2
 80023b2:	2164      	movs	r1, #100	; 0x64
 80023b4:	fb01 f202 	mul.w	r2, r1, r2
 80023b8:	1a9a      	subs	r2, r3, r2
 80023ba:	4b58      	ldr	r3, [pc, #352]	; (800251c <send_to_pc+0xec8>)
 80023bc:	fb83 1302 	smull	r1, r3, r3, r2
 80023c0:	1099      	asrs	r1, r3, #2
 80023c2:	17d3      	asrs	r3, r2, #31
 80023c4:	1acb      	subs	r3, r1, r3
 80023c6:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
			z_data_1   = data_msg.payload[6]%1000%100%10/1;
 80023ca:	4b51      	ldr	r3, [pc, #324]	; (8002510 <send_to_pc+0xebc>)
 80023cc:	7a1b      	ldrb	r3, [r3, #8]
 80023ce:	461a      	mov	r2, r3
 80023d0:	4b50      	ldr	r3, [pc, #320]	; (8002514 <send_to_pc+0xec0>)
 80023d2:	fb83 1302 	smull	r1, r3, r3, r2
 80023d6:	1199      	asrs	r1, r3, #6
 80023d8:	17d3      	asrs	r3, r2, #31
 80023da:	1acb      	subs	r3, r1, r3
 80023dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80023e0:	fb01 f303 	mul.w	r3, r1, r3
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	4a4c      	ldr	r2, [pc, #304]	; (8002518 <send_to_pc+0xec4>)
 80023e8:	fb82 1203 	smull	r1, r2, r2, r3
 80023ec:	1151      	asrs	r1, r2, #5
 80023ee:	17da      	asrs	r2, r3, #31
 80023f0:	1a8a      	subs	r2, r1, r2
 80023f2:	2164      	movs	r1, #100	; 0x64
 80023f4:	fb01 f202 	mul.w	r2, r1, r2
 80023f8:	1a9a      	subs	r2, r3, r2
 80023fa:	4b48      	ldr	r3, [pc, #288]	; (800251c <send_to_pc+0xec8>)
 80023fc:	fb83 1302 	smull	r1, r3, r3, r2
 8002400:	1099      	asrs	r1, r3, #2
 8002402:	17d3      	asrs	r3, r2, #31
 8002404:	1ac9      	subs	r1, r1, r3
 8002406:	460b      	mov	r3, r1
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	440b      	add	r3, r1
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	1ad1      	subs	r1, r2, r3
 8002410:	460b      	mov	r3, r1
 8002412:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60

			tmpValue[0] = (x_data_100 *100)  + (x_data_10 *10) + (x_data_1 );
 8002416:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800241a:	b29b      	uxth	r3, r3
 800241c:	461a      	mov	r2, r3
 800241e:	0092      	lsls	r2, r2, #2
 8002420:	4413      	add	r3, r2
 8002422:	461a      	mov	r2, r3
 8002424:	0091      	lsls	r1, r2, #2
 8002426:	461a      	mov	r2, r3
 8002428:	460b      	mov	r3, r1
 800242a:	4413      	add	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	b29a      	uxth	r2, r3
 8002430:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002434:	b29b      	uxth	r3, r3
 8002436:	4619      	mov	r1, r3
 8002438:	0089      	lsls	r1, r1, #2
 800243a:	440b      	add	r3, r1
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	b29b      	uxth	r3, r3
 8002440:	4413      	add	r3, r2
 8002442:	b29a      	uxth	r2, r3
 8002444:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8002448:	b29b      	uxth	r3, r3
 800244a:	4413      	add	r3, r2
 800244c:	b29b      	uxth	r3, r3
 800244e:	863b      	strh	r3, [r7, #48]	; 0x30
			tmpValue[1] = (y_data_100 *100)  + (y_data_10 *10) + (y_data_1 );
 8002450:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8002454:	b29b      	uxth	r3, r3
 8002456:	461a      	mov	r2, r3
 8002458:	0092      	lsls	r2, r2, #2
 800245a:	4413      	add	r3, r2
 800245c:	461a      	mov	r2, r3
 800245e:	0091      	lsls	r1, r2, #2
 8002460:	461a      	mov	r2, r3
 8002462:	460b      	mov	r3, r1
 8002464:	4413      	add	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	b29a      	uxth	r2, r3
 800246a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800246e:	b29b      	uxth	r3, r3
 8002470:	4619      	mov	r1, r3
 8002472:	0089      	lsls	r1, r1, #2
 8002474:	440b      	add	r3, r1
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	b29b      	uxth	r3, r3
 800247a:	4413      	add	r3, r2
 800247c:	b29a      	uxth	r2, r3
 800247e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8002482:	b29b      	uxth	r3, r3
 8002484:	4413      	add	r3, r2
 8002486:	b29b      	uxth	r3, r3
 8002488:	867b      	strh	r3, [r7, #50]	; 0x32
			tmpValue[2] = (z_data_100 *100)  + (z_data_10 *10) + (z_data_1 );
 800248a:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800248e:	b29b      	uxth	r3, r3
 8002490:	461a      	mov	r2, r3
 8002492:	0092      	lsls	r2, r2, #2
 8002494:	4413      	add	r3, r2
 8002496:	461a      	mov	r2, r3
 8002498:	0091      	lsls	r1, r2, #2
 800249a:	461a      	mov	r2, r3
 800249c:	460b      	mov	r3, r1
 800249e:	4413      	add	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	4619      	mov	r1, r3
 80024ac:	0089      	lsls	r1, r1, #2
 80024ae:	440b      	add	r3, r1
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	4413      	add	r3, r2
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80024bc:	b29b      	uxth	r3, r3
 80024be:	4413      	add	r3, r2
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	86bb      	strh	r3, [r7, #52]	; 0x34


			REG_INPUT_BUF[nodeIdIdx++] = vib_type; // TPYE
 80024c4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80024c8:	1c5a      	adds	r2, r3, #1
 80024ca:	f8a7 208e 	strh.w	r2, [r7, #142]	; 0x8e
 80024ce:	461a      	mov	r2, r3
 80024d0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80024d4:	b299      	uxth	r1, r3
 80024d6:	4b12      	ldr	r3, [pc, #72]	; (8002520 <send_to_pc+0xecc>)
 80024d8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			REG_INPUT_BUF[nodeIdIdx++] = 3+2; // DATA LEN  3PHASE   R S T
 80024dc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80024e0:	1c5a      	adds	r2, r3, #1
 80024e2:	f8a7 208e 	strh.w	r2, [r7, #142]	; 0x8e
 80024e6:	461a      	mov	r2, r3
 80024e8:	4b0d      	ldr	r3, [pc, #52]	; (8002520 <send_to_pc+0xecc>)
 80024ea:	2105      	movs	r1, #5
 80024ec:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]


			if ( x_data_sign == '+')
 80024f0:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80024f4:	2b2b      	cmp	r3, #43	; 0x2b
 80024f6:	d115      	bne.n	8002524 <send_to_pc+0xed0>
			{
				REG_INPUT_BUF[nodeIdIdx++]=tmpValue[0];
 80024f8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80024fc:	1c5a      	adds	r2, r3, #1
 80024fe:	f8a7 208e 	strh.w	r2, [r7, #142]	; 0x8e
 8002502:	461a      	mov	r2, r3
 8002504:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8002506:	4b06      	ldr	r3, [pc, #24]	; (8002520 <send_to_pc+0xecc>)
 8002508:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800250c:	e017      	b.n	800253e <send_to_pc+0xeea>
 800250e:	bf00      	nop
 8002510:	200002cc 	.word	0x200002cc
 8002514:	10624dd3 	.word	0x10624dd3
 8002518:	51eb851f 	.word	0x51eb851f
 800251c:	66666667 	.word	0x66666667
 8002520:	20000300 	.word	0x20000300
			}
			else
			{
				REG_INPUT_BUF[nodeIdIdx++]=-tmpValue[0];
 8002524:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8002526:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800252a:	1c5a      	adds	r2, r3, #1
 800252c:	f8a7 208e 	strh.w	r2, [r7, #142]	; 0x8e
 8002530:	461a      	mov	r2, r3
 8002532:	460b      	mov	r3, r1
 8002534:	425b      	negs	r3, r3
 8002536:	b299      	uxth	r1, r3
 8002538:	4b61      	ldr	r3, [pc, #388]	; (80026c0 <send_to_pc+0x106c>)
 800253a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			}
			if ( y_data_sign == '+')
 800253e:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 8002542:	2b2b      	cmp	r3, #43	; 0x2b
 8002544:	d10a      	bne.n	800255c <send_to_pc+0xf08>
			{
				REG_INPUT_BUF[nodeIdIdx++]=tmpValue[1];
 8002546:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800254a:	1c5a      	adds	r2, r3, #1
 800254c:	f8a7 208e 	strh.w	r2, [r7, #142]	; 0x8e
 8002550:	461a      	mov	r2, r3
 8002552:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8002554:	4b5a      	ldr	r3, [pc, #360]	; (80026c0 <send_to_pc+0x106c>)
 8002556:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800255a:	e00c      	b.n	8002576 <send_to_pc+0xf22>
			}
			else
			{
				REG_INPUT_BUF[nodeIdIdx++]=-tmpValue[1];
 800255c:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 800255e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002562:	1c5a      	adds	r2, r3, #1
 8002564:	f8a7 208e 	strh.w	r2, [r7, #142]	; 0x8e
 8002568:	461a      	mov	r2, r3
 800256a:	460b      	mov	r3, r1
 800256c:	425b      	negs	r3, r3
 800256e:	b299      	uxth	r1, r3
 8002570:	4b53      	ldr	r3, [pc, #332]	; (80026c0 <send_to_pc+0x106c>)
 8002572:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			}
			if ( z_data_sign == '+')
 8002576:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800257a:	2b2b      	cmp	r3, #43	; 0x2b
 800257c:	d10a      	bne.n	8002594 <send_to_pc+0xf40>
			{
				REG_INPUT_BUF[nodeIdIdx++]=tmpValue[2];
 800257e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	f8a7 208e 	strh.w	r2, [r7, #142]	; 0x8e
 8002588:	461a      	mov	r2, r3
 800258a:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 800258c:	4b4c      	ldr	r3, [pc, #304]	; (80026c0 <send_to_pc+0x106c>)
 800258e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8002592:	e00c      	b.n	80025ae <send_to_pc+0xf5a>
			}
			else
			{
				REG_INPUT_BUF[nodeIdIdx++]= -tmpValue[2];
 8002594:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8002596:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800259a:	1c5a      	adds	r2, r3, #1
 800259c:	f8a7 208e 	strh.w	r2, [r7, #142]	; 0x8e
 80025a0:	461a      	mov	r2, r3
 80025a2:	460b      	mov	r3, r1
 80025a4:	425b      	negs	r3, r3
 80025a6:	b299      	uxth	r1, r3
 80025a8:	4b45      	ldr	r3, [pc, #276]	; (80026c0 <send_to_pc+0x106c>)
 80025aa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			}
			REG_INPUT_BUF[nodeIdIdx++] = bat_h*10 + bat_l ;
 80025ae:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	461a      	mov	r2, r3
 80025b6:	0092      	lsls	r2, r2, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	b299      	uxth	r1, r3
 80025be:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80025c8:	1c58      	adds	r0, r3, #1
 80025ca:	f8a7 008e 	strh.w	r0, [r7, #142]	; 0x8e
 80025ce:	4618      	mov	r0, r3
 80025d0:	188b      	adds	r3, r1, r2
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	4b3a      	ldr	r3, [pc, #232]	; (80026c0 <send_to_pc+0x106c>)
 80025d6:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
			REG_INPUT_BUF[nodeIdIdx++] = -footer.rssi;
 80025da:	4b3a      	ldr	r3, [pc, #232]	; (80026c4 <send_to_pc+0x1070>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	b299      	uxth	r1, r3
 80025e0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80025e4:	1c5a      	adds	r2, r3, #1
 80025e6:	f8a7 208e 	strh.w	r2, [r7, #142]	; 0x8e
 80025ea:	461a      	mov	r2, r3
 80025ec:	460b      	mov	r3, r1
 80025ee:	425b      	negs	r3, r3
 80025f0:	b299      	uxth	r1, r3
 80025f2:	4b33      	ldr	r3, [pc, #204]	; (80026c0 <send_to_pc+0x106c>)
 80025f4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			sprintf(send_pc_buf, "%c%d%d%d%c%d%d%d%c%d%d%d%c%d%d%d%d%d%d%c", 							STX,	// stx
																										data_msg.hdr.length+6,  // ?
 80025f8:	4b33      	ldr	r3, [pc, #204]	; (80026c8 <send_to_pc+0x1074>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
			sprintf(send_pc_buf, "%c%d%d%d%c%d%d%d%c%d%d%d%c%d%d%d%d%d%d%c", 							STX,	// stx
 80025fc:	f103 0c06 	add.w	ip, r3, #6
 8002600:	4b32      	ldr	r3, [pc, #200]	; (80026cc <send_to_pc+0x1078>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002606:	f897 506b 	ldrb.w	r5, [r7, #107]	; 0x6b
 800260a:	f897 608b 	ldrb.w	r6, [r7, #139]	; 0x8b
 800260e:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8002612:	62ba      	str	r2, [r7, #40]	; 0x28
 8002614:	f897 1067 	ldrb.w	r1, [r7, #103]	; 0x67
 8002618:	6279      	str	r1, [r7, #36]	; 0x24
 800261a:	f897 0066 	ldrb.w	r0, [r7, #102]	; 0x66
 800261e:	6238      	str	r0, [r7, #32]
 8002620:	f897 408a 	ldrb.w	r4, [r7, #138]	; 0x8a
 8002624:	61fc      	str	r4, [r7, #28]
 8002626:	f897 e065 	ldrb.w	lr, [r7, #101]	; 0x65
 800262a:	4673      	mov	r3, lr
 800262c:	61bb      	str	r3, [r7, #24]
 800262e:	f897 e064 	ldrb.w	lr, [r7, #100]	; 0x64
 8002632:	4672      	mov	r2, lr
 8002634:	617a      	str	r2, [r7, #20]
 8002636:	f897 e063 	ldrb.w	lr, [r7, #99]	; 0x63
 800263a:	4671      	mov	r1, lr
 800263c:	6139      	str	r1, [r7, #16]
 800263e:	f897 e089 	ldrb.w	lr, [r7, #137]	; 0x89
 8002642:	4670      	mov	r0, lr
 8002644:	60f8      	str	r0, [r7, #12]
 8002646:	f897 e062 	ldrb.w	lr, [r7, #98]	; 0x62
 800264a:	4674      	mov	r4, lr
 800264c:	60bc      	str	r4, [r7, #8]
 800264e:	f897 e061 	ldrb.w	lr, [r7, #97]	; 0x61
 8002652:	4673      	mov	r3, lr
 8002654:	607b      	str	r3, [r7, #4]
 8002656:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
 800265a:	f897 006a 	ldrb.w	r0, [r7, #106]	; 0x6a
 800265e:	f897 1069 	ldrb.w	r1, [r7, #105]	; 0x69
																										z_data_100,  
																										z_data_10,   
																										z_data_1,   
																										bat_h,  // bat H
																										bat_l,  // bat L
																										footer.rssi,
 8002662:	4b18      	ldr	r3, [pc, #96]	; (80026c4 <send_to_pc+0x1070>)
 8002664:	781b      	ldrb	r3, [r3, #0]
			sprintf(send_pc_buf, "%c%d%d%d%c%d%d%d%c%d%d%d%c%d%d%d%d%d%d%c", 							STX,	// stx
 8002666:	461a      	mov	r2, r3
 8002668:	2303      	movs	r3, #3
 800266a:	9311      	str	r3, [sp, #68]	; 0x44
 800266c:	9210      	str	r2, [sp, #64]	; 0x40
 800266e:	910f      	str	r1, [sp, #60]	; 0x3c
 8002670:	900e      	str	r0, [sp, #56]	; 0x38
 8002672:	940d      	str	r4, [sp, #52]	; 0x34
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	930c      	str	r3, [sp, #48]	; 0x30
 8002678:	68bc      	ldr	r4, [r7, #8]
 800267a:	940b      	str	r4, [sp, #44]	; 0x2c
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	900a      	str	r0, [sp, #40]	; 0x28
 8002680:	6939      	ldr	r1, [r7, #16]
 8002682:	9109      	str	r1, [sp, #36]	; 0x24
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	9208      	str	r2, [sp, #32]
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	9307      	str	r3, [sp, #28]
 800268c:	69fc      	ldr	r4, [r7, #28]
 800268e:	9406      	str	r4, [sp, #24]
 8002690:	6a38      	ldr	r0, [r7, #32]
 8002692:	9005      	str	r0, [sp, #20]
 8002694:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002696:	9104      	str	r1, [sp, #16]
 8002698:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800269a:	9203      	str	r2, [sp, #12]
 800269c:	9602      	str	r6, [sp, #8]
 800269e:	9501      	str	r5, [sp, #4]
 80026a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	4663      	mov	r3, ip
 80026a6:	2202      	movs	r2, #2
 80026a8:	4909      	ldr	r1, [pc, #36]	; (80026d0 <send_to_pc+0x107c>)
 80026aa:	480a      	ldr	r0, [pc, #40]	; (80026d4 <send_to_pc+0x1080>)
 80026ac:	f004 fdc2 	bl	8007234 <siprintf>
																										ETX
					);
			HAL_UART_Transmit(&huart1, send_pc_buf,22, 10);
 80026b0:	230a      	movs	r3, #10
 80026b2:	2216      	movs	r2, #22
 80026b4:	4907      	ldr	r1, [pc, #28]	; (80026d4 <send_to_pc+0x1080>)
 80026b6:	4808      	ldr	r0, [pc, #32]	; (80026d8 <send_to_pc+0x1084>)
 80026b8:	f003 fc21 	bl	8005efe <HAL_UART_Transmit>
		}
		break;
 80026bc:	e390      	b.n	8002de0 <send_to_pc+0x178c>
 80026be:	bf00      	nop
 80026c0:	20000300 	.word	0x20000300
 80026c4:	200002dc 	.word	0x200002dc
 80026c8:	200002cc 	.word	0x200002cc
 80026cc:	200002e4 	.word	0x200002e4
 80026d0:	0800786c 	.word	0x0800786c
 80026d4:	200001b0 	.word	0x200001b0
 80026d8:	2000071c 	.word	0x2000071c
		case UL_SONIC_ID:
		{
			uint8_t ul_sonic = data_msg.payload[0];
 80026dc:	4b69      	ldr	r3, [pc, #420]	; (8002884 <send_to_pc+0x1230>)
 80026de:	789b      	ldrb	r3, [r3, #2]
 80026e0:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
			
			uint8_t ul_sonic_100 = data_msg.payload[1]/10;
 80026e4:	4b67      	ldr	r3, [pc, #412]	; (8002884 <send_to_pc+0x1230>)
 80026e6:	78db      	ldrb	r3, [r3, #3]
 80026e8:	4a67      	ldr	r2, [pc, #412]	; (8002888 <send_to_pc+0x1234>)
 80026ea:	fba2 2303 	umull	r2, r3, r2, r3
 80026ee:	08db      	lsrs	r3, r3, #3
 80026f0:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
			uint8_t ul_sonic_10 = data_msg.payload[2]%10;
 80026f4:	4b63      	ldr	r3, [pc, #396]	; (8002884 <send_to_pc+0x1230>)
 80026f6:	791a      	ldrb	r2, [r3, #4]
 80026f8:	4b63      	ldr	r3, [pc, #396]	; (8002888 <send_to_pc+0x1234>)
 80026fa:	fba3 1302 	umull	r1, r3, r3, r2
 80026fe:	08d9      	lsrs	r1, r3, #3
 8002700:	460b      	mov	r3, r1
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
			uint8_t ul_sonic_1 = data_msg.payload[3]/10;
 800270e:	4b5d      	ldr	r3, [pc, #372]	; (8002884 <send_to_pc+0x1230>)
 8002710:	795b      	ldrb	r3, [r3, #5]
 8002712:	4a5d      	ldr	r2, [pc, #372]	; (8002888 <send_to_pc+0x1234>)
 8002714:	fba2 2303 	umull	r2, r3, r2, r3
 8002718:	08db      	lsrs	r3, r3, #3
 800271a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			uint8_t ul_sonic_0 = data_msg.payload[4]%10;
 800271e:	4b59      	ldr	r3, [pc, #356]	; (8002884 <send_to_pc+0x1230>)
 8002720:	799a      	ldrb	r2, [r3, #6]
 8002722:	4b59      	ldr	r3, [pc, #356]	; (8002888 <send_to_pc+0x1234>)
 8002724:	fba3 1302 	umull	r1, r3, r3, r2
 8002728:	08d9      	lsrs	r1, r3, #3
 800272a:	460b      	mov	r3, r1
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	440b      	add	r3, r1
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
			uint8_t bat_h =data_msg.payload[7];
 8002738:	4b52      	ldr	r3, [pc, #328]	; (8002884 <send_to_pc+0x1230>)
 800273a:	7a5b      	ldrb	r3, [r3, #9]
 800273c:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
			uint8_t bat_l =data_msg.payload[8];
 8002740:	4b50      	ldr	r3, [pc, #320]	; (8002884 <send_to_pc+0x1230>)
 8002742:	7a9b      	ldrb	r3, [r3, #10]
 8002744:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c

			REG_INPUT_BUF[nodeIdIdx++] = ul_sonic; // TPYE
 8002748:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800274c:	1c5a      	adds	r2, r3, #1
 800274e:	f8a7 208e 	strh.w	r2, [r7, #142]	; 0x8e
 8002752:	461a      	mov	r2, r3
 8002754:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8002758:	b299      	uxth	r1, r3
 800275a:	4b4c      	ldr	r3, [pc, #304]	; (800288c <send_to_pc+0x1238>)
 800275c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			REG_INPUT_BUF[nodeIdIdx++] = 1+2; // DATA LEN  ul_sonic + bat + rssi
 8002760:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002764:	1c5a      	adds	r2, r3, #1
 8002766:	f8a7 208e 	strh.w	r2, [r7, #142]	; 0x8e
 800276a:	461a      	mov	r2, r3
 800276c:	4b47      	ldr	r3, [pc, #284]	; (800288c <send_to_pc+0x1238>)
 800276e:	2103      	movs	r1, #3
 8002770:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			REG_INPUT_BUF[nodeIdIdx] = ( ul_sonic_100 *1000 ) + (ul_sonic_10 *100 ) + (ul_sonic_1 *10) + ul_sonic_0 ;
 8002774:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8002778:	b29b      	uxth	r3, r3
 800277a:	461a      	mov	r2, r3
 800277c:	0152      	lsls	r2, r2, #5
 800277e:	1ad2      	subs	r2, r2, r3
 8002780:	0092      	lsls	r2, r2, #2
 8002782:	4413      	add	r3, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	b29a      	uxth	r2, r3
 8002788:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800278c:	b29b      	uxth	r3, r3
 800278e:	4619      	mov	r1, r3
 8002790:	0089      	lsls	r1, r1, #2
 8002792:	440b      	add	r3, r1
 8002794:	4619      	mov	r1, r3
 8002796:	0088      	lsls	r0, r1, #2
 8002798:	4619      	mov	r1, r3
 800279a:	4603      	mov	r3, r0
 800279c:	440b      	add	r3, r1
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	4413      	add	r3, r2
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	4619      	mov	r1, r3
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	440b      	add	r3, r1
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	4413      	add	r3, r2
 80027b8:	b299      	uxth	r1, r3
 80027ba:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80027be:	b29a      	uxth	r2, r3
 80027c0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80027c4:	440a      	add	r2, r1
 80027c6:	b291      	uxth	r1, r2
 80027c8:	4a30      	ldr	r2, [pc, #192]	; (800288c <send_to_pc+0x1238>)
 80027ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			REG_INPUT_BUF[nodeIdIdx++] = bat_h*10 + bat_l ;
 80027ce:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	461a      	mov	r2, r3
 80027d6:	0092      	lsls	r2, r2, #2
 80027d8:	4413      	add	r3, r2
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	b299      	uxth	r1, r3
 80027de:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80027e8:	1c58      	adds	r0, r3, #1
 80027ea:	f8a7 008e 	strh.w	r0, [r7, #142]	; 0x8e
 80027ee:	4618      	mov	r0, r3
 80027f0:	188b      	adds	r3, r1, r2
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	4b25      	ldr	r3, [pc, #148]	; (800288c <send_to_pc+0x1238>)
 80027f6:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
			REG_INPUT_BUF[nodeIdIdx++] = -footer.rssi;
 80027fa:	4b25      	ldr	r3, [pc, #148]	; (8002890 <send_to_pc+0x123c>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	b299      	uxth	r1, r3
 8002800:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002804:	1c5a      	adds	r2, r3, #1
 8002806:	f8a7 208e 	strh.w	r2, [r7, #142]	; 0x8e
 800280a:	461a      	mov	r2, r3
 800280c:	460b      	mov	r3, r1
 800280e:	425b      	negs	r3, r3
 8002810:	b299      	uxth	r1, r3
 8002812:	4b1e      	ldr	r3, [pc, #120]	; (800288c <send_to_pc+0x1238>)
 8002814:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			sprintf(send_pc_buf, "%c%d%d%d%d%d%d%d%d%d%d%c", 											STX,	// stx
																										data_msg.hdr.length-2,  // ?
 8002818:	4b1a      	ldr	r3, [pc, #104]	; (8002884 <send_to_pc+0x1230>)
 800281a:	781b      	ldrb	r3, [r3, #0]
			sprintf(send_pc_buf, "%c%d%d%d%d%d%d%d%d%d%d%c", 											STX,	// stx
 800281c:	f1a3 0c02 	sub.w	ip, r3, #2
 8002820:	4b1c      	ldr	r3, [pc, #112]	; (8002894 <send_to_pc+0x1240>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002826:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800282a:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 800282e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002830:	f897 1070 	ldrb.w	r1, [r7, #112]	; 0x70
 8002834:	f897 006f 	ldrb.w	r0, [r7, #111]	; 0x6f
 8002838:	f897 406e 	ldrb.w	r4, [r7, #110]	; 0x6e
 800283c:	f897 506d 	ldrb.w	r5, [r7, #109]	; 0x6d
 8002840:	f897 606c 	ldrb.w	r6, [r7, #108]	; 0x6c
																										ul_sonic_10,
																										ul_sonic_1,
																										ul_sonic_0,
																										bat_h,  // bat H
																										bat_l,  // bat L
																										footer.rssi,
 8002844:	4a12      	ldr	r2, [pc, #72]	; (8002890 <send_to_pc+0x123c>)
 8002846:	f892 e000 	ldrb.w	lr, [r2]
			sprintf(send_pc_buf, "%c%d%d%d%d%d%d%d%d%d%d%c", 											STX,	// stx
 800284a:	f8c7 e024 	str.w	lr, [r7, #36]	; 0x24
 800284e:	2203      	movs	r2, #3
 8002850:	9209      	str	r2, [sp, #36]	; 0x24
 8002852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002854:	9208      	str	r2, [sp, #32]
 8002856:	9607      	str	r6, [sp, #28]
 8002858:	9506      	str	r5, [sp, #24]
 800285a:	9405      	str	r4, [sp, #20]
 800285c:	9004      	str	r0, [sp, #16]
 800285e:	9103      	str	r1, [sp, #12]
 8002860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002862:	9202      	str	r2, [sp, #8]
 8002864:	9301      	str	r3, [sp, #4]
 8002866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	4663      	mov	r3, ip
 800286c:	2202      	movs	r2, #2
 800286e:	490a      	ldr	r1, [pc, #40]	; (8002898 <send_to_pc+0x1244>)
 8002870:	480a      	ldr	r0, [pc, #40]	; (800289c <send_to_pc+0x1248>)
 8002872:	f004 fcdf 	bl	8007234 <siprintf>
																										ETX
			);
			HAL_UART_Transmit(&huart1, send_pc_buf,14, 10);
 8002876:	230a      	movs	r3, #10
 8002878:	220e      	movs	r2, #14
 800287a:	4908      	ldr	r1, [pc, #32]	; (800289c <send_to_pc+0x1248>)
 800287c:	4808      	ldr	r0, [pc, #32]	; (80028a0 <send_to_pc+0x124c>)
 800287e:	f003 fb3e 	bl	8005efe <HAL_UART_Transmit>

		}
		break;
 8002882:	e2ad      	b.n	8002de0 <send_to_pc+0x178c>
 8002884:	200002cc 	.word	0x200002cc
 8002888:	cccccccd 	.word	0xcccccccd
 800288c:	20000300 	.word	0x20000300
 8002890:	200002dc 	.word	0x200002dc
 8002894:	200002e4 	.word	0x200002e4
 8002898:	08007850 	.word	0x08007850
 800289c:	200001b0 	.word	0x200001b0
 80028a0:	2000071c 	.word	0x2000071c
		case PHASE_3_CUR_ID:
		{
			uint8_t phase_3_cur = data_msg.payload[0];
 80028a4:	4bc9      	ldr	r3, [pc, #804]	; (8002bcc <send_to_pc+0x1578>)
 80028a6:	789b      	ldrb	r3, [r3, #2]
 80028a8:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
			
			uint8_t phase_R_cur_100 = data_msg.payload[1]/10;
 80028ac:	4bc7      	ldr	r3, [pc, #796]	; (8002bcc <send_to_pc+0x1578>)
 80028ae:	78db      	ldrb	r3, [r3, #3]
 80028b0:	4ac7      	ldr	r2, [pc, #796]	; (8002bd0 <send_to_pc+0x157c>)
 80028b2:	fba2 2303 	umull	r2, r3, r2, r3
 80028b6:	08db      	lsrs	r3, r3, #3
 80028b8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
			uint8_t phase_R_cur_10 = data_msg.payload[1]%10;
 80028bc:	4bc3      	ldr	r3, [pc, #780]	; (8002bcc <send_to_pc+0x1578>)
 80028be:	78da      	ldrb	r2, [r3, #3]
 80028c0:	4bc3      	ldr	r3, [pc, #780]	; (8002bd0 <send_to_pc+0x157c>)
 80028c2:	fba3 1302 	umull	r1, r3, r3, r2
 80028c6:	08d9      	lsrs	r1, r3, #3
 80028c8:	460b      	mov	r3, r1
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	440b      	add	r3, r1
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			uint8_t phase_R_cur_1 = data_msg.payload[2]/10;
 80028d6:	4bbd      	ldr	r3, [pc, #756]	; (8002bcc <send_to_pc+0x1578>)
 80028d8:	791b      	ldrb	r3, [r3, #4]
 80028da:	4abd      	ldr	r2, [pc, #756]	; (8002bd0 <send_to_pc+0x157c>)
 80028dc:	fba2 2303 	umull	r2, r3, r2, r3
 80028e0:	08db      	lsrs	r3, r3, #3
 80028e2:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
			uint8_t phase_R_cur_0 = data_msg.payload[2]%10;
 80028e6:	4bb9      	ldr	r3, [pc, #740]	; (8002bcc <send_to_pc+0x1578>)
 80028e8:	791a      	ldrb	r2, [r3, #4]
 80028ea:	4bb9      	ldr	r3, [pc, #740]	; (8002bd0 <send_to_pc+0x157c>)
 80028ec:	fba3 1302 	umull	r1, r3, r3, r2
 80028f0:	08d9      	lsrs	r1, r3, #3
 80028f2:	460b      	mov	r3, r1
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	440b      	add	r3, r1
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

			uint8_t phase_S_cur_100 = data_msg.payload[3]/10;
 8002900:	4bb2      	ldr	r3, [pc, #712]	; (8002bcc <send_to_pc+0x1578>)
 8002902:	795b      	ldrb	r3, [r3, #5]
 8002904:	4ab2      	ldr	r2, [pc, #712]	; (8002bd0 <send_to_pc+0x157c>)
 8002906:	fba2 2303 	umull	r2, r3, r2, r3
 800290a:	08db      	lsrs	r3, r3, #3
 800290c:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
			uint8_t phase_S_cur_10 = data_msg.payload[3]%10;
 8002910:	4bae      	ldr	r3, [pc, #696]	; (8002bcc <send_to_pc+0x1578>)
 8002912:	795a      	ldrb	r2, [r3, #5]
 8002914:	4bae      	ldr	r3, [pc, #696]	; (8002bd0 <send_to_pc+0x157c>)
 8002916:	fba3 1302 	umull	r1, r3, r3, r2
 800291a:	08d9      	lsrs	r1, r3, #3
 800291c:	460b      	mov	r3, r1
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
			uint8_t phase_S_cur_1 = data_msg.payload[4]/10;
 800292a:	4ba8      	ldr	r3, [pc, #672]	; (8002bcc <send_to_pc+0x1578>)
 800292c:	799b      	ldrb	r3, [r3, #6]
 800292e:	4aa8      	ldr	r2, [pc, #672]	; (8002bd0 <send_to_pc+0x157c>)
 8002930:	fba2 2303 	umull	r2, r3, r2, r3
 8002934:	08db      	lsrs	r3, r3, #3
 8002936:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
			uint8_t phase_S_cur_0 = data_msg.payload[4]%10;
 800293a:	4ba4      	ldr	r3, [pc, #656]	; (8002bcc <send_to_pc+0x1578>)
 800293c:	799a      	ldrb	r2, [r3, #6]
 800293e:	4ba4      	ldr	r3, [pc, #656]	; (8002bd0 <send_to_pc+0x157c>)
 8002940:	fba3 1302 	umull	r1, r3, r3, r2
 8002944:	08d9      	lsrs	r1, r3, #3
 8002946:	460b      	mov	r3, r1
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	440b      	add	r3, r1
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79

			uint8_t phase_T_cur_100 = data_msg.payload[5]/10;
 8002954:	4b9d      	ldr	r3, [pc, #628]	; (8002bcc <send_to_pc+0x1578>)
 8002956:	79db      	ldrb	r3, [r3, #7]
 8002958:	4a9d      	ldr	r2, [pc, #628]	; (8002bd0 <send_to_pc+0x157c>)
 800295a:	fba2 2303 	umull	r2, r3, r2, r3
 800295e:	08db      	lsrs	r3, r3, #3
 8002960:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
			uint8_t phase_T_cur_10 = data_msg.payload[5]%10;
 8002964:	4b99      	ldr	r3, [pc, #612]	; (8002bcc <send_to_pc+0x1578>)
 8002966:	79da      	ldrb	r2, [r3, #7]
 8002968:	4b99      	ldr	r3, [pc, #612]	; (8002bd0 <send_to_pc+0x157c>)
 800296a:	fba3 1302 	umull	r1, r3, r3, r2
 800296e:	08d9      	lsrs	r1, r3, #3
 8002970:	460b      	mov	r3, r1
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			uint8_t phase_T_cur_1 = data_msg.payload[6]/10;
 800297e:	4b93      	ldr	r3, [pc, #588]	; (8002bcc <send_to_pc+0x1578>)
 8002980:	7a1b      	ldrb	r3, [r3, #8]
 8002982:	4a93      	ldr	r2, [pc, #588]	; (8002bd0 <send_to_pc+0x157c>)
 8002984:	fba2 2303 	umull	r2, r3, r2, r3
 8002988:	08db      	lsrs	r3, r3, #3
 800298a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
			uint8_t phase_T_cur_0 = data_msg.payload[6]%10;
 800298e:	4b8f      	ldr	r3, [pc, #572]	; (8002bcc <send_to_pc+0x1578>)
 8002990:	7a1a      	ldrb	r2, [r3, #8]
 8002992:	4b8f      	ldr	r3, [pc, #572]	; (8002bd0 <send_to_pc+0x157c>)
 8002994:	fba3 1302 	umull	r1, r3, r3, r2
 8002998:	08d9      	lsrs	r1, r3, #3
 800299a:	460b      	mov	r3, r1
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75

			uint8_t bat_h =data_msg.payload[7];
 80029a8:	4b88      	ldr	r3, [pc, #544]	; (8002bcc <send_to_pc+0x1578>)
 80029aa:	7a5b      	ldrb	r3, [r3, #9]
 80029ac:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
			uint8_t bat_l =data_msg.payload[8];
 80029b0:	4b86      	ldr	r3, [pc, #536]	; (8002bcc <send_to_pc+0x1578>)
 80029b2:	7a9b      	ldrb	r3, [r3, #10]
 80029b4:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73


			REG_INPUT_BUF[nodeIdIdx++] = phase_3_cur; // TPYE
 80029b8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	f8a7 208e 	strh.w	r2, [r7, #142]	; 0x8e
 80029c2:	461a      	mov	r2, r3
 80029c4:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 80029c8:	b299      	uxth	r1, r3
 80029ca:	4b82      	ldr	r3, [pc, #520]	; (8002bd4 <send_to_pc+0x1580>)
 80029cc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			REG_INPUT_BUF[nodeIdIdx++] = 3+2; // DATA LEN  3PHASE   R S T
 80029d0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80029d4:	1c5a      	adds	r2, r3, #1
 80029d6:	f8a7 208e 	strh.w	r2, [r7, #142]	; 0x8e
 80029da:	461a      	mov	r2, r3
 80029dc:	4b7d      	ldr	r3, [pc, #500]	; (8002bd4 <send_to_pc+0x1580>)
 80029de:	2105      	movs	r1, #5
 80029e0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			REG_INPUT_BUF[nodeIdIdx++] = (phase_R_cur_100 * 1000) + (phase_R_cur_10 *100) + (phase_R_cur_1 *10) + phase_R_cur_0;
 80029e4:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	461a      	mov	r2, r3
 80029ec:	0152      	lsls	r2, r2, #5
 80029ee:	1ad2      	subs	r2, r2, r3
 80029f0:	0092      	lsls	r2, r2, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	4619      	mov	r1, r3
 8002a00:	0089      	lsls	r1, r1, #2
 8002a02:	440b      	add	r3, r1
 8002a04:	4619      	mov	r1, r3
 8002a06:	0088      	lsls	r0, r1, #2
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	440b      	add	r3, r1
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	4413      	add	r3, r2
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	0089      	lsls	r1, r1, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	4413      	add	r3, r2
 8002a28:	b299      	uxth	r1, r3
 8002a2a:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002a34:	1c58      	adds	r0, r3, #1
 8002a36:	f8a7 008e 	strh.w	r0, [r7, #142]	; 0x8e
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	188b      	adds	r3, r1, r2
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	4b64      	ldr	r3, [pc, #400]	; (8002bd4 <send_to_pc+0x1580>)
 8002a42:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
			REG_INPUT_BUF[nodeIdIdx++] = (phase_S_cur_100 * 1000) + (phase_S_cur_10 *100) + (phase_S_cur_1 *10) + phase_S_cur_0;
 8002a46:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	0152      	lsls	r2, r2, #5
 8002a50:	1ad2      	subs	r2, r2, r3
 8002a52:	0092      	lsls	r2, r2, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	4619      	mov	r1, r3
 8002a62:	0089      	lsls	r1, r1, #2
 8002a64:	440b      	add	r3, r1
 8002a66:	4619      	mov	r1, r3
 8002a68:	0088      	lsls	r0, r1, #2
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	440b      	add	r3, r1
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	4413      	add	r3, r2
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	4619      	mov	r1, r3
 8002a80:	0089      	lsls	r1, r1, #2
 8002a82:	440b      	add	r3, r1
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	4413      	add	r3, r2
 8002a8a:	b299      	uxth	r1, r3
 8002a8c:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002a96:	1c58      	adds	r0, r3, #1
 8002a98:	f8a7 008e 	strh.w	r0, [r7, #142]	; 0x8e
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	188b      	adds	r3, r1, r2
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	4b4c      	ldr	r3, [pc, #304]	; (8002bd4 <send_to_pc+0x1580>)
 8002aa4:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
			REG_INPUT_BUF[nodeIdIdx++] = (phase_T_cur_100 * 1000) + (phase_T_cur_10 *100) + (phase_T_cur_1 *10) + phase_T_cur_0;
 8002aa8:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	461a      	mov	r2, r3
 8002ab0:	0152      	lsls	r2, r2, #5
 8002ab2:	1ad2      	subs	r2, r2, r3
 8002ab4:	0092      	lsls	r2, r2, #2
 8002ab6:	4413      	add	r3, r2
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	0089      	lsls	r1, r1, #2
 8002ac6:	440b      	add	r3, r1
 8002ac8:	4619      	mov	r1, r3
 8002aca:	0088      	lsls	r0, r1, #2
 8002acc:	4619      	mov	r1, r3
 8002ace:	4603      	mov	r3, r0
 8002ad0:	440b      	add	r3, r1
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	0089      	lsls	r1, r1, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	4413      	add	r3, r2
 8002aec:	b299      	uxth	r1, r3
 8002aee:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002af8:	1c58      	adds	r0, r3, #1
 8002afa:	f8a7 008e 	strh.w	r0, [r7, #142]	; 0x8e
 8002afe:	4618      	mov	r0, r3
 8002b00:	188b      	adds	r3, r1, r2
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	4b33      	ldr	r3, [pc, #204]	; (8002bd4 <send_to_pc+0x1580>)
 8002b06:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
			REG_INPUT_BUF[nodeIdIdx++] = bat_h*10 + bat_l ;
 8002b0a:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	461a      	mov	r2, r3
 8002b12:	0092      	lsls	r2, r2, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	b299      	uxth	r1, r3
 8002b1a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002b24:	1c58      	adds	r0, r3, #1
 8002b26:	f8a7 008e 	strh.w	r0, [r7, #142]	; 0x8e
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	188b      	adds	r3, r1, r2
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	4b28      	ldr	r3, [pc, #160]	; (8002bd4 <send_to_pc+0x1580>)
 8002b32:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
			REG_INPUT_BUF[nodeIdIdx++] = -footer.rssi;
 8002b36:	4b28      	ldr	r3, [pc, #160]	; (8002bd8 <send_to_pc+0x1584>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	b299      	uxth	r1, r3
 8002b3c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	f8a7 208e 	strh.w	r2, [r7, #142]	; 0x8e
 8002b46:	461a      	mov	r2, r3
 8002b48:	460b      	mov	r3, r1
 8002b4a:	425b      	negs	r3, r3
 8002b4c:	b299      	uxth	r1, r3
 8002b4e:	4b21      	ldr	r3, [pc, #132]	; (8002bd4 <send_to_pc+0x1580>)
 8002b50:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			sprintf(send_pc_buf, "%c%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%c", 											STX,	// stx
																										data_msg.hdr.length+6,  // ?
 8002b54:	4b1d      	ldr	r3, [pc, #116]	; (8002bcc <send_to_pc+0x1578>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
			sprintf(send_pc_buf, "%c%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%c", 											STX,	// stx
 8002b58:	f103 0c06 	add.w	ip, r3, #6
 8002b5c:	4b1f      	ldr	r3, [pc, #124]	; (8002bdc <send_to_pc+0x1588>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b62:	f897 5081 	ldrb.w	r5, [r7, #129]	; 0x81
 8002b66:	f897 6080 	ldrb.w	r6, [r7, #128]	; 0x80
 8002b6a:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8002b6e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002b70:	f897 107e 	ldrb.w	r1, [r7, #126]	; 0x7e
 8002b74:	6279      	str	r1, [r7, #36]	; 0x24
 8002b76:	f897 007d 	ldrb.w	r0, [r7, #125]	; 0x7d
 8002b7a:	6238      	str	r0, [r7, #32]
 8002b7c:	f897 407c 	ldrb.w	r4, [r7, #124]	; 0x7c
 8002b80:	61fc      	str	r4, [r7, #28]
 8002b82:	f897 e07b 	ldrb.w	lr, [r7, #123]	; 0x7b
 8002b86:	4673      	mov	r3, lr
 8002b88:	61bb      	str	r3, [r7, #24]
 8002b8a:	f897 e07a 	ldrb.w	lr, [r7, #122]	; 0x7a
 8002b8e:	4672      	mov	r2, lr
 8002b90:	617a      	str	r2, [r7, #20]
 8002b92:	f897 e079 	ldrb.w	lr, [r7, #121]	; 0x79
 8002b96:	4671      	mov	r1, lr
 8002b98:	6139      	str	r1, [r7, #16]
 8002b9a:	f897 e078 	ldrb.w	lr, [r7, #120]	; 0x78
 8002b9e:	4670      	mov	r0, lr
 8002ba0:	60f8      	str	r0, [r7, #12]
 8002ba2:	f897 e077 	ldrb.w	lr, [r7, #119]	; 0x77
 8002ba6:	4674      	mov	r4, lr
 8002ba8:	60bc      	str	r4, [r7, #8]
 8002baa:	f897 e076 	ldrb.w	lr, [r7, #118]	; 0x76
 8002bae:	4673      	mov	r3, lr
 8002bb0:	607b      	str	r3, [r7, #4]
 8002bb2:	f897 4075 	ldrb.w	r4, [r7, #117]	; 0x75
 8002bb6:	f897 0074 	ldrb.w	r0, [r7, #116]	; 0x74
 8002bba:	f897 1073 	ldrb.w	r1, [r7, #115]	; 0x73
																										phase_T_cur_10,
																										phase_T_cur_1,
																										phase_T_cur_0,
																										bat_h,  // bat H
																										bat_l,  // bat L
																										footer.rssi,
 8002bbe:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <send_to_pc+0x1584>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
			sprintf(send_pc_buf, "%c%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%c", 											STX,	// stx
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	9311      	str	r3, [sp, #68]	; 0x44
 8002bc8:	9210      	str	r2, [sp, #64]	; 0x40
 8002bca:	e009      	b.n	8002be0 <send_to_pc+0x158c>
 8002bcc:	200002cc 	.word	0x200002cc
 8002bd0:	cccccccd 	.word	0xcccccccd
 8002bd4:	20000300 	.word	0x20000300
 8002bd8:	200002dc 	.word	0x200002dc
 8002bdc:	200002e4 	.word	0x200002e4
 8002be0:	910f      	str	r1, [sp, #60]	; 0x3c
 8002be2:	900e      	str	r0, [sp, #56]	; 0x38
 8002be4:	940d      	str	r4, [sp, #52]	; 0x34
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	930c      	str	r3, [sp, #48]	; 0x30
 8002bea:	68bc      	ldr	r4, [r7, #8]
 8002bec:	940b      	str	r4, [sp, #44]	; 0x2c
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	900a      	str	r0, [sp, #40]	; 0x28
 8002bf2:	6939      	ldr	r1, [r7, #16]
 8002bf4:	9109      	str	r1, [sp, #36]	; 0x24
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	9208      	str	r2, [sp, #32]
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	9307      	str	r3, [sp, #28]
 8002bfe:	69fc      	ldr	r4, [r7, #28]
 8002c00:	9406      	str	r4, [sp, #24]
 8002c02:	6a38      	ldr	r0, [r7, #32]
 8002c04:	9005      	str	r0, [sp, #20]
 8002c06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c08:	9104      	str	r1, [sp, #16]
 8002c0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c0c:	9203      	str	r2, [sp, #12]
 8002c0e:	9602      	str	r6, [sp, #8]
 8002c10:	9501      	str	r5, [sp, #4]
 8002c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	4663      	mov	r3, ip
 8002c18:	2202      	movs	r2, #2
 8002c1a:	4973      	ldr	r1, [pc, #460]	; (8002de8 <send_to_pc+0x1794>)
 8002c1c:	4873      	ldr	r0, [pc, #460]	; (8002dec <send_to_pc+0x1798>)
 8002c1e:	f004 fb09 	bl	8007234 <siprintf>
																										ETX
			);
			HAL_UART_Transmit(&huart1, send_pc_buf,22, 10);
 8002c22:	230a      	movs	r3, #10
 8002c24:	2216      	movs	r2, #22
 8002c26:	4971      	ldr	r1, [pc, #452]	; (8002dec <send_to_pc+0x1798>)
 8002c28:	4871      	ldr	r0, [pc, #452]	; (8002df0 <send_to_pc+0x179c>)
 8002c2a:	f003 f968 	bl	8005efe <HAL_UART_Transmit>
		}
		break;
 8002c2e:	e0d7      	b.n	8002de0 <send_to_pc+0x178c>
		case PHASE_2_CUR_ID:
		{
			uint8_t phase_2_cur = data_msg.payload[0];
 8002c30:	4b70      	ldr	r3, [pc, #448]	; (8002df4 <send_to_pc+0x17a0>)
 8002c32:	789b      	ldrb	r3, [r3, #2]
 8002c34:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
			uint8_t phase_2_cur_100 = data_msg.payload[1]/10;
 8002c38:	4b6e      	ldr	r3, [pc, #440]	; (8002df4 <send_to_pc+0x17a0>)
 8002c3a:	78db      	ldrb	r3, [r3, #3]
 8002c3c:	4a6e      	ldr	r2, [pc, #440]	; (8002df8 <send_to_pc+0x17a4>)
 8002c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c42:	08db      	lsrs	r3, r3, #3
 8002c44:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			uint8_t phase_2_cur_10 = data_msg.payload[1]%10;
 8002c48:	4b6a      	ldr	r3, [pc, #424]	; (8002df4 <send_to_pc+0x17a0>)
 8002c4a:	78da      	ldrb	r2, [r3, #3]
 8002c4c:	4b6a      	ldr	r3, [pc, #424]	; (8002df8 <send_to_pc+0x17a4>)
 8002c4e:	fba3 1302 	umull	r1, r3, r3, r2
 8002c52:	08d9      	lsrs	r1, r3, #3
 8002c54:	460b      	mov	r3, r1
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			uint8_t phase_2_cur_1 = data_msg.payload[2]/10;
 8002c62:	4b64      	ldr	r3, [pc, #400]	; (8002df4 <send_to_pc+0x17a0>)
 8002c64:	791b      	ldrb	r3, [r3, #4]
 8002c66:	4a64      	ldr	r2, [pc, #400]	; (8002df8 <send_to_pc+0x17a4>)
 8002c68:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6c:	08db      	lsrs	r3, r3, #3
 8002c6e:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
			uint8_t phase_2_cur_0 = data_msg.payload[2]%10;
 8002c72:	4b60      	ldr	r3, [pc, #384]	; (8002df4 <send_to_pc+0x17a0>)
 8002c74:	791a      	ldrb	r2, [r3, #4]
 8002c76:	4b60      	ldr	r3, [pc, #384]	; (8002df8 <send_to_pc+0x17a4>)
 8002c78:	fba3 1302 	umull	r1, r3, r3, r2
 8002c7c:	08d9      	lsrs	r1, r3, #3
 8002c7e:	460b      	mov	r3, r1
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	440b      	add	r3, r1
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
			uint8_t bat_h =data_msg.payload[7];
 8002c8c:	4b59      	ldr	r3, [pc, #356]	; (8002df4 <send_to_pc+0x17a0>)
 8002c8e:	7a5b      	ldrb	r3, [r3, #9]
 8002c90:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			uint8_t bat_l =data_msg.payload[8];
 8002c94:	4b57      	ldr	r3, [pc, #348]	; (8002df4 <send_to_pc+0x17a0>)
 8002c96:	7a9b      	ldrb	r3, [r3, #10]
 8002c98:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82

			REG_INPUT_BUF[nodeIdIdx++] = phase_2_cur; // TPYE
 8002c9c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002ca0:	1c5a      	adds	r2, r3, #1
 8002ca2:	f8a7 208e 	strh.w	r2, [r7, #142]	; 0x8e
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8002cac:	b299      	uxth	r1, r3
 8002cae:	4b53      	ldr	r3, [pc, #332]	; (8002dfc <send_to_pc+0x17a8>)
 8002cb0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			REG_INPUT_BUF[nodeIdIdx++] = 1 + 2; // DATA LEN   2phase + bat + rssi
 8002cb4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	f8a7 208e 	strh.w	r2, [r7, #142]	; 0x8e
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	4b4e      	ldr	r3, [pc, #312]	; (8002dfc <send_to_pc+0x17a8>)
 8002cc2:	2103      	movs	r1, #3
 8002cc4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			REG_INPUT_BUF[nodeIdIdx++] = (phase_2_cur_100 *1000 ) + (phase_2_cur_10 *100) + (phase_2_cur_1 *10) + phase_2_cur_0;
 8002cc8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	461a      	mov	r2, r3
 8002cd0:	0152      	lsls	r2, r2, #5
 8002cd2:	1ad2      	subs	r2, r2, r3
 8002cd4:	0092      	lsls	r2, r2, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	0089      	lsls	r1, r1, #2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	4619      	mov	r1, r3
 8002cea:	0088      	lsls	r0, r1, #2
 8002cec:	4619      	mov	r1, r3
 8002cee:	4603      	mov	r3, r0
 8002cf0:	440b      	add	r3, r1
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	4413      	add	r3, r2
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	4619      	mov	r1, r3
 8002d02:	0089      	lsls	r1, r1, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	4413      	add	r3, r2
 8002d0c:	b299      	uxth	r1, r3
 8002d0e:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002d18:	1c58      	adds	r0, r3, #1
 8002d1a:	f8a7 008e 	strh.w	r0, [r7, #142]	; 0x8e
 8002d1e:	4618      	mov	r0, r3
 8002d20:	188b      	adds	r3, r1, r2
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	4b35      	ldr	r3, [pc, #212]	; (8002dfc <send_to_pc+0x17a8>)
 8002d26:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
			REG_INPUT_BUF[nodeIdIdx++] = bat_h*10 + bat_l ;
 8002d2a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	461a      	mov	r2, r3
 8002d32:	0092      	lsls	r2, r2, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	b299      	uxth	r1, r3
 8002d3a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002d44:	1c58      	adds	r0, r3, #1
 8002d46:	f8a7 008e 	strh.w	r0, [r7, #142]	; 0x8e
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	188b      	adds	r3, r1, r2
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	4b2a      	ldr	r3, [pc, #168]	; (8002dfc <send_to_pc+0x17a8>)
 8002d52:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
			REG_INPUT_BUF[nodeIdIdx++] = -footer.rssi;
 8002d56:	4b2a      	ldr	r3, [pc, #168]	; (8002e00 <send_to_pc+0x17ac>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	b299      	uxth	r1, r3
 8002d5c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002d60:	1c5a      	adds	r2, r3, #1
 8002d62:	f8a7 208e 	strh.w	r2, [r7, #142]	; 0x8e
 8002d66:	461a      	mov	r2, r3
 8002d68:	460b      	mov	r3, r1
 8002d6a:	425b      	negs	r3, r3
 8002d6c:	b299      	uxth	r1, r3
 8002d6e:	4b23      	ldr	r3, [pc, #140]	; (8002dfc <send_to_pc+0x17a8>)
 8002d70:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			sprintf(send_pc_buf, "%c%d%d%d%d%d%d%d%d%d%d%c", 											STX,	// stx
																										data_msg.hdr.length-2,  // ?
 8002d74:	4b1f      	ldr	r3, [pc, #124]	; (8002df4 <send_to_pc+0x17a0>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
			sprintf(send_pc_buf, "%c%d%d%d%d%d%d%d%d%d%d%c", 											STX,	// stx
 8002d78:	f1a3 0c02 	sub.w	ip, r3, #2
 8002d7c:	4b21      	ldr	r3, [pc, #132]	; (8002e04 <send_to_pc+0x17b0>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d82:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8002d86:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8002d8a:	62ba      	str	r2, [r7, #40]	; 0x28
 8002d8c:	f897 1086 	ldrb.w	r1, [r7, #134]	; 0x86
 8002d90:	f897 0085 	ldrb.w	r0, [r7, #133]	; 0x85
 8002d94:	f897 4084 	ldrb.w	r4, [r7, #132]	; 0x84
 8002d98:	f897 5083 	ldrb.w	r5, [r7, #131]	; 0x83
 8002d9c:	f897 6082 	ldrb.w	r6, [r7, #130]	; 0x82
																										phase_2_cur_10,
																										phase_2_cur_1,
																										phase_2_cur_0,
																										bat_h,  // bat H
																										bat_l,  // bat L
																										footer.rssi,
 8002da0:	4a17      	ldr	r2, [pc, #92]	; (8002e00 <send_to_pc+0x17ac>)
 8002da2:	f892 e000 	ldrb.w	lr, [r2]
			sprintf(send_pc_buf, "%c%d%d%d%d%d%d%d%d%d%d%c", 											STX,	// stx
 8002da6:	f8c7 e024 	str.w	lr, [r7, #36]	; 0x24
 8002daa:	2203      	movs	r2, #3
 8002dac:	9209      	str	r2, [sp, #36]	; 0x24
 8002dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db0:	9208      	str	r2, [sp, #32]
 8002db2:	9607      	str	r6, [sp, #28]
 8002db4:	9506      	str	r5, [sp, #24]
 8002db6:	9405      	str	r4, [sp, #20]
 8002db8:	9004      	str	r0, [sp, #16]
 8002dba:	9103      	str	r1, [sp, #12]
 8002dbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dbe:	9202      	str	r2, [sp, #8]
 8002dc0:	9301      	str	r3, [sp, #4]
 8002dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc4:	9300      	str	r3, [sp, #0]
 8002dc6:	4663      	mov	r3, ip
 8002dc8:	2202      	movs	r2, #2
 8002dca:	490f      	ldr	r1, [pc, #60]	; (8002e08 <send_to_pc+0x17b4>)
 8002dcc:	4807      	ldr	r0, [pc, #28]	; (8002dec <send_to_pc+0x1798>)
 8002dce:	f004 fa31 	bl	8007234 <siprintf>
																										ETX
			);
			HAL_UART_Transmit(&huart1, send_pc_buf,14, 10);
 8002dd2:	230a      	movs	r3, #10
 8002dd4:	220e      	movs	r2, #14
 8002dd6:	4905      	ldr	r1, [pc, #20]	; (8002dec <send_to_pc+0x1798>)
 8002dd8:	4805      	ldr	r0, [pc, #20]	; (8002df0 <send_to_pc+0x179c>)
 8002dda:	f003 f890 	bl	8005efe <HAL_UART_Transmit>
		}
		break;
 8002dde:	bf00      	nop

	}

}
 8002de0:	bf00      	nop
 8002de2:	3794      	adds	r7, #148	; 0x94
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002de8:	08007824 	.word	0x08007824
 8002dec:	200001b0 	.word	0x200001b0
 8002df0:	2000071c 	.word	0x2000071c
 8002df4:	200002cc 	.word	0x200002cc
 8002df8:	cccccccd 	.word	0xcccccccd
 8002dfc:	20000300 	.word	0x20000300
 8002e00:	200002dc 	.word	0x200002dc
 8002e04:	200002e4 	.word	0x200002e4
 8002e08:	08007850 	.word	0x08007850

08002e0c <swtimerInit>:
//-- External Functions
//


bool swtimerInit(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
  uint8_t i;
  static uint8_t excute = 0;


  if (excute == 1)
 8002e12:	4b20      	ldr	r3, [pc, #128]	; (8002e94 <swtimerInit+0x88>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d101      	bne.n	8002e1e <swtimerInit+0x12>
  {
    return false;  // 이미 한번 실행했다면 정지.
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	e033      	b.n	8002e86 <swtimerInit+0x7a>
  }


  // 구조체 초기화
  for(i=0; i<_HW_DEF_SW_TIMER_MAX; i++)
 8002e1e:	2300      	movs	r3, #0
 8002e20:	71fb      	strb	r3, [r7, #7]
 8002e22:	e029      	b.n	8002e78 <swtimerInit+0x6c>
  {
    swtimer_tbl[i].Timer_En   = OFF;
 8002e24:	79fa      	ldrb	r2, [r7, #7]
 8002e26:	491c      	ldr	r1, [pc, #112]	; (8002e98 <swtimerInit+0x8c>)
 8002e28:	4613      	mov	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	2200      	movs	r2, #0
 8002e34:	701a      	strb	r2, [r3, #0]
    swtimer_tbl[i].Timer_Ctn  = 0;
 8002e36:	79fa      	ldrb	r2, [r7, #7]
 8002e38:	4917      	ldr	r1, [pc, #92]	; (8002e98 <swtimerInit+0x8c>)
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	440b      	add	r3, r1
 8002e44:	3304      	adds	r3, #4
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]
    swtimer_tbl[i].Timer_Init = 0;
 8002e4a:	79fa      	ldrb	r2, [r7, #7]
 8002e4c:	4912      	ldr	r1, [pc, #72]	; (8002e98 <swtimerInit+0x8c>)
 8002e4e:	4613      	mov	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	440b      	add	r3, r1
 8002e58:	3308      	adds	r3, #8
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]
    swtimer_tbl[i].TmrFnct    = NULL;
 8002e5e:	79fa      	ldrb	r2, [r7, #7]
 8002e60:	490d      	ldr	r1, [pc, #52]	; (8002e98 <swtimerInit+0x8c>)
 8002e62:	4613      	mov	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	330c      	adds	r3, #12
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]
  for(i=0; i<_HW_DEF_SW_TIMER_MAX; i++)
 8002e72:	79fb      	ldrb	r3, [r7, #7]
 8002e74:	3301      	adds	r3, #1
 8002e76:	71fb      	strb	r3, [r7, #7]
 8002e78:	79fb      	ldrb	r3, [r7, #7]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0d2      	beq.n	8002e24 <swtimerInit+0x18>
  }

  excute = 1;
 8002e7e:	4b05      	ldr	r3, [pc, #20]	; (8002e94 <swtimerInit+0x88>)
 8002e80:	2201      	movs	r2, #1
 8002e82:	701a      	strb	r2, [r3, #0]

  return true;
 8002e84:	2301      	movs	r3, #1
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	2000020c 	.word	0x2000020c
 8002e98:	200001f8 	.word	0x200001f8

08002e9c <swtimerISR>:

void swtimerISR(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
  uint8_t i;


  sw_timer_counter++;
 8002ea2:	4b3d      	ldr	r3, [pc, #244]	; (8002f98 <swtimerISR+0xfc>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	4a3b      	ldr	r2, [pc, #236]	; (8002f98 <swtimerISR+0xfc>)
 8002eaa:	6013      	str	r3, [r2, #0]


  for (i=0; i<_HW_DEF_SW_TIMER_MAX && i<sw_timer_handle_index; i++)     // 타이머 갯수만큼
 8002eac:	2300      	movs	r3, #0
 8002eae:	71fb      	strb	r3, [r7, #7]
 8002eb0:	e063      	b.n	8002f7a <swtimerISR+0xde>
  {
    if ( swtimer_tbl[i].Timer_En == ON)                         // 타이머가 활성화 됬니?
 8002eb2:	79fa      	ldrb	r2, [r7, #7]
 8002eb4:	4939      	ldr	r1, [pc, #228]	; (8002f9c <swtimerISR+0x100>)
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d156      	bne.n	8002f74 <swtimerISR+0xd8>
    {
      swtimer_tbl[i].Timer_Ctn--;                               // 타이머값 감소
 8002ec6:	79fa      	ldrb	r2, [r7, #7]
 8002ec8:	4934      	ldr	r1, [pc, #208]	; (8002f9c <swtimerISR+0x100>)
 8002eca:	4613      	mov	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	1e59      	subs	r1, r3, #1
 8002eda:	4830      	ldr	r0, [pc, #192]	; (8002f9c <swtimerISR+0x100>)
 8002edc:	4613      	mov	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4403      	add	r3, r0
 8002ee6:	3304      	adds	r3, #4
 8002ee8:	6019      	str	r1, [r3, #0]

      if (swtimer_tbl[i].Timer_Ctn == 0)                        // 타이머 오버플로어
 8002eea:	79fa      	ldrb	r2, [r7, #7]
 8002eec:	492b      	ldr	r1, [pc, #172]	; (8002f9c <swtimerISR+0x100>)
 8002eee:	4613      	mov	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	440b      	add	r3, r1
 8002ef8:	3304      	adds	r3, #4
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d139      	bne.n	8002f74 <swtimerISR+0xd8>
      {
        if(swtimer_tbl[i].Timer_Mode == ONE_TIME)               // 한번만 실행하는거면
 8002f00:	79fa      	ldrb	r2, [r7, #7]
 8002f02:	4926      	ldr	r1, [pc, #152]	; (8002f9c <swtimerISR+0x100>)
 8002f04:	4613      	mov	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	3301      	adds	r3, #1
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d108      	bne.n	8002f28 <swtimerISR+0x8c>
        {
          swtimer_tbl[i].Timer_En = OFF;                        // 타이머 OFF 한다.
 8002f16:	79fa      	ldrb	r2, [r7, #7]
 8002f18:	4920      	ldr	r1, [pc, #128]	; (8002f9c <swtimerISR+0x100>)
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	440b      	add	r3, r1
 8002f24:	2200      	movs	r2, #0
 8002f26:	701a      	strb	r2, [r3, #0]
        }

        swtimer_tbl[i].Timer_Ctn = swtimer_tbl[i].Timer_Init;   // 타이머 초기화
 8002f28:	79f9      	ldrb	r1, [r7, #7]
 8002f2a:	79fa      	ldrb	r2, [r7, #7]
 8002f2c:	481b      	ldr	r0, [pc, #108]	; (8002f9c <swtimerISR+0x100>)
 8002f2e:	460b      	mov	r3, r1
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4403      	add	r3, r0
 8002f38:	3308      	adds	r3, #8
 8002f3a:	6819      	ldr	r1, [r3, #0]
 8002f3c:	4817      	ldr	r0, [pc, #92]	; (8002f9c <swtimerISR+0x100>)
 8002f3e:	4613      	mov	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4403      	add	r3, r0
 8002f48:	3304      	adds	r3, #4
 8002f4a:	6019      	str	r1, [r3, #0]

        (*swtimer_tbl[i].TmrFnct)(swtimer_tbl[i].TmrFnctArg);   // 함수 실행
 8002f4c:	79fa      	ldrb	r2, [r7, #7]
 8002f4e:	4913      	ldr	r1, [pc, #76]	; (8002f9c <swtimerISR+0x100>)
 8002f50:	4613      	mov	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4413      	add	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	330c      	adds	r3, #12
 8002f5c:	6819      	ldr	r1, [r3, #0]
 8002f5e:	79fa      	ldrb	r2, [r7, #7]
 8002f60:	480e      	ldr	r0, [pc, #56]	; (8002f9c <swtimerISR+0x100>)
 8002f62:	4613      	mov	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4413      	add	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4403      	add	r3, r0
 8002f6c:	3310      	adds	r3, #16
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	4788      	blx	r1
  for (i=0; i<_HW_DEF_SW_TIMER_MAX && i<sw_timer_handle_index; i++)     // 타이머 갯수만큼
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	3301      	adds	r3, #1
 8002f78:	71fb      	strb	r3, [r7, #7]
 8002f7a:	79fb      	ldrb	r3, [r7, #7]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d106      	bne.n	8002f8e <swtimerISR+0xf2>
 8002f80:	79fb      	ldrb	r3, [r7, #7]
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <swtimerISR+0x104>)
 8002f86:	881b      	ldrh	r3, [r3, #0]
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d391      	bcc.n	8002eb2 <swtimerISR+0x16>
      }
    }
  }

}
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	200001f0 	.word	0x200001f0
 8002f9c:	200001f8 	.word	0x200001f8
 8002fa0:	200001f4 	.word	0x200001f4

08002fa4 <swtimerSet>:

void swtimerSet(uint8_t TmrNum, uint32_t TmrData, uint8_t TmrMode, void (*Fnct)(void *),void *arg)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60b9      	str	r1, [r7, #8]
 8002fac:	607b      	str	r3, [r7, #4]
 8002fae:	4603      	mov	r3, r0
 8002fb0:	73fb      	strb	r3, [r7, #15]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	73bb      	strb	r3, [r7, #14]
  swtimer_tbl[TmrNum].Timer_Mode = TmrMode;    // 모드설정
 8002fb6:	7bfa      	ldrb	r2, [r7, #15]
 8002fb8:	491b      	ldr	r1, [pc, #108]	; (8003028 <swtimerSet+0x84>)
 8002fba:	4613      	mov	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	7bba      	ldrb	r2, [r7, #14]
 8002fc8:	701a      	strb	r2, [r3, #0]
  swtimer_tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
 8002fca:	7bfa      	ldrb	r2, [r7, #15]
 8002fcc:	4916      	ldr	r1, [pc, #88]	; (8003028 <swtimerSet+0x84>)
 8002fce:	4613      	mov	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	330c      	adds	r3, #12
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	601a      	str	r2, [r3, #0]
  swtimer_tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 8002fde:	7bfa      	ldrb	r2, [r7, #15]
 8002fe0:	4911      	ldr	r1, [pc, #68]	; (8003028 <swtimerSet+0x84>)
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4413      	add	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	440b      	add	r3, r1
 8002fec:	3310      	adds	r3, #16
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	601a      	str	r2, [r3, #0]
  swtimer_tbl[TmrNum].Timer_Ctn  = TmrData;
 8002ff2:	7bfa      	ldrb	r2, [r7, #15]
 8002ff4:	490c      	ldr	r1, [pc, #48]	; (8003028 <swtimerSet+0x84>)
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	440b      	add	r3, r1
 8003000:	3304      	adds	r3, #4
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	601a      	str	r2, [r3, #0]
  swtimer_tbl[TmrNum].Timer_Init = TmrData;
 8003006:	7bfa      	ldrb	r2, [r7, #15]
 8003008:	4907      	ldr	r1, [pc, #28]	; (8003028 <swtimerSet+0x84>)
 800300a:	4613      	mov	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4413      	add	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	440b      	add	r3, r1
 8003014:	3308      	adds	r3, #8
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	601a      	str	r2, [r3, #0]
}
 800301a:	bf00      	nop
 800301c:	3714      	adds	r7, #20
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	200001f8 	.word	0x200001f8

0800302c <swtimerStart>:

void swtimerStart(uint8_t TmrNum)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	4603      	mov	r3, r0
 8003034:	71fb      	strb	r3, [r7, #7]
  if(TmrNum < _HW_DEF_SW_TIMER_MAX)
 8003036:	79fb      	ldrb	r3, [r7, #7]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d11a      	bne.n	8003072 <swtimerStart+0x46>
  {
    swtimer_tbl[TmrNum].Timer_Ctn = swtimer_tbl[TmrNum].Timer_Init;
 800303c:	79f9      	ldrb	r1, [r7, #7]
 800303e:	79fa      	ldrb	r2, [r7, #7]
 8003040:	480f      	ldr	r0, [pc, #60]	; (8003080 <swtimerStart+0x54>)
 8003042:	460b      	mov	r3, r1
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	440b      	add	r3, r1
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4403      	add	r3, r0
 800304c:	3308      	adds	r3, #8
 800304e:	6819      	ldr	r1, [r3, #0]
 8003050:	480b      	ldr	r0, [pc, #44]	; (8003080 <swtimerStart+0x54>)
 8003052:	4613      	mov	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4403      	add	r3, r0
 800305c:	3304      	adds	r3, #4
 800305e:	6019      	str	r1, [r3, #0]
    swtimer_tbl[TmrNum].Timer_En  = ON;
 8003060:	79fa      	ldrb	r2, [r7, #7]
 8003062:	4907      	ldr	r1, [pc, #28]	; (8003080 <swtimerStart+0x54>)
 8003064:	4613      	mov	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	2201      	movs	r2, #1
 8003070:	701a      	strb	r2, [r3, #0]
  }
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	200001f8 	.word	0x200001f8

08003084 <swtimerGetHandle>:
  swtimer_tbl[TmrNum].Timer_En   = OFF;
  swtimer_tbl[TmrNum].Timer_Ctn  = swtimer_tbl[TmrNum].Timer_Init;
}

swtimer_handle_t swtimerGetHandle(void)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
  swtimer_handle_t TmrIndex = sw_timer_handle_index;
 800308a:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <swtimerGetHandle+0x2c>)
 800308c:	881b      	ldrh	r3, [r3, #0]
 800308e:	b29b      	uxth	r3, r3
 8003090:	80fb      	strh	r3, [r7, #6]

  sw_timer_handle_index++;
 8003092:	4b07      	ldr	r3, [pc, #28]	; (80030b0 <swtimerGetHandle+0x2c>)
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	b29b      	uxth	r3, r3
 8003098:	3301      	adds	r3, #1
 800309a:	b29a      	uxth	r2, r3
 800309c:	4b04      	ldr	r3, [pc, #16]	; (80030b0 <swtimerGetHandle+0x2c>)
 800309e:	801a      	strh	r2, [r3, #0]

  return TmrIndex;
 80030a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	200001f4 	.word	0x200001f4

080030b4 <mac_init>:
static uint16_t (*new_data_cb)(int16_t);

char SendToPcBuffer[64];


void mac_init(uint8_t channel) {
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b088      	sub	sp, #32
 80030b8:	af02      	add	r7, sp, #8
 80030ba:	4603      	mov	r3, r0
 80030bc:	71fb      	strb	r3, [r7, #7]
	int i;
	uint8_t regCh;
	swtimer_handle_t h_timeSlot_timer;
	// configure the radio
	cc1120_init();
 80030be:	f7fe f929 	bl	8001314 <cc1120_init>
	cc1120_cmd_idle();
 80030c2:	f7fe f8c7 	bl	8001254 <cc1120_cmd_idle>

	//cc1120_cfg_white_data(CC1120_DATA_WHITENING_ENABLE);

	// go to RX after TX
	cc1120_cfg_rxoff_mode(CC1120_RXOFF_MODE_STAY_RX);
 80030c6:	f107 030d 	add.w	r3, r7, #13
 80030ca:	2201      	movs	r2, #1
 80030cc:	4619      	mov	r1, r3
 80030ce:	2029      	movs	r0, #41	; 0x29
 80030d0:	f7fd fe0a 	bl	8000ce8 <CC1120_SpiReadReg>
 80030d4:	7b7b      	ldrb	r3, [r7, #13]
 80030d6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	737b      	strb	r3, [r7, #13]
 80030de:	f107 030d 	add.w	r3, r7, #13
 80030e2:	2201      	movs	r2, #1
 80030e4:	4619      	mov	r1, r3
 80030e6:	2029      	movs	r0, #41	; 0x29
 80030e8:	f7fd fdca 	bl	8000c80 <CC1120_SpiWriteReg>
	cc1120_cfg_txoff_mode(CC1120_TXOFF_MODE_RX);
 80030ec:	f107 030c 	add.w	r3, r7, #12
 80030f0:	2201      	movs	r2, #1
 80030f2:	4619      	mov	r1, r3
 80030f4:	202a      	movs	r0, #42	; 0x2a
 80030f6:	f7fd fdf7 	bl	8000ce8 <CC1120_SpiReadReg>
 80030fa:	7b3b      	ldrb	r3, [r7, #12]
 80030fc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003100:	b2db      	uxtb	r3, r3
 8003102:	733b      	strb	r3, [r7, #12]
 8003104:	f107 030c 	add.w	r3, r7, #12
 8003108:	2201      	movs	r2, #1
 800310a:	4619      	mov	r1, r3
 800310c:	202a      	movs	r0, #42	; 0x2a
 800310e:	f7fd fdb7 	bl	8000c80 <CC1120_SpiWriteReg>

	// initialize the timerB, with the beacon perdiod
	//cc1120_cfg_fs_autocal(CC1101_AUTOCAL_NEVER);
	//CC1120_SpiReadReg(CC112X_SETTLING_CFG, &regCh, 1);

	swtimerInit();
 8003112:	f7ff fe7b 	bl	8002e0c <swtimerInit>
	h_timeSlot_timer = swtimerGetHandle();
 8003116:	f7ff ffb5 	bl	8003084 <swtimerGetHandle>
 800311a:	4603      	mov	r3, r0
 800311c:	81fb      	strh	r3, [r7, #14]
	swtimerSet(h_timeSlot_timer, 100, LOOP_TIME, slot_alarm, NULL  );
 800311e:	89fb      	ldrh	r3, [r7, #14]
 8003120:	b2d8      	uxtb	r0, r3
 8003122:	2300      	movs	r3, #0
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	4b3c      	ldr	r3, [pc, #240]	; (8003218 <mac_init+0x164>)
 8003128:	2202      	movs	r2, #2
 800312a:	2164      	movs	r1, #100	; 0x64
 800312c:	f7ff ff3a 	bl	8002fa4 <swtimerSet>
	swtimerStart(h_timeSlot_timer);
 8003130:	89fb      	ldrh	r3, [r7, #14]
 8003132:	b2db      	uxtb	r3, r3
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff ff79 	bl	800302c <swtimerStart>
//	timerB_init();
//	timerB_set_alarm_from_now(ALARM_SLOTS, 312, 327);
//	timerB_register_cb(ALARM_SLOTS, slot_alarm);
	//HAL_TIM_Base_Start_IT(&htim4);
	// set IDLE state, flush everything
	cc1120_cmd_idle();
 800313a:	f7fe f88b 	bl	8001254 <cc1120_cmd_idle>
	cc1120_cmd_flush_rx();
 800313e:	203a      	movs	r0, #58	; 0x3a
 8003140:	f7fd fcc4 	bl	8000acc <CC1120_SpiCmdStrobe>
	cc1120_cmd_flush_tx();
 8003144:	203b      	movs	r0, #59	; 0x3b
 8003146:	f7fd fcc1 	bl	8000acc <CC1120_SpiCmdStrobe>

// configure irq

	//cc1120_gdo0_int_clear();
	//cc1120_gdo2_int_clear();
	__HAL_GPIO_EXTI_CLEAR_FLAG(EXTI1_IRQn);
 800314a:	4b34      	ldr	r3, [pc, #208]	; (800321c <mac_init+0x168>)
 800314c:	2207      	movs	r2, #7
 800314e:	615a      	str	r2, [r3, #20]
	// configure irq
	/* EXTI interrupt init*/
//	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
//	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

	HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8003150:	2200      	movs	r2, #0
 8003152:	2105      	movs	r1, #5
 8003154:	2007      	movs	r0, #7
 8003156:	f001 f874 	bl	8004242 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800315a:	2007      	movs	r0, #7
 800315c:	f001 f88d 	bl	800427a <HAL_NVIC_EnableIRQ>

	// configure the beacon frame
	beacon_msg.hdr.length = BEACON_LENGTH-1;
 8003160:	4b2f      	ldr	r3, [pc, #188]	; (8003220 <mac_init+0x16c>)
 8003162:	2215      	movs	r2, #21
 8003164:	701a      	strb	r2, [r3, #0]
	HEADER_SET_ADDR(beacon_msg.hdr, node_addr);
 8003166:	4b2e      	ldr	r3, [pc, #184]	; (8003220 <mac_init+0x16c>)
 8003168:	785b      	ldrb	r3, [r3, #1]
 800316a:	b25b      	sxtb	r3, r3
 800316c:	f023 030f 	bic.w	r3, r3, #15
 8003170:	b25a      	sxtb	r2, r3
 8003172:	4b2c      	ldr	r3, [pc, #176]	; (8003224 <mac_init+0x170>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	b25b      	sxtb	r3, r3
 8003178:	f003 030f 	and.w	r3, r3, #15
 800317c:	b25b      	sxtb	r3, r3
 800317e:	4313      	orrs	r3, r2
 8003180:	b25b      	sxtb	r3, r3
 8003182:	b2da      	uxtb	r2, r3
 8003184:	4b26      	ldr	r3, [pc, #152]	; (8003220 <mac_init+0x16c>)
 8003186:	705a      	strb	r2, [r3, #1]
	HEADER_SET_TYPE(beacon_msg.hdr,BEACON_TYPE);
 8003188:	4b25      	ldr	r3, [pc, #148]	; (8003220 <mac_init+0x16c>)
 800318a:	785b      	ldrb	r3, [r3, #1]
 800318c:	b25b      	sxtb	r3, r3
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	b25b      	sxtb	r3, r3
 8003194:	f043 0310 	orr.w	r3, r3, #16
 8003198:	b25b      	sxtb	r3, r3
 800319a:	b2da      	uxtb	r2, r3
 800319c:	4b20      	ldr	r3, [pc, #128]	; (8003220 <mac_init+0x16c>)
 800319e:	705a      	strb	r2, [r3, #1]
	beacon_msg.seq=0;
 80031a0:	4b1f      	ldr	r3, [pc, #124]	; (8003220 <mac_init+0x16c>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	709a      	strb	r2, [r3, #2]
    #if 1
	for ( int i = 0 ; i < BEACON_PACKET_SIZE_MAX ; i++)
 80031a6:	2300      	movs	r3, #0
 80031a8:	613b      	str	r3, [r7, #16]
 80031aa:	e008      	b.n	80031be <mac_init+0x10a>
	{
		beacon_msg.data[i] = 0;
 80031ac:	4a1c      	ldr	r2, [pc, #112]	; (8003220 <mac_init+0x16c>)
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	4413      	add	r3, r2
 80031b2:	3304      	adds	r3, #4
 80031b4:	2200      	movs	r2, #0
 80031b6:	701a      	strb	r2, [r3, #0]
	for ( int i = 0 ; i < BEACON_PACKET_SIZE_MAX ; i++)
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	3301      	adds	r3, #1
 80031bc:	613b      	str	r3, [r7, #16]
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	2b11      	cmp	r3, #17
 80031c2:	ddf3      	ble.n	80031ac <mac_init+0xf8>
	}  // 여기네
    #endif 
    	// initialize the slot management service
	tdma_mgt_init();
 80031c4:	f000 f994 	bl	80034f0 <tdma_mgt_init>
	// reset slot count
	slot_count = -1;
 80031c8:	4b17      	ldr	r3, [pc, #92]	; (8003228 <mac_init+0x174>)
 80031ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031ce:	801a      	strh	r2, [r3, #0]

	// init the data slots
	for (i=0;i<DATA_SLOT_MAX;i++) {
 80031d0:	2300      	movs	r3, #0
 80031d2:	617b      	str	r3, [r7, #20]
 80031d4:	e015      	b.n	8003202 <mac_init+0x14e>
		mac_slots[i].ready=0;
 80031d6:	4915      	ldr	r1, [pc, #84]	; (800322c <mac_init+0x178>)
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	4613      	mov	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	1a9b      	subs	r3, r3, r2
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	440b      	add	r3, r1
 80031e4:	330d      	adds	r3, #13
 80031e6:	2200      	movs	r2, #0
 80031e8:	701a      	strb	r2, [r3, #0]
		mac_slots[i].addr=0;
 80031ea:	4910      	ldr	r1, [pc, #64]	; (800322c <mac_init+0x178>)
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	4613      	mov	r3, r2
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	1a9b      	subs	r3, r3, r2
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	440b      	add	r3, r1
 80031f8:	2200      	movs	r2, #0
 80031fa:	701a      	strb	r2, [r3, #0]
	for (i=0;i<DATA_SLOT_MAX;i++) {
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	3301      	adds	r3, #1
 8003200:	617b      	str	r3, [r7, #20]
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	2b09      	cmp	r3, #9
 8003206:	dde6      	ble.n	80031d6 <mac_init+0x122>
	}

	// reset the callback
	new_data_cb = 0x0;
 8003208:	4b09      	ldr	r3, [pc, #36]	; (8003230 <mac_init+0x17c>)
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]

}
 800320e:	bf00      	nop
 8003210:	3718      	adds	r7, #24
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	08003275 	.word	0x08003275
 800321c:	40013c00 	.word	0x40013c00
 8003220:	200002b4 	.word	0x200002b4
 8003224:	20000224 	.word	0x20000224
 8003228:	200002de 	.word	0x200002de
 800322c:	20000228 	.word	0x20000228
 8003230:	200002e0 	.word	0x200002e0

08003234 <mac_set_new_data_cb>:

void mac_set_new_data_cb(uint16_t (*cb)(int16_t)) {
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
    new_data_cb = cb;
 800323c:	4a04      	ldr	r2, [pc, #16]	; (8003250 <mac_set_new_data_cb+0x1c>)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6013      	str	r3, [r2, #0]
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	200002e0 	.word	0x200002e0

08003254 <set_rx>:


void set_rx(void) {
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
    // idle, flush
    cc1120_cmd_idle();
 8003258:	f7fd fffc 	bl	8001254 <cc1120_cmd_idle>
    cc1120_cmd_flush_rx();
 800325c:	203a      	movs	r0, #58	; 0x3a
 800325e:	f7fd fc35 	bl	8000acc <CC1120_SpiCmdStrobe>
    cc1120_cmd_flush_tx();
 8003262:	203b      	movs	r0, #59	; 0x3b
 8003264:	f7fd fc32 	bl	8000acc <CC1120_SpiCmdStrobe>
    // set RX
    cc1120_cmd_rx();
 8003268:	2034      	movs	r0, #52	; 0x34
 800326a:	f7fd fc2f 	bl	8000acc <CC1120_SpiCmdStrobe>
    // clear interrupt
    //cc1120_gdo0_int_clear();
    //cc1120_gdo2_int_clear();
	//__HAL_GPIO_EXTI_CLEAR_FLAG(EXTI9_5_IRQn);
	//__HAL_GPIO_EXTI_CLEAR_FLAG(EXTI15_10_IRQn);
}
 800326e:	bf00      	nop
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <slot_alarm>:

volatile uint16_t slotTimeIniit;
//uint16_t slot_alarm(void ) {
void slot_alarm(void *arg) {
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
    slot_count++;
 800327c:	4b0d      	ldr	r3, [pc, #52]	; (80032b4 <slot_alarm+0x40>)
 800327e:	881b      	ldrh	r3, [r3, #0]
 8003280:	3301      	adds	r3, #1
 8003282:	b29a      	uxth	r2, r3
 8003284:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <slot_alarm+0x40>)
 8003286:	801a      	strh	r2, [r3, #0]
   // HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
#if 1
//    beacon_send();
    if (slot_count>CTRL_SLOT)
 8003288:	4b0a      	ldr	r3, [pc, #40]	; (80032b4 <slot_alarm+0x40>)
 800328a:	881b      	ldrh	r3, [r3, #0]
 800328c:	2b0b      	cmp	r3, #11
 800328e:	d905      	bls.n	800329c <slot_alarm+0x28>
    {
        slot_count = BEACON_SLOT;
 8003290:	4b08      	ldr	r3, [pc, #32]	; (80032b4 <slot_alarm+0x40>)
 8003292:	2200      	movs	r2, #0
 8003294:	801a      	strh	r2, [r3, #0]
        //LED_BLUE_ON();
        beacon_send();
 8003296:	f000 f869 	bl	800336c <beacon_send>
    else
    {
    	//cc1120_gdo0_register_callback(slot_control);
    }
#endif
}
 800329a:	e006      	b.n	80032aa <slot_alarm+0x36>
    else if (slot_count<=DATA_SLOT_MAX)
 800329c:	4b05      	ldr	r3, [pc, #20]	; (80032b4 <slot_alarm+0x40>)
 800329e:	881b      	ldrh	r3, [r3, #0]
 80032a0:	2b0a      	cmp	r3, #10
 80032a2:	d802      	bhi.n	80032aa <slot_alarm+0x36>
    	cc1120_gdo0_register_callback(slot_data);
 80032a4:	4804      	ldr	r0, [pc, #16]	; (80032b8 <slot_alarm+0x44>)
 80032a6:	f7fd fbb1 	bl	8000a0c <cc1120_gdo0_register_callback>
}
 80032aa:	bf00      	nop
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	200002de 	.word	0x200002de
 80032b8:	08003401 	.word	0x08003401

080032bc <sleep_time_set>:



void sleep_time_set(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
    uint8_t temp_id = 1;
 80032c2:	2301      	movs	r3, #1
 80032c4:	71fb      	strb	r3, [r7, #7]
        beacon_msg.data[i] = node_id[temp_id].min;
        beacon_msg.data[i+1] = node_id[temp_id].sec;
        temp_id++;
    }
    #endif 
    beacon_msg.data[0] = node_id[0].min;  // 각 ID sleep time  => id 1 min
 80032c6:	4b27      	ldr	r3, [pc, #156]	; (8003364 <sleep_time_set+0xa8>)
 80032c8:	785a      	ldrb	r2, [r3, #1]
 80032ca:	4b27      	ldr	r3, [pc, #156]	; (8003368 <sleep_time_set+0xac>)
 80032cc:	711a      	strb	r2, [r3, #4]
    beacon_msg.data[1] = node_id[0].sec;  // => id 1 sec
 80032ce:	4b25      	ldr	r3, [pc, #148]	; (8003364 <sleep_time_set+0xa8>)
 80032d0:	781a      	ldrb	r2, [r3, #0]
 80032d2:	4b25      	ldr	r3, [pc, #148]	; (8003368 <sleep_time_set+0xac>)
 80032d4:	715a      	strb	r2, [r3, #5]
    beacon_msg.data[2] = node_id[1].min;  // => id 2 min
 80032d6:	4b23      	ldr	r3, [pc, #140]	; (8003364 <sleep_time_set+0xa8>)
 80032d8:	78da      	ldrb	r2, [r3, #3]
 80032da:	4b23      	ldr	r3, [pc, #140]	; (8003368 <sleep_time_set+0xac>)
 80032dc:	719a      	strb	r2, [r3, #6]
    beacon_msg.data[3] = node_id[1].sec;
 80032de:	4b21      	ldr	r3, [pc, #132]	; (8003364 <sleep_time_set+0xa8>)
 80032e0:	789a      	ldrb	r2, [r3, #2]
 80032e2:	4b21      	ldr	r3, [pc, #132]	; (8003368 <sleep_time_set+0xac>)
 80032e4:	71da      	strb	r2, [r3, #7]
    beacon_msg.data[4] = node_id[2].min;
 80032e6:	4b1f      	ldr	r3, [pc, #124]	; (8003364 <sleep_time_set+0xa8>)
 80032e8:	795a      	ldrb	r2, [r3, #5]
 80032ea:	4b1f      	ldr	r3, [pc, #124]	; (8003368 <sleep_time_set+0xac>)
 80032ec:	721a      	strb	r2, [r3, #8]
    beacon_msg.data[5] = node_id[2].sec;
 80032ee:	4b1d      	ldr	r3, [pc, #116]	; (8003364 <sleep_time_set+0xa8>)
 80032f0:	791a      	ldrb	r2, [r3, #4]
 80032f2:	4b1d      	ldr	r3, [pc, #116]	; (8003368 <sleep_time_set+0xac>)
 80032f4:	725a      	strb	r2, [r3, #9]
    beacon_msg.data[6] = node_id[3].min;
 80032f6:	4b1b      	ldr	r3, [pc, #108]	; (8003364 <sleep_time_set+0xa8>)
 80032f8:	79da      	ldrb	r2, [r3, #7]
 80032fa:	4b1b      	ldr	r3, [pc, #108]	; (8003368 <sleep_time_set+0xac>)
 80032fc:	729a      	strb	r2, [r3, #10]
    beacon_msg.data[7] = node_id[3].sec;
 80032fe:	4b19      	ldr	r3, [pc, #100]	; (8003364 <sleep_time_set+0xa8>)
 8003300:	799a      	ldrb	r2, [r3, #6]
 8003302:	4b19      	ldr	r3, [pc, #100]	; (8003368 <sleep_time_set+0xac>)
 8003304:	72da      	strb	r2, [r3, #11]
    beacon_msg.data[8] = node_id[4].min;
 8003306:	4b17      	ldr	r3, [pc, #92]	; (8003364 <sleep_time_set+0xa8>)
 8003308:	7a5a      	ldrb	r2, [r3, #9]
 800330a:	4b17      	ldr	r3, [pc, #92]	; (8003368 <sleep_time_set+0xac>)
 800330c:	731a      	strb	r2, [r3, #12]
    beacon_msg.data[9] = node_id[4].sec;
 800330e:	4b15      	ldr	r3, [pc, #84]	; (8003364 <sleep_time_set+0xa8>)
 8003310:	7a1a      	ldrb	r2, [r3, #8]
 8003312:	4b15      	ldr	r3, [pc, #84]	; (8003368 <sleep_time_set+0xac>)
 8003314:	735a      	strb	r2, [r3, #13]
    beacon_msg.data[10] = node_id[5].min;
 8003316:	4b13      	ldr	r3, [pc, #76]	; (8003364 <sleep_time_set+0xa8>)
 8003318:	7ada      	ldrb	r2, [r3, #11]
 800331a:	4b13      	ldr	r3, [pc, #76]	; (8003368 <sleep_time_set+0xac>)
 800331c:	739a      	strb	r2, [r3, #14]
    beacon_msg.data[11] = node_id[5].sec;
 800331e:	4b11      	ldr	r3, [pc, #68]	; (8003364 <sleep_time_set+0xa8>)
 8003320:	7a9a      	ldrb	r2, [r3, #10]
 8003322:	4b11      	ldr	r3, [pc, #68]	; (8003368 <sleep_time_set+0xac>)
 8003324:	73da      	strb	r2, [r3, #15]
    beacon_msg.data[12] = node_id[6].min;
 8003326:	4b0f      	ldr	r3, [pc, #60]	; (8003364 <sleep_time_set+0xa8>)
 8003328:	7b5a      	ldrb	r2, [r3, #13]
 800332a:	4b0f      	ldr	r3, [pc, #60]	; (8003368 <sleep_time_set+0xac>)
 800332c:	741a      	strb	r2, [r3, #16]
    beacon_msg.data[13] = node_id[6].sec;
 800332e:	4b0d      	ldr	r3, [pc, #52]	; (8003364 <sleep_time_set+0xa8>)
 8003330:	7b1a      	ldrb	r2, [r3, #12]
 8003332:	4b0d      	ldr	r3, [pc, #52]	; (8003368 <sleep_time_set+0xac>)
 8003334:	745a      	strb	r2, [r3, #17]
    beacon_msg.data[14] = node_id[7].min;
 8003336:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <sleep_time_set+0xa8>)
 8003338:	7bda      	ldrb	r2, [r3, #15]
 800333a:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <sleep_time_set+0xac>)
 800333c:	749a      	strb	r2, [r3, #18]
    beacon_msg.data[15] = node_id[7].sec;
 800333e:	4b09      	ldr	r3, [pc, #36]	; (8003364 <sleep_time_set+0xa8>)
 8003340:	7b9a      	ldrb	r2, [r3, #14]
 8003342:	4b09      	ldr	r3, [pc, #36]	; (8003368 <sleep_time_set+0xac>)
 8003344:	74da      	strb	r2, [r3, #19]
    beacon_msg.data[16] = node_id[8].min;
 8003346:	4b07      	ldr	r3, [pc, #28]	; (8003364 <sleep_time_set+0xa8>)
 8003348:	7c5a      	ldrb	r2, [r3, #17]
 800334a:	4b07      	ldr	r3, [pc, #28]	; (8003368 <sleep_time_set+0xac>)
 800334c:	751a      	strb	r2, [r3, #20]
    beacon_msg.data[17] = node_id[8].sec;
 800334e:	4b05      	ldr	r3, [pc, #20]	; (8003364 <sleep_time_set+0xa8>)
 8003350:	7c1a      	ldrb	r2, [r3, #16]
 8003352:	4b05      	ldr	r3, [pc, #20]	; (8003368 <sleep_time_set+0xac>)
 8003354:	755a      	strb	r2, [r3, #21]
     
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	20000210 	.word	0x20000210
 8003368:	200002b4 	.word	0x200002b4

0800336c <beacon_send>:
uint16_t beacon_send(void) {
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
//    LED_GREEN_OFF();
//    LED_BLUE_OFF();
	uint8_t statusByte;
    // flush
#if 1 // tx off and 일시
    cc1120_cmd_idle();
 8003372:	f7fd ff6f 	bl	8001254 <cc1120_cmd_idle>

    cc1120_cmd_flush_rx();
 8003376:	203a      	movs	r0, #58	; 0x3a
 8003378:	f7fd fba8 	bl	8000acc <CC1120_SpiCmdStrobe>
    cc1120_cmd_flush_tx();
 800337c:	203b      	movs	r0, #59	; 0x3b
 800337e:	f7fd fba5 	bl	8000acc <CC1120_SpiCmdStrobe>
#endif
    // calibrate
    //cc1120_cmd_calibrate();

    // config IRQ
	 cc1120_gdo0_register_callback(beacon_sent);
 8003382:	4813      	ldr	r0, [pc, #76]	; (80033d0 <beacon_send+0x64>)
 8003384:	f7fd fb42 	bl	8000a0c <cc1120_gdo0_register_callback>
	//__HAL_GPIO_EXTI_CLEAR_FLAG(EXTI9_5_IRQn);
	//HAL_NVIC_DisableIRQ(EXTI0_IRQn);
	 __HAL_GPIO_EXTI_CLEAR_FLAG(EXTI1_IRQn);
 8003388:	4b12      	ldr	r3, [pc, #72]	; (80033d4 <beacon_send+0x68>)
 800338a:	2207      	movs	r2, #7
 800338c:	615a      	str	r2, [r3, #20]

    //CC1120_SpiWriteTxFifo((uint8_t*)&beacon_msg, beacon_msg.hdr.length+1);

    //PacketSend2((uint8_t*)&beacon_msg);
    //CC1120_SpiWriteTxFifo((uint8_t*)&beacon_msg, beacon_msg.hdr.length+1); //
    CC1120_SpiReadReg(CC112X_MARC_STATUS1, &statusByte, 1);
 800338e:	1dfb      	adds	r3, r7, #7
 8003390:	2201      	movs	r2, #1
 8003392:	4619      	mov	r1, r3
 8003394:	f642 7094 	movw	r0, #12180	; 0x2f94
 8003398:	f7fd fca6 	bl	8000ce8 <CC1120_SpiReadReg>
	if (statusByte == 0x07 ||  statusByte == 0x08)
 800339c:	79fb      	ldrb	r3, [r7, #7]
 800339e:	2b07      	cmp	r3, #7
 80033a0:	d002      	beq.n	80033a8 <beacon_send+0x3c>
 80033a2:	79fb      	ldrb	r3, [r7, #7]
 80033a4:	2b08      	cmp	r3, #8
 80033a6:	d103      	bne.n	80033b0 <beacon_send+0x44>
	{
		//Flush FIFO
		cc1120_cmd_flush_tx();
 80033a8:	203b      	movs	r0, #59	; 0x3b
 80033aa:	f7fd fb8f 	bl	8000acc <CC1120_SpiCmdStrobe>
 80033ae:	e007      	b.n	80033c0 <beacon_send+0x54>
		//cc1120_gdo0_register_callback(beacon_sent);
			//__HAL_GPIO_EXTI_CLEAR_FLAG(EXTI0_IRQn);
		//printf("0x%02x\r\n", beacon_msg.ctl  );


        sleep_time_set();
 80033b0:	f7ff ff84 	bl	80032bc <sleep_time_set>
		// Strobe TX to send packet
		send_packet2((uint8_t*)&beacon_msg, beacon_msg.hdr.length);
 80033b4:	4b08      	ldr	r3, [pc, #32]	; (80033d8 <beacon_send+0x6c>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	4619      	mov	r1, r3
 80033ba:	4807      	ldr	r0, [pc, #28]	; (80033d8 <beacon_send+0x6c>)
 80033bc:	f7fd ff6c 	bl	8001298 <send_packet2>
	}
	//LED_BLUE_OFF();
	beacon_msg.ctl=0;
 80033c0:	4b05      	ldr	r3, [pc, #20]	; (80033d8 <beacon_send+0x6c>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	70da      	strb	r2, [r3, #3]



    //printf("***\r\n hdr l %02x\r\n hdr fct %02x\r\n seq %02x\r\n ctl %02x\r\n data %02x ***\r\n",beacon_msg.hdr.length,beacon_msg.hdr.fctl,beacon_msg.seq,beacon_msg.ctl, beacon_msg.data);

    return 0;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	080033dd 	.word	0x080033dd
 80033d4:	40013c00 	.word	0x40013c00
 80033d8:	200002b4 	.word	0x200002b4

080033dc <beacon_sent>:

uint16_t beacon_sent(void) {
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
    //beacon_eop_time = timerB_time();
    beacon_msg.seq++;
 80033e0:	4b05      	ldr	r3, [pc, #20]	; (80033f8 <beacon_sent+0x1c>)
 80033e2:	789b      	ldrb	r3, [r3, #2]
 80033e4:	3301      	adds	r3, #1
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	4b03      	ldr	r3, [pc, #12]	; (80033f8 <beacon_sent+0x1c>)
 80033ea:	709a      	strb	r2, [r3, #2]

    cc1120_gdo0_register_callback(slot_data);
 80033ec:	4803      	ldr	r0, [pc, #12]	; (80033fc <beacon_sent+0x20>)
 80033ee:	f7fd fb0d 	bl	8000a0c <cc1120_gdo0_register_callback>

    return 0;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	200002b4 	.word	0x200002b4
 80033fc:	08003401 	.word	0x08003401

08003400 <slot_data>:


#define RX_FIFO_ERROR       0x11

uint8_t src;
uint16_t slot_data(void) {
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
    uint8_t footerp[2];
    //now = timerB_time();
    //LED_WHITE_ON();
    // test CRC and bytes in FIFO
    //len = cc1120_status_rxbytes();
    CC1120_SpiReadReg(CC112X_NUM_RXBYTES, &rxBytes, 1);
 8003406:	1dbb      	adds	r3, r7, #6
 8003408:	2201      	movs	r2, #1
 800340a:	4619      	mov	r1, r3
 800340c:	f642 70d7 	movw	r0, #12247	; 0x2fd7
 8003410:	f7fd fc6a 	bl	8000ce8 <CC1120_SpiReadReg>
	//CC1120_SpiReadReg(CC112X_NUM_RXBYTES, &rxBytes2, 1);
    len = rxBytes;
 8003414:	79bb      	ldrb	r3, [r7, #6]
 8003416:	71fb      	strb	r3, [r7, #7]

    // check fifo length
    if (len==0) {
 8003418:	79fb      	ldrb	r3, [r7, #7]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <slot_data+0x22>
        // empty packet
        //~ printf("empty");
        return 0;
 800341e:	2300      	movs	r3, #0
 8003420:	e055      	b.n	80034ce <slot_data+0xce>
    } else if (len>64) {
 8003422:	79fb      	ldrb	r3, [r7, #7]
 8003424:	2b40      	cmp	r3, #64	; 0x40
 8003426:	d903      	bls.n	8003430 <slot_data+0x30>
        // overflow, flush
        //~ printf("over");
        set_rx();
 8003428:	f7ff ff14 	bl	8003254 <set_rx>
        return 0;
 800342c:	2300      	movs	r3, #0
 800342e:	e04e      	b.n	80034ce <slot_data+0xce>
//    	return 0;
//    }


    // get length, and check
    CC1120_SpiReadRxFifo((uint8_t*)&data_msg.hdr.length, 1);
 8003430:	2101      	movs	r1, #1
 8003432:	4829      	ldr	r0, [pc, #164]	; (80034d8 <slot_data+0xd8>)
 8003434:	f7fd fc9f 	bl	8000d76 <CC1120_SpiReadRxFifo>
    if ( data_msg.hdr.length > (DATA_LENGTH-1))
 8003438:	4b27      	ldr	r3, [pc, #156]	; (80034d8 <slot_data+0xd8>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	2b0d      	cmp	r3, #13
 800343e:	d903      	bls.n	8003448 <slot_data+0x48>
    {
    	set_rx();
 8003440:	f7ff ff08 	bl	8003254 <set_rx>
    	return 0;
 8003444:	2300      	movs	r3, #0
 8003446:	e042      	b.n	80034ce <slot_data+0xce>
    }

    // length is good
    // get data
    CC1120_SpiReadRxFifo((uint8_t*)&data_msg+1, data_msg.hdr.length);
 8003448:	4a24      	ldr	r2, [pc, #144]	; (80034dc <slot_data+0xdc>)
 800344a:	4b23      	ldr	r3, [pc, #140]	; (80034d8 <slot_data+0xd8>)
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	4619      	mov	r1, r3
 8003450:	4610      	mov	r0, r2
 8003452:	f7fd fc90 	bl	8000d76 <CC1120_SpiReadRxFifo>
    // get status
    CC1120_SpiReadRxFifo((uint8_t*)&footer, FOOTER_LENGTH);
 8003456:	2102      	movs	r1, #2
 8003458:	4821      	ldr	r0, [pc, #132]	; (80034e0 <slot_data+0xe0>)
 800345a:	f7fd fc8c 	bl	8000d76 <CC1120_SpiReadRxFifo>
    //printf("id %02x| ",data_msg.hdr.fctl &0x0F);
    // check CRC
	if ( (footer.crc&0x80)==0 ) {
 800345e:	4b20      	ldr	r3, [pc, #128]	; (80034e0 <slot_data+0xe0>)
 8003460:	785b      	ldrb	r3, [r3, #1]
 8003462:	b25b      	sxtb	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	db01      	blt.n	800346c <slot_data+0x6c>
		// bad crc, exit
		//~ printf("crc");

		//printf("crc fail\r\n");
		//printf("crc\r\n");
		return 0;
 8003468:	2300      	movs	r3, #0
 800346a:	e030      	b.n	80034ce <slot_data+0xce>
	}

	// check type, destination
	if (HEADER_GET_TYPE(data_msg.hdr) != DATA_TYPE) {
 800346c:	4b1a      	ldr	r3, [pc, #104]	; (80034d8 <slot_data+0xd8>)
 800346e:	785b      	ldrb	r3, [r3, #1]
 8003470:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003474:	2b30      	cmp	r3, #48	; 0x30
 8003476:	d001      	beq.n	800347c <slot_data+0x7c>
		//~ printf("not_data");
		return 0;
 8003478:	2300      	movs	r3, #0
 800347a:	e028      	b.n	80034ce <slot_data+0xce>
	}

	// check source corresponds to timeslot
	src = HEADER_GET_ADDR(data_msg.hdr);
 800347c:	4b16      	ldr	r3, [pc, #88]	; (80034d8 <slot_data+0xd8>)
 800347e:	785b      	ldrb	r3, [r3, #1]
 8003480:	f003 030f 	and.w	r3, r3, #15
 8003484:	b2da      	uxtb	r2, r3
 8003486:	4b17      	ldr	r3, [pc, #92]	; (80034e4 <slot_data+0xe4>)
 8003488:	701a      	strb	r2, [r3, #0]
	//  																				data_msg.payload[11],
	//  																				footer.rssi,
	//  																				ETX
	//  										);

    send_to_pc(); // JKU
 800348a:	f7fe f8e3 	bl	8001654 <send_to_pc>

    
	//HAL_UART_Transmit(&huart1, SendToPcBuffer, 33, 10);
	//printf("\r\n");
	// check data has been read
	if (mac_slots[slot_count-1].ready==0) {
 800348e:	4b16      	ldr	r3, [pc, #88]	; (80034e8 <slot_data+0xe8>)
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	1e5a      	subs	r2, r3, #1
 8003494:	4915      	ldr	r1, [pc, #84]	; (80034ec <slot_data+0xec>)
 8003496:	4613      	mov	r3, r2
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	1a9b      	subs	r3, r3, r2
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	440b      	add	r3, r1
 80034a0:	330d      	adds	r3, #13
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10d      	bne.n	80034c6 <slot_data+0xc6>
		//memcpy(mac_slots[slot_count-1].data, data_msg.payload, MAC_PAYLOAD_SIZE);
		mac_slots[slot_count-1].ready = 1;
 80034aa:	4b0f      	ldr	r3, [pc, #60]	; (80034e8 <slot_data+0xe8>)
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	1e5a      	subs	r2, r3, #1
 80034b0:	490e      	ldr	r1, [pc, #56]	; (80034ec <slot_data+0xec>)
 80034b2:	4613      	mov	r3, r2
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	1a9b      	subs	r3, r3, r2
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	440b      	add	r3, r1
 80034bc:	330d      	adds	r3, #13
 80034be:	2201      	movs	r2, #1
 80034c0:	701a      	strb	r2, [r3, #0]

		//printf("slot_count=%d\r\n",slot_count-1);
		// wake the CPU up by returning 1

		return 1;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e003      	b.n	80034ce <slot_data+0xce>
	}
	cc1120_cmd_rx();
 80034c6:	2034      	movs	r0, #52	; 0x34
 80034c8:	f7fd fb00 	bl	8000acc <CC1120_SpiCmdStrobe>
	//cc1120_cmd_rx
	//set_rx();
    return 0;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	200002cc 	.word	0x200002cc
 80034dc:	200002cd 	.word	0x200002cd
 80034e0:	200002dc 	.word	0x200002dc
 80034e4:	200002e4 	.word	0x200002e4
 80034e8:	200002de 	.word	0x200002de
 80034ec:	20000228 	.word	0x20000228

080034f0 <tdma_mgt_init>:
#include "tdma_timings.h"
#include "tdma_frames.h"

static uint8_t slots[DATA_SLOT_MAX];

void tdma_mgt_init(void) {
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
    int16_t i;

    for (i=0;i<DATA_SLOT_MAX;i++) {
 80034f6:	2300      	movs	r3, #0
 80034f8:	80fb      	strh	r3, [r7, #6]
 80034fa:	e00a      	b.n	8003512 <tdma_mgt_init+0x22>
        slots[i] = 0x0;
 80034fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003500:	4a09      	ldr	r2, [pc, #36]	; (8003528 <tdma_mgt_init+0x38>)
 8003502:	2100      	movs	r1, #0
 8003504:	54d1      	strb	r1, [r2, r3]
    for (i=0;i<DATA_SLOT_MAX;i++) {
 8003506:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800350a:	b29b      	uxth	r3, r3
 800350c:	3301      	adds	r3, #1
 800350e:	b29b      	uxth	r3, r3
 8003510:	80fb      	strh	r3, [r7, #6]
 8003512:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003516:	2b09      	cmp	r3, #9
 8003518:	ddf0      	ble.n	80034fc <tdma_mgt_init+0xc>
    }
}
 800351a:	bf00      	nop
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	200002e8 	.word	0x200002e8

0800352c <prvvUARTTxReadyISR>:
 * call pxMBFrameCBTransmitterEmpty( ) which tells the protocol stack that
 * a new character can be sent. The protocol stack will then call
 * xMBPortSerialPutByte( ) to send the character.
 */
static void prvvUARTTxReadyISR( void )
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
    pxMBFrameCBTransmitterEmpty(  );
 8003530:	4b02      	ldr	r3, [pc, #8]	; (800353c <prvvUARTTxReadyISR+0x10>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4798      	blx	r3
}
 8003536:	bf00      	nop
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	200002f8 	.word	0x200002f8

08003540 <prvvUARTRxISR>:
 * processor. This function should then call pxMBFrameCBByteReceived( ). The
 * protocol stack will then call xMBPortSerialGetByte( ) to retrieve the
 * character.
 */
static void prvvUARTRxISR( void )
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
    pxMBFrameCBByteReceived(  );
 8003544:	4b02      	ldr	r3, [pc, #8]	; (8003550 <prvvUARTRxISR+0x10>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4798      	blx	r3
}
 800354a:	bf00      	nop
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	200002f4 	.word	0x200002f4

08003554 <USART2_IRQHandler>:

void Modbus_Rtu_IRQHandler(void)//�����жϽ��շ���
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
		__HAL_UART_CLEAR_FLAG(&Modbus_Rtu_serial,UART_IT_TXE);
		prvvUARTTxReadyISR();//�����ж�
	}
#endif

	uint32_t tmp_flag = __HAL_UART_GET_FLAG(&Modbus_Rtu_serial, UART_FLAG_RXNE);
 800355a:	4b1e      	ldr	r3, [pc, #120]	; (80035d4 <USART2_IRQHandler+0x80>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0320 	and.w	r3, r3, #32
 8003564:	2b20      	cmp	r3, #32
 8003566:	bf0c      	ite	eq
 8003568:	2301      	moveq	r3, #1
 800356a:	2300      	movne	r3, #0
 800356c:	b2db      	uxtb	r3, r3
 800356e:	60fb      	str	r3, [r7, #12]
    uint32_t tmp_it_source = __HAL_UART_GET_IT_SOURCE(&Modbus_Rtu_serial, UART_IT_RXNE);
 8003570:	4b18      	ldr	r3, [pc, #96]	; (80035d4 <USART2_IRQHandler+0x80>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	f003 0320 	and.w	r3, r3, #32
 800357a:	60bb      	str	r3, [r7, #8]
  
    if((tmp_flag != RESET) && (tmp_it_source != RESET)) {
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d010      	beq.n	80035a4 <USART2_IRQHandler+0x50>
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00d      	beq.n	80035a4 <USART2_IRQHandler+0x50>
        prvvUARTRxISR();//�����ж�
 8003588:	f7ff ffda 	bl	8003540 <prvvUARTRxISR>
        __HAL_UART_CLEAR_PEFLAG(&Modbus_Rtu_serial);    
 800358c:	2300      	movs	r3, #0
 800358e:	607b      	str	r3, [r7, #4]
 8003590:	4b10      	ldr	r3, [pc, #64]	; (80035d4 <USART2_IRQHandler+0x80>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	607b      	str	r3, [r7, #4]
 8003598:	4b0e      	ldr	r3, [pc, #56]	; (80035d4 <USART2_IRQHandler+0x80>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	607b      	str	r3, [r7, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
        return;
 80035a2:	e013      	b.n	80035cc <USART2_IRQHandler+0x78>
    }
    
    if((__HAL_UART_GET_FLAG(&Modbus_Rtu_serial, UART_FLAG_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(&Modbus_Rtu_serial, UART_IT_TXE) != RESET)) {
 80035a4:	4b0b      	ldr	r3, [pc, #44]	; (80035d4 <USART2_IRQHandler+0x80>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ae:	2b80      	cmp	r3, #128	; 0x80
 80035b0:	d109      	bne.n	80035c6 <USART2_IRQHandler+0x72>
 80035b2:	4b08      	ldr	r3, [pc, #32]	; (80035d4 <USART2_IRQHandler+0x80>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <USART2_IRQHandler+0x72>
		prvvUARTTxReadyISR();//�����ж�
 80035c0:	f7ff ffb4 	bl	800352c <prvvUARTTxReadyISR>
        return ;
 80035c4:	e002      	b.n	80035cc <USART2_IRQHandler+0x78>
    }

  	// HAL_NVIC_ClearPendingIRQ(Modbus_Rtu_IRQ);
  	HAL_UART_IRQHandler(&Modbus_Rtu_serial);
 80035c6:	4803      	ldr	r0, [pc, #12]	; (80035d4 <USART2_IRQHandler+0x80>)
 80035c8:	f002 fd2c 	bl	8006024 <HAL_UART_IRQHandler>
}
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20000760 	.word	0x20000760

080035d8 <prvvTIMERExpiredISR>:
/* Create an ISR which is called whenever the timer has expired. This function
 * must then call pxMBPortCBTimerExpired( ) to notify the protocol stack that
 * the timer has expired.
 */
static void prvvTIMERExpiredISR( void )
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
    ( void )pxMBPortCBTimerExpired(  );
 80035dc:	4b02      	ldr	r3, [pc, #8]	; (80035e8 <prvvTIMERExpiredISR+0x10>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4798      	blx	r3
}
 80035e2:	bf00      	nop
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	200002fc 	.word	0x200002fc

080035ec <TIM7_IRQHandler>:

/// ��ʱ��4�жϷ������
void Modbus_Rtu_timer_IRQHandler(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
    if(__HAL_TIM_GET_FLAG(&Modbus_Rtu_timer, TIM_FLAG_UPDATE))			// �����жϱ�Ǳ���λ
 80035f0:	4b07      	ldr	r3, [pc, #28]	; (8003610 <TIM7_IRQHandler+0x24>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d106      	bne.n	800360c <TIM7_IRQHandler+0x20>
    {
        __HAL_TIM_CLEAR_FLAG(&Modbus_Rtu_timer, TIM_FLAG_UPDATE);		// ����жϱ��
 80035fe:	4b04      	ldr	r3, [pc, #16]	; (8003610 <TIM7_IRQHandler+0x24>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f06f 0201 	mvn.w	r2, #1
 8003606:	611a      	str	r2, [r3, #16]
        prvvTIMERExpiredISR();								// ֪ͨmodbus3.5���ַ��ȴ�ʱ�䵽
 8003608:	f7ff ffe6 	bl	80035d8 <prvvTIMERExpiredISR>
    }
}
 800360c:	bf00      	nop
 800360e:	bd80      	pop	{r7, pc}
 8003610:	200006d4 	.word	0x200006d4

08003614 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b08a      	sub	sp, #40	; 0x28
 8003618:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800361a:	f107 0314 	add.w	r3, r7, #20
 800361e:	2200      	movs	r2, #0
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	605a      	str	r2, [r3, #4]
 8003624:	609a      	str	r2, [r3, #8]
 8003626:	60da      	str	r2, [r3, #12]
 8003628:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800362a:	2300      	movs	r3, #0
 800362c:	613b      	str	r3, [r7, #16]
 800362e:	4b53      	ldr	r3, [pc, #332]	; (800377c <MX_GPIO_Init+0x168>)
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	4a52      	ldr	r2, [pc, #328]	; (800377c <MX_GPIO_Init+0x168>)
 8003634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003638:	6313      	str	r3, [r2, #48]	; 0x30
 800363a:	4b50      	ldr	r3, [pc, #320]	; (800377c <MX_GPIO_Init+0x168>)
 800363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003642:	613b      	str	r3, [r7, #16]
 8003644:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003646:	2300      	movs	r3, #0
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	4b4c      	ldr	r3, [pc, #304]	; (800377c <MX_GPIO_Init+0x168>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	4a4b      	ldr	r2, [pc, #300]	; (800377c <MX_GPIO_Init+0x168>)
 8003650:	f043 0304 	orr.w	r3, r3, #4
 8003654:	6313      	str	r3, [r2, #48]	; 0x30
 8003656:	4b49      	ldr	r3, [pc, #292]	; (800377c <MX_GPIO_Init+0x168>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	f003 0304 	and.w	r3, r3, #4
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003662:	2300      	movs	r3, #0
 8003664:	60bb      	str	r3, [r7, #8]
 8003666:	4b45      	ldr	r3, [pc, #276]	; (800377c <MX_GPIO_Init+0x168>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366a:	4a44      	ldr	r2, [pc, #272]	; (800377c <MX_GPIO_Init+0x168>)
 800366c:	f043 0301 	orr.w	r3, r3, #1
 8003670:	6313      	str	r3, [r2, #48]	; 0x30
 8003672:	4b42      	ldr	r3, [pc, #264]	; (800377c <MX_GPIO_Init+0x168>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	60bb      	str	r3, [r7, #8]
 800367c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800367e:	2300      	movs	r3, #0
 8003680:	607b      	str	r3, [r7, #4]
 8003682:	4b3e      	ldr	r3, [pc, #248]	; (800377c <MX_GPIO_Init+0x168>)
 8003684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003686:	4a3d      	ldr	r2, [pc, #244]	; (800377c <MX_GPIO_Init+0x168>)
 8003688:	f043 0302 	orr.w	r3, r3, #2
 800368c:	6313      	str	r3, [r2, #48]	; 0x30
 800368e:	4b3b      	ldr	r3, [pc, #236]	; (800377c <MX_GPIO_Init+0x168>)
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	607b      	str	r3, [r7, #4]
 8003698:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
 800369a:	2200      	movs	r2, #0
 800369c:	2113      	movs	r1, #19
 800369e:	4838      	ldr	r0, [pc, #224]	; (8003780 <MX_GPIO_Init+0x16c>)
 80036a0:	f001 f834 	bl	800470c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_7, GPIO_PIN_RESET);
 80036a4:	2200      	movs	r2, #0
 80036a6:	2190      	movs	r1, #144	; 0x90
 80036a8:	4836      	ldr	r0, [pc, #216]	; (8003784 <MX_GPIO_Init+0x170>)
 80036aa:	f001 f82f 	bl	800470c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80036ae:	230a      	movs	r3, #10
 80036b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80036b2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80036b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036b8:	2301      	movs	r3, #1
 80036ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036bc:	f107 0314 	add.w	r3, r7, #20
 80036c0:	4619      	mov	r1, r3
 80036c2:	4830      	ldr	r0, [pc, #192]	; (8003784 <MX_GPIO_Init+0x170>)
 80036c4:	f000 fe86 	bl	80043d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80036c8:	2303      	movs	r3, #3
 80036ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036cc:	2301      	movs	r3, #1
 80036ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d0:	2300      	movs	r3, #0
 80036d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036d4:	2302      	movs	r3, #2
 80036d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d8:	f107 0314 	add.w	r3, r7, #20
 80036dc:	4619      	mov	r1, r3
 80036de:	4828      	ldr	r0, [pc, #160]	; (8003780 <MX_GPIO_Init+0x16c>)
 80036e0:	f000 fe78 	bl	80043d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80036e4:	2310      	movs	r3, #16
 80036e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036e8:	2301      	movs	r3, #1
 80036ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ec:	2300      	movs	r3, #0
 80036ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036f0:	2302      	movs	r3, #2
 80036f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036f4:	f107 0314 	add.w	r3, r7, #20
 80036f8:	4619      	mov	r1, r3
 80036fa:	4821      	ldr	r0, [pc, #132]	; (8003780 <MX_GPIO_Init+0x16c>)
 80036fc:	f000 fe6a 	bl	80043d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003700:	2310      	movs	r3, #16
 8003702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003704:	2301      	movs	r3, #1
 8003706:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003708:	2301      	movs	r3, #1
 800370a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800370c:	2303      	movs	r3, #3
 800370e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003710:	f107 0314 	add.w	r3, r7, #20
 8003714:	4619      	mov	r1, r3
 8003716:	481b      	ldr	r0, [pc, #108]	; (8003784 <MX_GPIO_Init+0x170>)
 8003718:	f000 fe5c 	bl	80043d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800371c:	2380      	movs	r3, #128	; 0x80
 800371e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003720:	2301      	movs	r3, #1
 8003722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003724:	2300      	movs	r3, #0
 8003726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003728:	2300      	movs	r3, #0
 800372a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800372c:	f107 0314 	add.w	r3, r7, #20
 8003730:	4619      	mov	r1, r3
 8003732:	4814      	ldr	r0, [pc, #80]	; (8003784 <MX_GPIO_Init+0x170>)
 8003734:	f000 fe4e 	bl	80043d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_9;
 8003738:	f44f 7308 	mov.w	r3, #544	; 0x220
 800373c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800373e:	2300      	movs	r3, #0
 8003740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003742:	2301      	movs	r3, #1
 8003744:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003746:	f107 0314 	add.w	r3, r7, #20
 800374a:	4619      	mov	r1, r3
 800374c:	480e      	ldr	r0, [pc, #56]	; (8003788 <MX_GPIO_Init+0x174>)
 800374e:	f000 fe41 	bl	80043d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8003752:	2200      	movs	r2, #0
 8003754:	2105      	movs	r1, #5
 8003756:	2007      	movs	r0, #7
 8003758:	f000 fd73 	bl	8004242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800375c:	2007      	movs	r0, #7
 800375e:	f000 fd8c 	bl	800427a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8003762:	2200      	movs	r2, #0
 8003764:	2105      	movs	r1, #5
 8003766:	2009      	movs	r0, #9
 8003768:	f000 fd6b 	bl	8004242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800376c:	2009      	movs	r0, #9
 800376e:	f000 fd84 	bl	800427a <HAL_NVIC_EnableIRQ>

}
 8003772:	bf00      	nop
 8003774:	3728      	adds	r7, #40	; 0x28
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	40023800 	.word	0x40023800
 8003780:	40020000 	.word	0x40020000
 8003784:	40020800 	.word	0x40020800
 8003788:	40020400 	.word	0x40020400

0800378c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003790:	4b13      	ldr	r3, [pc, #76]	; (80037e0 <MX_I2C1_Init+0x54>)
 8003792:	4a14      	ldr	r2, [pc, #80]	; (80037e4 <MX_I2C1_Init+0x58>)
 8003794:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003796:	4b12      	ldr	r3, [pc, #72]	; (80037e0 <MX_I2C1_Init+0x54>)
 8003798:	4a13      	ldr	r2, [pc, #76]	; (80037e8 <MX_I2C1_Init+0x5c>)
 800379a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 800379c:	4b10      	ldr	r3, [pc, #64]	; (80037e0 <MX_I2C1_Init+0x54>)
 800379e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037a2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80037a4:	4b0e      	ldr	r3, [pc, #56]	; (80037e0 <MX_I2C1_Init+0x54>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80037aa:	4b0d      	ldr	r3, [pc, #52]	; (80037e0 <MX_I2C1_Init+0x54>)
 80037ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80037b2:	4b0b      	ldr	r3, [pc, #44]	; (80037e0 <MX_I2C1_Init+0x54>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80037b8:	4b09      	ldr	r3, [pc, #36]	; (80037e0 <MX_I2C1_Init+0x54>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80037be:	4b08      	ldr	r3, [pc, #32]	; (80037e0 <MX_I2C1_Init+0x54>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80037c4:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <MX_I2C1_Init+0x54>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80037ca:	4805      	ldr	r0, [pc, #20]	; (80037e0 <MX_I2C1_Init+0x54>)
 80037cc:	f000 ffd0 	bl	8004770 <HAL_I2C_Init>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80037d6:	f000 f8f7 	bl	80039c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80037da:	bf00      	nop
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	20000620 	.word	0x20000620
 80037e4:	40005400 	.word	0x40005400
 80037e8:	00061a80 	.word	0x00061a80

080037ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08a      	sub	sp, #40	; 0x28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f4:	f107 0314 	add.w	r3, r7, #20
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	605a      	str	r2, [r3, #4]
 80037fe:	609a      	str	r2, [r3, #8]
 8003800:	60da      	str	r2, [r3, #12]
 8003802:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a19      	ldr	r2, [pc, #100]	; (8003870 <HAL_I2C_MspInit+0x84>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d12b      	bne.n	8003866 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800380e:	2300      	movs	r3, #0
 8003810:	613b      	str	r3, [r7, #16]
 8003812:	4b18      	ldr	r3, [pc, #96]	; (8003874 <HAL_I2C_MspInit+0x88>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	4a17      	ldr	r2, [pc, #92]	; (8003874 <HAL_I2C_MspInit+0x88>)
 8003818:	f043 0302 	orr.w	r3, r3, #2
 800381c:	6313      	str	r3, [r2, #48]	; 0x30
 800381e:	4b15      	ldr	r3, [pc, #84]	; (8003874 <HAL_I2C_MspInit+0x88>)
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	613b      	str	r3, [r7, #16]
 8003828:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800382a:	23c0      	movs	r3, #192	; 0xc0
 800382c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800382e:	2312      	movs	r3, #18
 8003830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003832:	2301      	movs	r3, #1
 8003834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003836:	2300      	movs	r3, #0
 8003838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800383a:	2304      	movs	r3, #4
 800383c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800383e:	f107 0314 	add.w	r3, r7, #20
 8003842:	4619      	mov	r1, r3
 8003844:	480c      	ldr	r0, [pc, #48]	; (8003878 <HAL_I2C_MspInit+0x8c>)
 8003846:	f000 fdc5 	bl	80043d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800384a:	2300      	movs	r3, #0
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	4b09      	ldr	r3, [pc, #36]	; (8003874 <HAL_I2C_MspInit+0x88>)
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	4a08      	ldr	r2, [pc, #32]	; (8003874 <HAL_I2C_MspInit+0x88>)
 8003854:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003858:	6413      	str	r3, [r2, #64]	; 0x40
 800385a:	4b06      	ldr	r3, [pc, #24]	; (8003874 <HAL_I2C_MspInit+0x88>)
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003866:	bf00      	nop
 8003868:	3728      	adds	r7, #40	; 0x28
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40005400 	.word	0x40005400
 8003874:	40023800 	.word	0x40023800
 8003878:	40020400 	.word	0x40020400

0800387c <mac_new_data>:
}

uint16_t mac_new_data(int16_t slot);
volatile int16_t mac_new_dataslot;

uint16_t mac_new_data(int16_t slot) {
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	4603      	mov	r3, r0
 8003884:	80fb      	strh	r3, [r7, #6]
    mac_new_dataslot = slot;
 8003886:	4a05      	ldr	r2, [pc, #20]	; (800389c <mac_new_data+0x20>)
 8003888:	88fb      	ldrh	r3, [r7, #6]
 800388a:	8013      	strh	r3, [r2, #0]
    // return 1 to wake the cpu up
    return 1;
 800388c:	2301      	movs	r3, #1
}
 800388e:	4618      	mov	r0, r3
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	20000674 	.word	0x20000674

080038a0 <main>:
/**
  * @brief  The application entry point. 
  * @retval int
  */
int main(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80038a4:	f000 fb5c 	bl	8003f60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80038a8:	f000 f824 	bl	80038f4 <SystemClock_Config>
  //stm32_flash_read(0x80000 , &readTest, 4);

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80038ac:	f7ff feb2 	bl	8003614 <MX_GPIO_Init>
  MX_I2C1_Init();
 80038b0:	f7ff ff6c 	bl	800378c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80038b4:	f000 fa4a 	bl	8003d4c <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80038b8:	f000 f88c 	bl	80039d4 <MX_SPI1_Init>
  MX_TIM7_Init();
 80038bc:	f000 f9e8 	bl	8003c90 <MX_TIM7_Init>
  MX_USART2_UART_Init();
 80038c0:	f000 fa6e 	bl	8003da0 <MX_USART2_UART_Init>
  eMBEnable();
#endif

  /* USER CODE BEGIN 2 */

  uartRingBuff_init();
 80038c4:	f7fd fd46 	bl	8001354 <uartRingBuff_init>

  //Voltameter_Port_Init();
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 80038c8:	4b08      	ldr	r3, [pc, #32]	; (80038ec <main+0x4c>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68da      	ldr	r2, [r3, #12]
 80038ce:	4b07      	ldr	r3, [pc, #28]	; (80038ec <main+0x4c>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f042 0220 	orr.w	r2, r2, #32
 80038d6:	60da      	str	r2, [r3, #12]

#if 1
	mac_init(0);
 80038d8:	2000      	movs	r0, #0
 80038da:	f7ff fbeb 	bl	80030b4 <mac_init>
	mac_set_new_data_cb(mac_new_data);
 80038de:	4804      	ldr	r0, [pc, #16]	; (80038f0 <main+0x50>)
 80038e0:	f7ff fca8 	bl	8003234 <mac_set_new_data_cb>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uart2_receive_func();
 80038e4:	f7fd fe04 	bl	80014f0 <uart2_receive_func>
 80038e8:	e7fc      	b.n	80038e4 <main+0x44>
 80038ea:	bf00      	nop
 80038ec:	2000071c 	.word	0x2000071c
 80038f0:	0800387d 	.word	0x0800387d

080038f4 <SystemClock_Config>:
  }
#endif
}

void SystemClock_Config(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b094      	sub	sp, #80	; 0x50
 80038f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80038fa:	f107 0320 	add.w	r3, r7, #32
 80038fe:	2230      	movs	r2, #48	; 0x30
 8003900:	2100      	movs	r1, #0
 8003902:	4618      	mov	r0, r3
 8003904:	f003 fafa 	bl	8006efc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003908:	f107 030c 	add.w	r3, r7, #12
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	605a      	str	r2, [r3, #4]
 8003912:	609a      	str	r2, [r3, #8]
 8003914:	60da      	str	r2, [r3, #12]
 8003916:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003918:	2300      	movs	r3, #0
 800391a:	60bb      	str	r3, [r7, #8]
 800391c:	4b28      	ldr	r3, [pc, #160]	; (80039c0 <SystemClock_Config+0xcc>)
 800391e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003920:	4a27      	ldr	r2, [pc, #156]	; (80039c0 <SystemClock_Config+0xcc>)
 8003922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003926:	6413      	str	r3, [r2, #64]	; 0x40
 8003928:	4b25      	ldr	r3, [pc, #148]	; (80039c0 <SystemClock_Config+0xcc>)
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003930:	60bb      	str	r3, [r7, #8]
 8003932:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003934:	2300      	movs	r3, #0
 8003936:	607b      	str	r3, [r7, #4]
 8003938:	4b22      	ldr	r3, [pc, #136]	; (80039c4 <SystemClock_Config+0xd0>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a21      	ldr	r2, [pc, #132]	; (80039c4 <SystemClock_Config+0xd0>)
 800393e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003942:	6013      	str	r3, [r2, #0]
 8003944:	4b1f      	ldr	r3, [pc, #124]	; (80039c4 <SystemClock_Config+0xd0>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800394c:	607b      	str	r3, [r7, #4]
 800394e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003950:	2301      	movs	r3, #1
 8003952:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003954:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003958:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800395a:	2302      	movs	r3, #2
 800395c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800395e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003962:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003964:	2304      	movs	r3, #4
 8003966:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003968:	23a8      	movs	r3, #168	; 0xa8
 800396a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800396c:	2302      	movs	r3, #2
 800396e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003970:	2304      	movs	r3, #4
 8003972:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003974:	f107 0320 	add.w	r3, r7, #32
 8003978:	4618      	mov	r0, r3
 800397a:	f001 f83d 	bl	80049f8 <HAL_RCC_OscConfig>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003984:	f000 f820 	bl	80039c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003988:	230f      	movs	r3, #15
 800398a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800398c:	2302      	movs	r3, #2
 800398e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003990:	2300      	movs	r3, #0
 8003992:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003994:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003998:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800399a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800399e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80039a0:	f107 030c 	add.w	r3, r7, #12
 80039a4:	2105      	movs	r1, #5
 80039a6:	4618      	mov	r0, r3
 80039a8:	f001 fa9e 	bl	8004ee8 <HAL_RCC_ClockConfig>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80039b2:	f000 f809 	bl	80039c8 <Error_Handler>
  }
}
 80039b6:	bf00      	nop
 80039b8:	3750      	adds	r7, #80	; 0x50
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	40023800 	.word	0x40023800
 80039c4:	40007000 	.word	0x40007000

080039c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80039cc:	b672      	cpsid	i
}
 80039ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80039d0:	e7fe      	b.n	80039d0 <Error_Handler+0x8>
	...

080039d4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80039d8:	4b17      	ldr	r3, [pc, #92]	; (8003a38 <MX_SPI1_Init+0x64>)
 80039da:	4a18      	ldr	r2, [pc, #96]	; (8003a3c <MX_SPI1_Init+0x68>)
 80039dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80039de:	4b16      	ldr	r3, [pc, #88]	; (8003a38 <MX_SPI1_Init+0x64>)
 80039e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80039e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80039e6:	4b14      	ldr	r3, [pc, #80]	; (8003a38 <MX_SPI1_Init+0x64>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80039ec:	4b12      	ldr	r3, [pc, #72]	; (8003a38 <MX_SPI1_Init+0x64>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80039f2:	4b11      	ldr	r3, [pc, #68]	; (8003a38 <MX_SPI1_Init+0x64>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80039f8:	4b0f      	ldr	r3, [pc, #60]	; (8003a38 <MX_SPI1_Init+0x64>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80039fe:	4b0e      	ldr	r3, [pc, #56]	; (8003a38 <MX_SPI1_Init+0x64>)
 8003a00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a04:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003a06:	4b0c      	ldr	r3, [pc, #48]	; (8003a38 <MX_SPI1_Init+0x64>)
 8003a08:	2230      	movs	r2, #48	; 0x30
 8003a0a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a0c:	4b0a      	ldr	r3, [pc, #40]	; (8003a38 <MX_SPI1_Init+0x64>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a12:	4b09      	ldr	r3, [pc, #36]	; (8003a38 <MX_SPI1_Init+0x64>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a18:	4b07      	ldr	r3, [pc, #28]	; (8003a38 <MX_SPI1_Init+0x64>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003a1e:	4b06      	ldr	r3, [pc, #24]	; (8003a38 <MX_SPI1_Init+0x64>)
 8003a20:	220a      	movs	r2, #10
 8003a22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003a24:	4804      	ldr	r0, [pc, #16]	; (8003a38 <MX_SPI1_Init+0x64>)
 8003a26:	f001 fc7f 	bl	8005328 <HAL_SPI_Init>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003a30:	f7ff ffca 	bl	80039c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003a34:	bf00      	nop
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	20000678 	.word	0x20000678
 8003a3c:	40013000 	.word	0x40013000

08003a40 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b08a      	sub	sp, #40	; 0x28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a48:	f107 0314 	add.w	r3, r7, #20
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	605a      	str	r2, [r3, #4]
 8003a52:	609a      	str	r2, [r3, #8]
 8003a54:	60da      	str	r2, [r3, #12]
 8003a56:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a19      	ldr	r2, [pc, #100]	; (8003ac4 <HAL_SPI_MspInit+0x84>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d12b      	bne.n	8003aba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003a62:	2300      	movs	r3, #0
 8003a64:	613b      	str	r3, [r7, #16]
 8003a66:	4b18      	ldr	r3, [pc, #96]	; (8003ac8 <HAL_SPI_MspInit+0x88>)
 8003a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6a:	4a17      	ldr	r2, [pc, #92]	; (8003ac8 <HAL_SPI_MspInit+0x88>)
 8003a6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a70:	6453      	str	r3, [r2, #68]	; 0x44
 8003a72:	4b15      	ldr	r3, [pc, #84]	; (8003ac8 <HAL_SPI_MspInit+0x88>)
 8003a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a7a:	613b      	str	r3, [r7, #16]
 8003a7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60fb      	str	r3, [r7, #12]
 8003a82:	4b11      	ldr	r3, [pc, #68]	; (8003ac8 <HAL_SPI_MspInit+0x88>)
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	4a10      	ldr	r2, [pc, #64]	; (8003ac8 <HAL_SPI_MspInit+0x88>)
 8003a88:	f043 0301 	orr.w	r3, r3, #1
 8003a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a8e:	4b0e      	ldr	r3, [pc, #56]	; (8003ac8 <HAL_SPI_MspInit+0x88>)
 8003a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003a9a:	23e0      	movs	r3, #224	; 0xe0
 8003a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003aaa:	2305      	movs	r3, #5
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aae:	f107 0314 	add.w	r3, r7, #20
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4805      	ldr	r0, [pc, #20]	; (8003acc <HAL_SPI_MspInit+0x8c>)
 8003ab6:	f000 fc8d 	bl	80043d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003aba:	bf00      	nop
 8003abc:	3728      	adds	r7, #40	; 0x28
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	40013000 	.word	0x40013000
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	40020000 	.word	0x40020000

08003ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	607b      	str	r3, [r7, #4]
 8003ada:	4b10      	ldr	r3, [pc, #64]	; (8003b1c <HAL_MspInit+0x4c>)
 8003adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ade:	4a0f      	ldr	r2, [pc, #60]	; (8003b1c <HAL_MspInit+0x4c>)
 8003ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ae6:	4b0d      	ldr	r3, [pc, #52]	; (8003b1c <HAL_MspInit+0x4c>)
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aee:	607b      	str	r3, [r7, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003af2:	2300      	movs	r3, #0
 8003af4:	603b      	str	r3, [r7, #0]
 8003af6:	4b09      	ldr	r3, [pc, #36]	; (8003b1c <HAL_MspInit+0x4c>)
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	4a08      	ldr	r2, [pc, #32]	; (8003b1c <HAL_MspInit+0x4c>)
 8003afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b00:	6413      	str	r3, [r2, #64]	; 0x40
 8003b02:	4b06      	ldr	r3, [pc, #24]	; (8003b1c <HAL_MspInit+0x4c>)
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b0a:	603b      	str	r3, [r7, #0]
 8003b0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b0e:	bf00      	nop
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	40023800 	.word	0x40023800

08003b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b24:	e7fe      	b.n	8003b24 <NMI_Handler+0x4>

08003b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b26:	b480      	push	{r7}
 8003b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b2a:	e7fe      	b.n	8003b2a <HardFault_Handler+0x4>

08003b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b30:	e7fe      	b.n	8003b30 <MemManage_Handler+0x4>

08003b32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b32:	b480      	push	{r7}
 8003b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b36:	e7fe      	b.n	8003b36 <BusFault_Handler+0x4>

08003b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b3c:	e7fe      	b.n	8003b3c <UsageFault_Handler+0x4>

08003b3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b42:	bf00      	nop
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b50:	bf00      	nop
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b5e:	bf00      	nop
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  swtimerISR();
 8003b6c:	f7ff f996 	bl	8002e9c <swtimerISR>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b70:	f000 fa48 	bl	8004004 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b74:	bf00      	nop
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003b7c:	2002      	movs	r0, #2
 8003b7e:	f000 fddf 	bl	8004740 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003b82:	bf00      	nop
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003b8a:	2008      	movs	r0, #8
 8003b8c:	f000 fdd8 	bl	8004740 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003b90:	bf00      	nop
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	uint8_t c;

	if ((__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_RXNE) != RESET))
 8003b9a:	4b16      	ldr	r3, [pc, #88]	; (8003bf4 <USART1_IRQHandler+0x60>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0320 	and.w	r3, r3, #32
 8003ba4:	2b20      	cmp	r3, #32
 8003ba6:	d11d      	bne.n	8003be4 <USART1_IRQHandler+0x50>
 8003ba8:	4b12      	ldr	r3, [pc, #72]	; (8003bf4 <USART1_IRQHandler+0x60>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	f003 0320 	and.w	r3, r3, #32
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d016      	beq.n	8003be4 <USART1_IRQHandler+0x50>
	{
		c = (uint8_t)(huart1.Instance->DR & (uint8_t)0x00FF);
 8003bb6:	4b0f      	ldr	r3, [pc, #60]	; (8003bf4 <USART1_IRQHandler+0x60>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	71fb      	strb	r3, [r7, #7]
		if(c != 0)
 8003bbe:	79fb      	ldrb	r3, [r7, #7]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00a      	beq.n	8003bda <USART1_IRQHandler+0x46>
		{
			ringbuf_writeone(&rxrb, c);
 8003bc4:	79fb      	ldrb	r3, [r7, #7]
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	480b      	ldr	r0, [pc, #44]	; (8003bf8 <USART1_IRQHandler+0x64>)
 8003bca:	f7fd fd0b 	bl	80015e4 <ringbuf_writeone>
			if(c == 0x03 )
 8003bce:	79fb      	ldrb	r3, [r7, #7]
 8003bd0:	2b03      	cmp	r3, #3
 8003bd2:	d102      	bne.n	8003bda <USART1_IRQHandler+0x46>
				uart_flag = 1;
 8003bd4:	4b09      	ldr	r3, [pc, #36]	; (8003bfc <USART1_IRQHandler+0x68>)
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	701a      	strb	r2, [r3, #0]
		}
		__HAL_UART_CLEAR_FLAG(&huart1, UART_FLAG_RXNE);
 8003bda:	4b06      	ldr	r3, [pc, #24]	; (8003bf4 <USART1_IRQHandler+0x60>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f06f 0220 	mvn.w	r2, #32
 8003be2:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003be4:	4803      	ldr	r0, [pc, #12]	; (8003bf4 <USART1_IRQHandler+0x60>)
 8003be6:	f002 fa1d 	bl	8006024 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003bea:	bf00      	nop
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	2000071c 	.word	0x2000071c
 8003bf8:	2000009c 	.word	0x2000009c
 8003bfc:	20000094 	.word	0x20000094

08003c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b086      	sub	sp, #24
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c08:	4a14      	ldr	r2, [pc, #80]	; (8003c5c <_sbrk+0x5c>)
 8003c0a:	4b15      	ldr	r3, [pc, #84]	; (8003c60 <_sbrk+0x60>)
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c14:	4b13      	ldr	r3, [pc, #76]	; (8003c64 <_sbrk+0x64>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d102      	bne.n	8003c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c1c:	4b11      	ldr	r3, [pc, #68]	; (8003c64 <_sbrk+0x64>)
 8003c1e:	4a12      	ldr	r2, [pc, #72]	; (8003c68 <_sbrk+0x68>)
 8003c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c22:	4b10      	ldr	r3, [pc, #64]	; (8003c64 <_sbrk+0x64>)
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4413      	add	r3, r2
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d207      	bcs.n	8003c40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c30:	f003 f92c 	bl	8006e8c <__errno>
 8003c34:	4603      	mov	r3, r0
 8003c36:	220c      	movs	r2, #12
 8003c38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c3e:	e009      	b.n	8003c54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c40:	4b08      	ldr	r3, [pc, #32]	; (8003c64 <_sbrk+0x64>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c46:	4b07      	ldr	r3, [pc, #28]	; (8003c64 <_sbrk+0x64>)
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	4a05      	ldr	r2, [pc, #20]	; (8003c64 <_sbrk+0x64>)
 8003c50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c52:	68fb      	ldr	r3, [r7, #12]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3718      	adds	r7, #24
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	20020000 	.word	0x20020000
 8003c60:	00000400 	.word	0x00000400
 8003c64:	200006d0 	.word	0x200006d0
 8003c68:	200007b8 	.word	0x200007b8

08003c6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c70:	4b06      	ldr	r3, [pc, #24]	; (8003c8c <SystemInit+0x20>)
 8003c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c76:	4a05      	ldr	r2, [pc, #20]	; (8003c8c <SystemInit+0x20>)
 8003c78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c80:	bf00      	nop
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	e000ed00 	.word	0xe000ed00

08003c90 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c96:	463b      	mov	r3, r7
 8003c98:	2200      	movs	r2, #0
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003c9e:	4b15      	ldr	r3, [pc, #84]	; (8003cf4 <MX_TIM7_Init+0x64>)
 8003ca0:	4a15      	ldr	r2, [pc, #84]	; (8003cf8 <MX_TIM7_Init+0x68>)
 8003ca2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8003ca4:	4b13      	ldr	r3, [pc, #76]	; (8003cf4 <MX_TIM7_Init+0x64>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003caa:	4b12      	ldr	r3, [pc, #72]	; (8003cf4 <MX_TIM7_Init+0x64>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8003cb0:	4b10      	ldr	r3, [pc, #64]	; (8003cf4 <MX_TIM7_Init+0x64>)
 8003cb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cb6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cb8:	4b0e      	ldr	r3, [pc, #56]	; (8003cf4 <MX_TIM7_Init+0x64>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003cbe:	480d      	ldr	r0, [pc, #52]	; (8003cf4 <MX_TIM7_Init+0x64>)
 8003cc0:	f001 ff64 	bl	8005b8c <HAL_TIM_Base_Init>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8003cca:	f7ff fe7d 	bl	80039c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003cd6:	463b      	mov	r3, r7
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4806      	ldr	r0, [pc, #24]	; (8003cf4 <MX_TIM7_Init+0x64>)
 8003cdc:	f002 f846 	bl	8005d6c <HAL_TIMEx_MasterConfigSynchronization>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8003ce6:	f7ff fe6f 	bl	80039c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003cea:	bf00      	nop
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	200006d4 	.word	0x200006d4
 8003cf8:	40001400 	.word	0x40001400

08003cfc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a0e      	ldr	r2, [pc, #56]	; (8003d44 <HAL_TIM_Base_MspInit+0x48>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d115      	bne.n	8003d3a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60fb      	str	r3, [r7, #12]
 8003d12:	4b0d      	ldr	r3, [pc, #52]	; (8003d48 <HAL_TIM_Base_MspInit+0x4c>)
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	4a0c      	ldr	r2, [pc, #48]	; (8003d48 <HAL_TIM_Base_MspInit+0x4c>)
 8003d18:	f043 0320 	orr.w	r3, r3, #32
 8003d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d1e:	4b0a      	ldr	r3, [pc, #40]	; (8003d48 <HAL_TIM_Base_MspInit+0x4c>)
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	f003 0320 	and.w	r3, r3, #32
 8003d26:	60fb      	str	r3, [r7, #12]
 8003d28:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	2105      	movs	r1, #5
 8003d2e:	2037      	movs	r0, #55	; 0x37
 8003d30:	f000 fa87 	bl	8004242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003d34:	2037      	movs	r0, #55	; 0x37
 8003d36:	f000 faa0 	bl	800427a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8003d3a:	bf00      	nop
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	40001400 	.word	0x40001400
 8003d48:	40023800 	.word	0x40023800

08003d4c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003d50:	4b11      	ldr	r3, [pc, #68]	; (8003d98 <MX_USART1_UART_Init+0x4c>)
 8003d52:	4a12      	ldr	r2, [pc, #72]	; (8003d9c <MX_USART1_UART_Init+0x50>)
 8003d54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003d56:	4b10      	ldr	r3, [pc, #64]	; (8003d98 <MX_USART1_UART_Init+0x4c>)
 8003d58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003d5e:	4b0e      	ldr	r3, [pc, #56]	; (8003d98 <MX_USART1_UART_Init+0x4c>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003d64:	4b0c      	ldr	r3, [pc, #48]	; (8003d98 <MX_USART1_UART_Init+0x4c>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003d6a:	4b0b      	ldr	r3, [pc, #44]	; (8003d98 <MX_USART1_UART_Init+0x4c>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003d70:	4b09      	ldr	r3, [pc, #36]	; (8003d98 <MX_USART1_UART_Init+0x4c>)
 8003d72:	220c      	movs	r2, #12
 8003d74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d76:	4b08      	ldr	r3, [pc, #32]	; (8003d98 <MX_USART1_UART_Init+0x4c>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d7c:	4b06      	ldr	r3, [pc, #24]	; (8003d98 <MX_USART1_UART_Init+0x4c>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003d82:	4805      	ldr	r0, [pc, #20]	; (8003d98 <MX_USART1_UART_Init+0x4c>)
 8003d84:	f002 f86e 	bl	8005e64 <HAL_UART_Init>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003d8e:	f7ff fe1b 	bl	80039c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003d92:	bf00      	nop
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	2000071c 	.word	0x2000071c
 8003d9c:	40011000 	.word	0x40011000

08003da0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003da4:	4b11      	ldr	r3, [pc, #68]	; (8003dec <MX_USART2_UART_Init+0x4c>)
 8003da6:	4a12      	ldr	r2, [pc, #72]	; (8003df0 <MX_USART2_UART_Init+0x50>)
 8003da8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003daa:	4b10      	ldr	r3, [pc, #64]	; (8003dec <MX_USART2_UART_Init+0x4c>)
 8003dac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003db0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003db2:	4b0e      	ldr	r3, [pc, #56]	; (8003dec <MX_USART2_UART_Init+0x4c>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003db8:	4b0c      	ldr	r3, [pc, #48]	; (8003dec <MX_USART2_UART_Init+0x4c>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003dbe:	4b0b      	ldr	r3, [pc, #44]	; (8003dec <MX_USART2_UART_Init+0x4c>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003dc4:	4b09      	ldr	r3, [pc, #36]	; (8003dec <MX_USART2_UART_Init+0x4c>)
 8003dc6:	220c      	movs	r2, #12
 8003dc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003dca:	4b08      	ldr	r3, [pc, #32]	; (8003dec <MX_USART2_UART_Init+0x4c>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003dd0:	4b06      	ldr	r3, [pc, #24]	; (8003dec <MX_USART2_UART_Init+0x4c>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003dd6:	4805      	ldr	r0, [pc, #20]	; (8003dec <MX_USART2_UART_Init+0x4c>)
 8003dd8:	f002 f844 	bl	8005e64 <HAL_UART_Init>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003de2:	f7ff fdf1 	bl	80039c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003de6:	bf00      	nop
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	20000760 	.word	0x20000760
 8003df0:	40004400 	.word	0x40004400

08003df4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b08c      	sub	sp, #48	; 0x30
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dfc:	f107 031c 	add.w	r3, r7, #28
 8003e00:	2200      	movs	r2, #0
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	605a      	str	r2, [r3, #4]
 8003e06:	609a      	str	r2, [r3, #8]
 8003e08:	60da      	str	r2, [r3, #12]
 8003e0a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a3a      	ldr	r2, [pc, #232]	; (8003efc <HAL_UART_MspInit+0x108>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d135      	bne.n	8003e82 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e16:	2300      	movs	r3, #0
 8003e18:	61bb      	str	r3, [r7, #24]
 8003e1a:	4b39      	ldr	r3, [pc, #228]	; (8003f00 <HAL_UART_MspInit+0x10c>)
 8003e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1e:	4a38      	ldr	r2, [pc, #224]	; (8003f00 <HAL_UART_MspInit+0x10c>)
 8003e20:	f043 0310 	orr.w	r3, r3, #16
 8003e24:	6453      	str	r3, [r2, #68]	; 0x44
 8003e26:	4b36      	ldr	r3, [pc, #216]	; (8003f00 <HAL_UART_MspInit+0x10c>)
 8003e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2a:	f003 0310 	and.w	r3, r3, #16
 8003e2e:	61bb      	str	r3, [r7, #24]
 8003e30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e32:	2300      	movs	r3, #0
 8003e34:	617b      	str	r3, [r7, #20]
 8003e36:	4b32      	ldr	r3, [pc, #200]	; (8003f00 <HAL_UART_MspInit+0x10c>)
 8003e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3a:	4a31      	ldr	r2, [pc, #196]	; (8003f00 <HAL_UART_MspInit+0x10c>)
 8003e3c:	f043 0301 	orr.w	r3, r3, #1
 8003e40:	6313      	str	r3, [r2, #48]	; 0x30
 8003e42:	4b2f      	ldr	r3, [pc, #188]	; (8003f00 <HAL_UART_MspInit+0x10c>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	617b      	str	r3, [r7, #20]
 8003e4c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003e4e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e54:	2302      	movs	r3, #2
 8003e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003e60:	2307      	movs	r3, #7
 8003e62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e64:	f107 031c 	add.w	r3, r7, #28
 8003e68:	4619      	mov	r1, r3
 8003e6a:	4826      	ldr	r0, [pc, #152]	; (8003f04 <HAL_UART_MspInit+0x110>)
 8003e6c:	f000 fab2 	bl	80043d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 8003e70:	2200      	movs	r2, #0
 8003e72:	2106      	movs	r1, #6
 8003e74:	2025      	movs	r0, #37	; 0x25
 8003e76:	f000 f9e4 	bl	8004242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003e7a:	2025      	movs	r0, #37	; 0x25
 8003e7c:	f000 f9fd 	bl	800427a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003e80:	e038      	b.n	8003ef4 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a20      	ldr	r2, [pc, #128]	; (8003f08 <HAL_UART_MspInit+0x114>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d133      	bne.n	8003ef4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	613b      	str	r3, [r7, #16]
 8003e90:	4b1b      	ldr	r3, [pc, #108]	; (8003f00 <HAL_UART_MspInit+0x10c>)
 8003e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e94:	4a1a      	ldr	r2, [pc, #104]	; (8003f00 <HAL_UART_MspInit+0x10c>)
 8003e96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e9a:	6413      	str	r3, [r2, #64]	; 0x40
 8003e9c:	4b18      	ldr	r3, [pc, #96]	; (8003f00 <HAL_UART_MspInit+0x10c>)
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea4:	613b      	str	r3, [r7, #16]
 8003ea6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	4b14      	ldr	r3, [pc, #80]	; (8003f00 <HAL_UART_MspInit+0x10c>)
 8003eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb0:	4a13      	ldr	r2, [pc, #76]	; (8003f00 <HAL_UART_MspInit+0x10c>)
 8003eb2:	f043 0301 	orr.w	r3, r3, #1
 8003eb6:	6313      	str	r3, [r2, #48]	; 0x30
 8003eb8:	4b11      	ldr	r3, [pc, #68]	; (8003f00 <HAL_UART_MspInit+0x10c>)
 8003eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	60fb      	str	r3, [r7, #12]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003ec4:	230c      	movs	r3, #12
 8003ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ec8:	2302      	movs	r3, #2
 8003eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ed4:	2307      	movs	r3, #7
 8003ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ed8:	f107 031c 	add.w	r3, r7, #28
 8003edc:	4619      	mov	r1, r3
 8003ede:	4809      	ldr	r0, [pc, #36]	; (8003f04 <HAL_UART_MspInit+0x110>)
 8003ee0:	f000 fa78 	bl	80043d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	2105      	movs	r1, #5
 8003ee8:	2026      	movs	r0, #38	; 0x26
 8003eea:	f000 f9aa 	bl	8004242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003eee:	2026      	movs	r0, #38	; 0x26
 8003ef0:	f000 f9c3 	bl	800427a <HAL_NVIC_EnableIRQ>
}
 8003ef4:	bf00      	nop
 8003ef6:	3730      	adds	r7, #48	; 0x30
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	40011000 	.word	0x40011000
 8003f00:	40023800 	.word	0x40023800
 8003f04:	40020000 	.word	0x40020000
 8003f08:	40004400 	.word	0x40004400

08003f0c <Reset_Handler>:
 8003f0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f44 <LoopFillZerobss+0x12>
 8003f10:	480d      	ldr	r0, [pc, #52]	; (8003f48 <LoopFillZerobss+0x16>)
 8003f12:	490e      	ldr	r1, [pc, #56]	; (8003f4c <LoopFillZerobss+0x1a>)
 8003f14:	4a0e      	ldr	r2, [pc, #56]	; (8003f50 <LoopFillZerobss+0x1e>)
 8003f16:	2300      	movs	r3, #0
 8003f18:	e002      	b.n	8003f20 <LoopCopyDataInit>

08003f1a <CopyDataInit>:
 8003f1a:	58d4      	ldr	r4, [r2, r3]
 8003f1c:	50c4      	str	r4, [r0, r3]
 8003f1e:	3304      	adds	r3, #4

08003f20 <LoopCopyDataInit>:
 8003f20:	18c4      	adds	r4, r0, r3
 8003f22:	428c      	cmp	r4, r1
 8003f24:	d3f9      	bcc.n	8003f1a <CopyDataInit>
 8003f26:	4a0b      	ldr	r2, [pc, #44]	; (8003f54 <LoopFillZerobss+0x22>)
 8003f28:	4c0b      	ldr	r4, [pc, #44]	; (8003f58 <LoopFillZerobss+0x26>)
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	e001      	b.n	8003f32 <LoopFillZerobss>

08003f2e <FillZerobss>:
 8003f2e:	6013      	str	r3, [r2, #0]
 8003f30:	3204      	adds	r2, #4

08003f32 <LoopFillZerobss>:
 8003f32:	42a2      	cmp	r2, r4
 8003f34:	d3fb      	bcc.n	8003f2e <FillZerobss>
 8003f36:	f7ff fe99 	bl	8003c6c <SystemInit>
 8003f3a:	f002 ffad 	bl	8006e98 <__libc_init_array>
 8003f3e:	f7ff fcaf 	bl	80038a0 <main>
 8003f42:	4770      	bx	lr
 8003f44:	20020000 	.word	0x20020000
 8003f48:	20000000 	.word	0x20000000
 8003f4c:	20000070 	.word	0x20000070
 8003f50:	08007a24 	.word	0x08007a24
 8003f54:	20000070 	.word	0x20000070
 8003f58:	200007b8 	.word	0x200007b8

08003f5c <ADC_IRQHandler>:
 8003f5c:	e7fe      	b.n	8003f5c <ADC_IRQHandler>
	...

08003f60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f64:	4b0e      	ldr	r3, [pc, #56]	; (8003fa0 <HAL_Init+0x40>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a0d      	ldr	r2, [pc, #52]	; (8003fa0 <HAL_Init+0x40>)
 8003f6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f70:	4b0b      	ldr	r3, [pc, #44]	; (8003fa0 <HAL_Init+0x40>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a0a      	ldr	r2, [pc, #40]	; (8003fa0 <HAL_Init+0x40>)
 8003f76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f7c:	4b08      	ldr	r3, [pc, #32]	; (8003fa0 <HAL_Init+0x40>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a07      	ldr	r2, [pc, #28]	; (8003fa0 <HAL_Init+0x40>)
 8003f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f88:	2003      	movs	r0, #3
 8003f8a:	f000 f94f 	bl	800422c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f8e:	200f      	movs	r0, #15
 8003f90:	f000 f808 	bl	8003fa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f94:	f7ff fd9c 	bl	8003ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40023c00 	.word	0x40023c00

08003fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003fac:	4b12      	ldr	r3, [pc, #72]	; (8003ff8 <HAL_InitTick+0x54>)
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	4b12      	ldr	r3, [pc, #72]	; (8003ffc <HAL_InitTick+0x58>)
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fba:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 f967 	bl	8004296 <HAL_SYSTICK_Config>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e00e      	b.n	8003ff0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2b0f      	cmp	r3, #15
 8003fd6:	d80a      	bhi.n	8003fee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fd8:	2200      	movs	r2, #0
 8003fda:	6879      	ldr	r1, [r7, #4]
 8003fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe0:	f000 f92f 	bl	8004242 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003fe4:	4a06      	ldr	r2, [pc, #24]	; (8004000 <HAL_InitTick+0x5c>)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
 8003fec:	e000      	b.n	8003ff0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	20000000 	.word	0x20000000
 8003ffc:	20000008 	.word	0x20000008
 8004000:	20000004 	.word	0x20000004

08004004 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004008:	4b06      	ldr	r3, [pc, #24]	; (8004024 <HAL_IncTick+0x20>)
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	461a      	mov	r2, r3
 800400e:	4b06      	ldr	r3, [pc, #24]	; (8004028 <HAL_IncTick+0x24>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4413      	add	r3, r2
 8004014:	4a04      	ldr	r2, [pc, #16]	; (8004028 <HAL_IncTick+0x24>)
 8004016:	6013      	str	r3, [r2, #0]
}
 8004018:	bf00      	nop
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	20000008 	.word	0x20000008
 8004028:	200007a4 	.word	0x200007a4

0800402c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  return uwTick;
 8004030:	4b03      	ldr	r3, [pc, #12]	; (8004040 <HAL_GetTick+0x14>)
 8004032:	681b      	ldr	r3, [r3, #0]
}
 8004034:	4618      	mov	r0, r3
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	200007a4 	.word	0x200007a4

08004044 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800404c:	f7ff ffee 	bl	800402c <HAL_GetTick>
 8004050:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800405c:	d005      	beq.n	800406a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800405e:	4b0a      	ldr	r3, [pc, #40]	; (8004088 <HAL_Delay+0x44>)
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4413      	add	r3, r2
 8004068:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800406a:	bf00      	nop
 800406c:	f7ff ffde 	bl	800402c <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	429a      	cmp	r2, r3
 800407a:	d8f7      	bhi.n	800406c <HAL_Delay+0x28>
  {
  }
}
 800407c:	bf00      	nop
 800407e:	bf00      	nop
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	20000008 	.word	0x20000008

0800408c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f003 0307 	and.w	r3, r3, #7
 800409a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800409c:	4b0c      	ldr	r3, [pc, #48]	; (80040d0 <__NVIC_SetPriorityGrouping+0x44>)
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040a2:	68ba      	ldr	r2, [r7, #8]
 80040a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040a8:	4013      	ands	r3, r2
 80040aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040be:	4a04      	ldr	r2, [pc, #16]	; (80040d0 <__NVIC_SetPriorityGrouping+0x44>)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	60d3      	str	r3, [r2, #12]
}
 80040c4:	bf00      	nop
 80040c6:	3714      	adds	r7, #20
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	e000ed00 	.word	0xe000ed00

080040d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040d8:	4b04      	ldr	r3, [pc, #16]	; (80040ec <__NVIC_GetPriorityGrouping+0x18>)
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	0a1b      	lsrs	r3, r3, #8
 80040de:	f003 0307 	and.w	r3, r3, #7
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	e000ed00 	.word	0xe000ed00

080040f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	4603      	mov	r3, r0
 80040f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	db0b      	blt.n	800411a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004102:	79fb      	ldrb	r3, [r7, #7]
 8004104:	f003 021f 	and.w	r2, r3, #31
 8004108:	4907      	ldr	r1, [pc, #28]	; (8004128 <__NVIC_EnableIRQ+0x38>)
 800410a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800410e:	095b      	lsrs	r3, r3, #5
 8004110:	2001      	movs	r0, #1
 8004112:	fa00 f202 	lsl.w	r2, r0, r2
 8004116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800411a:	bf00      	nop
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	e000e100 	.word	0xe000e100

0800412c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	4603      	mov	r3, r0
 8004134:	6039      	str	r1, [r7, #0]
 8004136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800413c:	2b00      	cmp	r3, #0
 800413e:	db0a      	blt.n	8004156 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	b2da      	uxtb	r2, r3
 8004144:	490c      	ldr	r1, [pc, #48]	; (8004178 <__NVIC_SetPriority+0x4c>)
 8004146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800414a:	0112      	lsls	r2, r2, #4
 800414c:	b2d2      	uxtb	r2, r2
 800414e:	440b      	add	r3, r1
 8004150:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004154:	e00a      	b.n	800416c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	b2da      	uxtb	r2, r3
 800415a:	4908      	ldr	r1, [pc, #32]	; (800417c <__NVIC_SetPriority+0x50>)
 800415c:	79fb      	ldrb	r3, [r7, #7]
 800415e:	f003 030f 	and.w	r3, r3, #15
 8004162:	3b04      	subs	r3, #4
 8004164:	0112      	lsls	r2, r2, #4
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	440b      	add	r3, r1
 800416a:	761a      	strb	r2, [r3, #24]
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	e000e100 	.word	0xe000e100
 800417c:	e000ed00 	.word	0xe000ed00

08004180 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004180:	b480      	push	{r7}
 8004182:	b089      	sub	sp, #36	; 0x24
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	f1c3 0307 	rsb	r3, r3, #7
 800419a:	2b04      	cmp	r3, #4
 800419c:	bf28      	it	cs
 800419e:	2304      	movcs	r3, #4
 80041a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	3304      	adds	r3, #4
 80041a6:	2b06      	cmp	r3, #6
 80041a8:	d902      	bls.n	80041b0 <NVIC_EncodePriority+0x30>
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	3b03      	subs	r3, #3
 80041ae:	e000      	b.n	80041b2 <NVIC_EncodePriority+0x32>
 80041b0:	2300      	movs	r3, #0
 80041b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041b4:	f04f 32ff 	mov.w	r2, #4294967295
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	fa02 f303 	lsl.w	r3, r2, r3
 80041be:	43da      	mvns	r2, r3
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	401a      	ands	r2, r3
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041c8:	f04f 31ff 	mov.w	r1, #4294967295
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	fa01 f303 	lsl.w	r3, r1, r3
 80041d2:	43d9      	mvns	r1, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041d8:	4313      	orrs	r3, r2
         );
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3724      	adds	r7, #36	; 0x24
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
	...

080041e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	3b01      	subs	r3, #1
 80041f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041f8:	d301      	bcc.n	80041fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041fa:	2301      	movs	r3, #1
 80041fc:	e00f      	b.n	800421e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041fe:	4a0a      	ldr	r2, [pc, #40]	; (8004228 <SysTick_Config+0x40>)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	3b01      	subs	r3, #1
 8004204:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004206:	210f      	movs	r1, #15
 8004208:	f04f 30ff 	mov.w	r0, #4294967295
 800420c:	f7ff ff8e 	bl	800412c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004210:	4b05      	ldr	r3, [pc, #20]	; (8004228 <SysTick_Config+0x40>)
 8004212:	2200      	movs	r2, #0
 8004214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004216:	4b04      	ldr	r3, [pc, #16]	; (8004228 <SysTick_Config+0x40>)
 8004218:	2207      	movs	r2, #7
 800421a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3708      	adds	r7, #8
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	e000e010 	.word	0xe000e010

0800422c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f7ff ff29 	bl	800408c <__NVIC_SetPriorityGrouping>
}
 800423a:	bf00      	nop
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004242:	b580      	push	{r7, lr}
 8004244:	b086      	sub	sp, #24
 8004246:	af00      	add	r7, sp, #0
 8004248:	4603      	mov	r3, r0
 800424a:	60b9      	str	r1, [r7, #8]
 800424c:	607a      	str	r2, [r7, #4]
 800424e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004250:	2300      	movs	r3, #0
 8004252:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004254:	f7ff ff3e 	bl	80040d4 <__NVIC_GetPriorityGrouping>
 8004258:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	68b9      	ldr	r1, [r7, #8]
 800425e:	6978      	ldr	r0, [r7, #20]
 8004260:	f7ff ff8e 	bl	8004180 <NVIC_EncodePriority>
 8004264:	4602      	mov	r2, r0
 8004266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800426a:	4611      	mov	r1, r2
 800426c:	4618      	mov	r0, r3
 800426e:	f7ff ff5d 	bl	800412c <__NVIC_SetPriority>
}
 8004272:	bf00      	nop
 8004274:	3718      	adds	r7, #24
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b082      	sub	sp, #8
 800427e:	af00      	add	r7, sp, #0
 8004280:	4603      	mov	r3, r0
 8004282:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004288:	4618      	mov	r0, r3
 800428a:	f7ff ff31 	bl	80040f0 <__NVIC_EnableIRQ>
}
 800428e:	bf00      	nop
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b082      	sub	sp, #8
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f7ff ffa2 	bl	80041e8 <SysTick_Config>
 80042a4:	4603      	mov	r3, r0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b084      	sub	sp, #16
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80042bc:	f7ff feb6 	bl	800402c <HAL_GetTick>
 80042c0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d008      	beq.n	80042e0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2280      	movs	r2, #128	; 0x80
 80042d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e052      	b.n	8004386 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 0216 	bic.w	r2, r2, #22
 80042ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	695a      	ldr	r2, [r3, #20]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042fe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004304:	2b00      	cmp	r3, #0
 8004306:	d103      	bne.n	8004310 <HAL_DMA_Abort+0x62>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800430c:	2b00      	cmp	r3, #0
 800430e:	d007      	beq.n	8004320 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 0208 	bic.w	r2, r2, #8
 800431e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 0201 	bic.w	r2, r2, #1
 800432e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004330:	e013      	b.n	800435a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004332:	f7ff fe7b 	bl	800402c <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b05      	cmp	r3, #5
 800433e:	d90c      	bls.n	800435a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2220      	movs	r2, #32
 8004344:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2203      	movs	r2, #3
 800434a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e015      	b.n	8004386 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1e4      	bne.n	8004332 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800436c:	223f      	movs	r2, #63	; 0x3f
 800436e:	409a      	lsls	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800438e:	b480      	push	{r7}
 8004390:	b083      	sub	sp, #12
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d004      	beq.n	80043ac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2280      	movs	r2, #128	; 0x80
 80043a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e00c      	b.n	80043c6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2205      	movs	r2, #5
 80043b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 0201 	bic.w	r2, r2, #1
 80043c2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
	...

080043d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b089      	sub	sp, #36	; 0x24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80043de:	2300      	movs	r3, #0
 80043e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80043e2:	2300      	movs	r3, #0
 80043e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80043e6:	2300      	movs	r3, #0
 80043e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043ea:	2300      	movs	r3, #0
 80043ec:	61fb      	str	r3, [r7, #28]
 80043ee:	e16b      	b.n	80046c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80043f0:	2201      	movs	r2, #1
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	fa02 f303 	lsl.w	r3, r2, r3
 80043f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	4013      	ands	r3, r2
 8004402:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	429a      	cmp	r2, r3
 800440a:	f040 815a 	bne.w	80046c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f003 0303 	and.w	r3, r3, #3
 8004416:	2b01      	cmp	r3, #1
 8004418:	d005      	beq.n	8004426 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004422:	2b02      	cmp	r3, #2
 8004424:	d130      	bne.n	8004488 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	2203      	movs	r2, #3
 8004432:	fa02 f303 	lsl.w	r3, r2, r3
 8004436:	43db      	mvns	r3, r3
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	4013      	ands	r3, r2
 800443c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	68da      	ldr	r2, [r3, #12]
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	fa02 f303 	lsl.w	r3, r2, r3
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	4313      	orrs	r3, r2
 800444e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800445c:	2201      	movs	r2, #1
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	fa02 f303 	lsl.w	r3, r2, r3
 8004464:	43db      	mvns	r3, r3
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	4013      	ands	r3, r2
 800446a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	091b      	lsrs	r3, r3, #4
 8004472:	f003 0201 	and.w	r2, r3, #1
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	fa02 f303 	lsl.w	r3, r2, r3
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	4313      	orrs	r3, r2
 8004480:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f003 0303 	and.w	r3, r3, #3
 8004490:	2b03      	cmp	r3, #3
 8004492:	d017      	beq.n	80044c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	2203      	movs	r2, #3
 80044a0:	fa02 f303 	lsl.w	r3, r2, r3
 80044a4:	43db      	mvns	r3, r3
 80044a6:	69ba      	ldr	r2, [r7, #24]
 80044a8:	4013      	ands	r3, r2
 80044aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	689a      	ldr	r2, [r3, #8]
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	005b      	lsls	r3, r3, #1
 80044b4:	fa02 f303 	lsl.w	r3, r2, r3
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f003 0303 	and.w	r3, r3, #3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d123      	bne.n	8004518 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	08da      	lsrs	r2, r3, #3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3208      	adds	r2, #8
 80044d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	220f      	movs	r2, #15
 80044e8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ec:	43db      	mvns	r3, r3
 80044ee:	69ba      	ldr	r2, [r7, #24]
 80044f0:	4013      	ands	r3, r2
 80044f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	691a      	ldr	r2, [r3, #16]
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	f003 0307 	and.w	r3, r3, #7
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	4313      	orrs	r3, r2
 8004508:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	08da      	lsrs	r2, r3, #3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	3208      	adds	r2, #8
 8004512:	69b9      	ldr	r1, [r7, #24]
 8004514:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	2203      	movs	r2, #3
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	43db      	mvns	r3, r3
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	4013      	ands	r3, r2
 800452e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f003 0203 	and.w	r2, r3, #3
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	005b      	lsls	r3, r3, #1
 800453c:	fa02 f303 	lsl.w	r3, r2, r3
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	4313      	orrs	r3, r2
 8004544:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004554:	2b00      	cmp	r3, #0
 8004556:	f000 80b4 	beq.w	80046c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800455a:	2300      	movs	r3, #0
 800455c:	60fb      	str	r3, [r7, #12]
 800455e:	4b60      	ldr	r3, [pc, #384]	; (80046e0 <HAL_GPIO_Init+0x30c>)
 8004560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004562:	4a5f      	ldr	r2, [pc, #380]	; (80046e0 <HAL_GPIO_Init+0x30c>)
 8004564:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004568:	6453      	str	r3, [r2, #68]	; 0x44
 800456a:	4b5d      	ldr	r3, [pc, #372]	; (80046e0 <HAL_GPIO_Init+0x30c>)
 800456c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004576:	4a5b      	ldr	r2, [pc, #364]	; (80046e4 <HAL_GPIO_Init+0x310>)
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	089b      	lsrs	r3, r3, #2
 800457c:	3302      	adds	r3, #2
 800457e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004582:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	220f      	movs	r2, #15
 800458e:	fa02 f303 	lsl.w	r3, r2, r3
 8004592:	43db      	mvns	r3, r3
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	4013      	ands	r3, r2
 8004598:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a52      	ldr	r2, [pc, #328]	; (80046e8 <HAL_GPIO_Init+0x314>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d02b      	beq.n	80045fa <HAL_GPIO_Init+0x226>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a51      	ldr	r2, [pc, #324]	; (80046ec <HAL_GPIO_Init+0x318>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d025      	beq.n	80045f6 <HAL_GPIO_Init+0x222>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a50      	ldr	r2, [pc, #320]	; (80046f0 <HAL_GPIO_Init+0x31c>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d01f      	beq.n	80045f2 <HAL_GPIO_Init+0x21e>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a4f      	ldr	r2, [pc, #316]	; (80046f4 <HAL_GPIO_Init+0x320>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d019      	beq.n	80045ee <HAL_GPIO_Init+0x21a>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a4e      	ldr	r2, [pc, #312]	; (80046f8 <HAL_GPIO_Init+0x324>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d013      	beq.n	80045ea <HAL_GPIO_Init+0x216>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a4d      	ldr	r2, [pc, #308]	; (80046fc <HAL_GPIO_Init+0x328>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d00d      	beq.n	80045e6 <HAL_GPIO_Init+0x212>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a4c      	ldr	r2, [pc, #304]	; (8004700 <HAL_GPIO_Init+0x32c>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d007      	beq.n	80045e2 <HAL_GPIO_Init+0x20e>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a4b      	ldr	r2, [pc, #300]	; (8004704 <HAL_GPIO_Init+0x330>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d101      	bne.n	80045de <HAL_GPIO_Init+0x20a>
 80045da:	2307      	movs	r3, #7
 80045dc:	e00e      	b.n	80045fc <HAL_GPIO_Init+0x228>
 80045de:	2308      	movs	r3, #8
 80045e0:	e00c      	b.n	80045fc <HAL_GPIO_Init+0x228>
 80045e2:	2306      	movs	r3, #6
 80045e4:	e00a      	b.n	80045fc <HAL_GPIO_Init+0x228>
 80045e6:	2305      	movs	r3, #5
 80045e8:	e008      	b.n	80045fc <HAL_GPIO_Init+0x228>
 80045ea:	2304      	movs	r3, #4
 80045ec:	e006      	b.n	80045fc <HAL_GPIO_Init+0x228>
 80045ee:	2303      	movs	r3, #3
 80045f0:	e004      	b.n	80045fc <HAL_GPIO_Init+0x228>
 80045f2:	2302      	movs	r3, #2
 80045f4:	e002      	b.n	80045fc <HAL_GPIO_Init+0x228>
 80045f6:	2301      	movs	r3, #1
 80045f8:	e000      	b.n	80045fc <HAL_GPIO_Init+0x228>
 80045fa:	2300      	movs	r3, #0
 80045fc:	69fa      	ldr	r2, [r7, #28]
 80045fe:	f002 0203 	and.w	r2, r2, #3
 8004602:	0092      	lsls	r2, r2, #2
 8004604:	4093      	lsls	r3, r2
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	4313      	orrs	r3, r2
 800460a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800460c:	4935      	ldr	r1, [pc, #212]	; (80046e4 <HAL_GPIO_Init+0x310>)
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	089b      	lsrs	r3, r3, #2
 8004612:	3302      	adds	r3, #2
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800461a:	4b3b      	ldr	r3, [pc, #236]	; (8004708 <HAL_GPIO_Init+0x334>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	43db      	mvns	r3, r3
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	4013      	ands	r3, r2
 8004628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004636:	69ba      	ldr	r2, [r7, #24]
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	4313      	orrs	r3, r2
 800463c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800463e:	4a32      	ldr	r2, [pc, #200]	; (8004708 <HAL_GPIO_Init+0x334>)
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004644:	4b30      	ldr	r3, [pc, #192]	; (8004708 <HAL_GPIO_Init+0x334>)
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	43db      	mvns	r3, r3
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	4013      	ands	r3, r2
 8004652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d003      	beq.n	8004668 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004660:	69ba      	ldr	r2, [r7, #24]
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	4313      	orrs	r3, r2
 8004666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004668:	4a27      	ldr	r2, [pc, #156]	; (8004708 <HAL_GPIO_Init+0x334>)
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800466e:	4b26      	ldr	r3, [pc, #152]	; (8004708 <HAL_GPIO_Init+0x334>)
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	43db      	mvns	r3, r3
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	4013      	ands	r3, r2
 800467c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800468a:	69ba      	ldr	r2, [r7, #24]
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	4313      	orrs	r3, r2
 8004690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004692:	4a1d      	ldr	r2, [pc, #116]	; (8004708 <HAL_GPIO_Init+0x334>)
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004698:	4b1b      	ldr	r3, [pc, #108]	; (8004708 <HAL_GPIO_Init+0x334>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	43db      	mvns	r3, r3
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	4013      	ands	r3, r2
 80046a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d003      	beq.n	80046bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046bc:	4a12      	ldr	r2, [pc, #72]	; (8004708 <HAL_GPIO_Init+0x334>)
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	3301      	adds	r3, #1
 80046c6:	61fb      	str	r3, [r7, #28]
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	2b0f      	cmp	r3, #15
 80046cc:	f67f ae90 	bls.w	80043f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80046d0:	bf00      	nop
 80046d2:	bf00      	nop
 80046d4:	3724      	adds	r7, #36	; 0x24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	40023800 	.word	0x40023800
 80046e4:	40013800 	.word	0x40013800
 80046e8:	40020000 	.word	0x40020000
 80046ec:	40020400 	.word	0x40020400
 80046f0:	40020800 	.word	0x40020800
 80046f4:	40020c00 	.word	0x40020c00
 80046f8:	40021000 	.word	0x40021000
 80046fc:	40021400 	.word	0x40021400
 8004700:	40021800 	.word	0x40021800
 8004704:	40021c00 	.word	0x40021c00
 8004708:	40013c00 	.word	0x40013c00

0800470c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	460b      	mov	r3, r1
 8004716:	807b      	strh	r3, [r7, #2]
 8004718:	4613      	mov	r3, r2
 800471a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800471c:	787b      	ldrb	r3, [r7, #1]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d003      	beq.n	800472a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004722:	887a      	ldrh	r2, [r7, #2]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004728:	e003      	b.n	8004732 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800472a:	887b      	ldrh	r3, [r7, #2]
 800472c:	041a      	lsls	r2, r3, #16
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	619a      	str	r2, [r3, #24]
}
 8004732:	bf00      	nop
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
	...

08004740 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	4603      	mov	r3, r0
 8004748:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800474a:	4b08      	ldr	r3, [pc, #32]	; (800476c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800474c:	695a      	ldr	r2, [r3, #20]
 800474e:	88fb      	ldrh	r3, [r7, #6]
 8004750:	4013      	ands	r3, r2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d006      	beq.n	8004764 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004756:	4a05      	ldr	r2, [pc, #20]	; (800476c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004758:	88fb      	ldrh	r3, [r7, #6]
 800475a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800475c:	88fb      	ldrh	r3, [r7, #6]
 800475e:	4618      	mov	r0, r3
 8004760:	f7fc fdc2 	bl	80012e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004764:	bf00      	nop
 8004766:	3708      	adds	r7, #8
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	40013c00 	.word	0x40013c00

08004770 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e12b      	b.n	80049da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d106      	bne.n	800479c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7ff f828 	bl	80037ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2224      	movs	r2, #36	; 0x24
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f022 0201 	bic.w	r2, r2, #1
 80047b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80047d4:	f000 fd80 	bl	80052d8 <HAL_RCC_GetPCLK1Freq>
 80047d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	4a81      	ldr	r2, [pc, #516]	; (80049e4 <HAL_I2C_Init+0x274>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d807      	bhi.n	80047f4 <HAL_I2C_Init+0x84>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4a80      	ldr	r2, [pc, #512]	; (80049e8 <HAL_I2C_Init+0x278>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	bf94      	ite	ls
 80047ec:	2301      	movls	r3, #1
 80047ee:	2300      	movhi	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	e006      	b.n	8004802 <HAL_I2C_Init+0x92>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4a7d      	ldr	r2, [pc, #500]	; (80049ec <HAL_I2C_Init+0x27c>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	bf94      	ite	ls
 80047fc:	2301      	movls	r3, #1
 80047fe:	2300      	movhi	r3, #0
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e0e7      	b.n	80049da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	4a78      	ldr	r2, [pc, #480]	; (80049f0 <HAL_I2C_Init+0x280>)
 800480e:	fba2 2303 	umull	r2, r3, r2, r3
 8004812:	0c9b      	lsrs	r3, r3, #18
 8004814:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	430a      	orrs	r2, r1
 8004828:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6a1b      	ldr	r3, [r3, #32]
 8004830:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	4a6a      	ldr	r2, [pc, #424]	; (80049e4 <HAL_I2C_Init+0x274>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d802      	bhi.n	8004844 <HAL_I2C_Init+0xd4>
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	3301      	adds	r3, #1
 8004842:	e009      	b.n	8004858 <HAL_I2C_Init+0xe8>
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800484a:	fb02 f303 	mul.w	r3, r2, r3
 800484e:	4a69      	ldr	r2, [pc, #420]	; (80049f4 <HAL_I2C_Init+0x284>)
 8004850:	fba2 2303 	umull	r2, r3, r2, r3
 8004854:	099b      	lsrs	r3, r3, #6
 8004856:	3301      	adds	r3, #1
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6812      	ldr	r2, [r2, #0]
 800485c:	430b      	orrs	r3, r1
 800485e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800486a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	495c      	ldr	r1, [pc, #368]	; (80049e4 <HAL_I2C_Init+0x274>)
 8004874:	428b      	cmp	r3, r1
 8004876:	d819      	bhi.n	80048ac <HAL_I2C_Init+0x13c>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	1e59      	subs	r1, r3, #1
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	fbb1 f3f3 	udiv	r3, r1, r3
 8004886:	1c59      	adds	r1, r3, #1
 8004888:	f640 73fc 	movw	r3, #4092	; 0xffc
 800488c:	400b      	ands	r3, r1
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00a      	beq.n	80048a8 <HAL_I2C_Init+0x138>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	1e59      	subs	r1, r3, #1
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	005b      	lsls	r3, r3, #1
 800489c:	fbb1 f3f3 	udiv	r3, r1, r3
 80048a0:	3301      	adds	r3, #1
 80048a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048a6:	e051      	b.n	800494c <HAL_I2C_Init+0x1dc>
 80048a8:	2304      	movs	r3, #4
 80048aa:	e04f      	b.n	800494c <HAL_I2C_Init+0x1dc>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d111      	bne.n	80048d8 <HAL_I2C_Init+0x168>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	1e58      	subs	r0, r3, #1
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6859      	ldr	r1, [r3, #4]
 80048bc:	460b      	mov	r3, r1
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	440b      	add	r3, r1
 80048c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80048c6:	3301      	adds	r3, #1
 80048c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	bf0c      	ite	eq
 80048d0:	2301      	moveq	r3, #1
 80048d2:	2300      	movne	r3, #0
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	e012      	b.n	80048fe <HAL_I2C_Init+0x18e>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	1e58      	subs	r0, r3, #1
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6859      	ldr	r1, [r3, #4]
 80048e0:	460b      	mov	r3, r1
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	440b      	add	r3, r1
 80048e6:	0099      	lsls	r1, r3, #2
 80048e8:	440b      	add	r3, r1
 80048ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80048ee:	3301      	adds	r3, #1
 80048f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	bf0c      	ite	eq
 80048f8:	2301      	moveq	r3, #1
 80048fa:	2300      	movne	r3, #0
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <HAL_I2C_Init+0x196>
 8004902:	2301      	movs	r3, #1
 8004904:	e022      	b.n	800494c <HAL_I2C_Init+0x1dc>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10e      	bne.n	800492c <HAL_I2C_Init+0x1bc>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	1e58      	subs	r0, r3, #1
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6859      	ldr	r1, [r3, #4]
 8004916:	460b      	mov	r3, r1
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	440b      	add	r3, r1
 800491c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004920:	3301      	adds	r3, #1
 8004922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800492a:	e00f      	b.n	800494c <HAL_I2C_Init+0x1dc>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	1e58      	subs	r0, r3, #1
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6859      	ldr	r1, [r3, #4]
 8004934:	460b      	mov	r3, r1
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	440b      	add	r3, r1
 800493a:	0099      	lsls	r1, r3, #2
 800493c:	440b      	add	r3, r1
 800493e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004942:	3301      	adds	r3, #1
 8004944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004948:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800494c:	6879      	ldr	r1, [r7, #4]
 800494e:	6809      	ldr	r1, [r1, #0]
 8004950:	4313      	orrs	r3, r2
 8004952:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	69da      	ldr	r2, [r3, #28]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	431a      	orrs	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800497a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	6911      	ldr	r1, [r2, #16]
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	68d2      	ldr	r2, [r2, #12]
 8004986:	4311      	orrs	r1, r2
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	6812      	ldr	r2, [r2, #0]
 800498c:	430b      	orrs	r3, r1
 800498e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	695a      	ldr	r2, [r3, #20]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	431a      	orrs	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f042 0201 	orr.w	r2, r2, #1
 80049ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2220      	movs	r2, #32
 80049c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	000186a0 	.word	0x000186a0
 80049e8:	001e847f 	.word	0x001e847f
 80049ec:	003d08ff 	.word	0x003d08ff
 80049f0:	431bde83 	.word	0x431bde83
 80049f4:	10624dd3 	.word	0x10624dd3

080049f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e267      	b.n	8004eda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d075      	beq.n	8004b02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a16:	4b88      	ldr	r3, [pc, #544]	; (8004c38 <HAL_RCC_OscConfig+0x240>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 030c 	and.w	r3, r3, #12
 8004a1e:	2b04      	cmp	r3, #4
 8004a20:	d00c      	beq.n	8004a3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a22:	4b85      	ldr	r3, [pc, #532]	; (8004c38 <HAL_RCC_OscConfig+0x240>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a2a:	2b08      	cmp	r3, #8
 8004a2c:	d112      	bne.n	8004a54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a2e:	4b82      	ldr	r3, [pc, #520]	; (8004c38 <HAL_RCC_OscConfig+0x240>)
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a3a:	d10b      	bne.n	8004a54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a3c:	4b7e      	ldr	r3, [pc, #504]	; (8004c38 <HAL_RCC_OscConfig+0x240>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d05b      	beq.n	8004b00 <HAL_RCC_OscConfig+0x108>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d157      	bne.n	8004b00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e242      	b.n	8004eda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a5c:	d106      	bne.n	8004a6c <HAL_RCC_OscConfig+0x74>
 8004a5e:	4b76      	ldr	r3, [pc, #472]	; (8004c38 <HAL_RCC_OscConfig+0x240>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a75      	ldr	r2, [pc, #468]	; (8004c38 <HAL_RCC_OscConfig+0x240>)
 8004a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a68:	6013      	str	r3, [r2, #0]
 8004a6a:	e01d      	b.n	8004aa8 <HAL_RCC_OscConfig+0xb0>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a74:	d10c      	bne.n	8004a90 <HAL_RCC_OscConfig+0x98>
 8004a76:	4b70      	ldr	r3, [pc, #448]	; (8004c38 <HAL_RCC_OscConfig+0x240>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a6f      	ldr	r2, [pc, #444]	; (8004c38 <HAL_RCC_OscConfig+0x240>)
 8004a7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a80:	6013      	str	r3, [r2, #0]
 8004a82:	4b6d      	ldr	r3, [pc, #436]	; (8004c38 <HAL_RCC_OscConfig+0x240>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a6c      	ldr	r2, [pc, #432]	; (8004c38 <HAL_RCC_OscConfig+0x240>)
 8004a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	e00b      	b.n	8004aa8 <HAL_RCC_OscConfig+0xb0>
 8004a90:	4b69      	ldr	r3, [pc, #420]	; (8004c38 <HAL_RCC_OscConfig+0x240>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a68      	ldr	r2, [pc, #416]	; (8004c38 <HAL_RCC_OscConfig+0x240>)
 8004a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a9a:	6013      	str	r3, [r2, #0]
 8004a9c:	4b66      	ldr	r3, [pc, #408]	; (8004c38 <HAL_RCC_OscConfig+0x240>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a65      	ldr	r2, [pc, #404]	; (8004c38 <HAL_RCC_OscConfig+0x240>)
 8004aa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d013      	beq.n	8004ad8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab0:	f7ff fabc 	bl	800402c <HAL_GetTick>
 8004ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ab6:	e008      	b.n	8004aca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ab8:	f7ff fab8 	bl	800402c <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	2b64      	cmp	r3, #100	; 0x64
 8004ac4:	d901      	bls.n	8004aca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e207      	b.n	8004eda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aca:	4b5b      	ldr	r3, [pc, #364]	; (8004c38 <HAL_RCC_OscConfig+0x240>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d0f0      	beq.n	8004ab8 <HAL_RCC_OscConfig+0xc0>
 8004ad6:	e014      	b.n	8004b02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad8:	f7ff faa8 	bl	800402c <HAL_GetTick>
 8004adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ade:	e008      	b.n	8004af2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ae0:	f7ff faa4 	bl	800402c <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b64      	cmp	r3, #100	; 0x64
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e1f3      	b.n	8004eda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004af2:	4b51      	ldr	r3, [pc, #324]	; (8004c38 <HAL_RCC_OscConfig+0x240>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1f0      	bne.n	8004ae0 <HAL_RCC_OscConfig+0xe8>
 8004afe:	e000      	b.n	8004b02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d063      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b0e:	4b4a      	ldr	r3, [pc, #296]	; (8004c38 <HAL_RCC_OscConfig+0x240>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 030c 	and.w	r3, r3, #12
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00b      	beq.n	8004b32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b1a:	4b47      	ldr	r3, [pc, #284]	; (8004c38 <HAL_RCC_OscConfig+0x240>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b22:	2b08      	cmp	r3, #8
 8004b24:	d11c      	bne.n	8004b60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b26:	4b44      	ldr	r3, [pc, #272]	; (8004c38 <HAL_RCC_OscConfig+0x240>)
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d116      	bne.n	8004b60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b32:	4b41      	ldr	r3, [pc, #260]	; (8004c38 <HAL_RCC_OscConfig+0x240>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d005      	beq.n	8004b4a <HAL_RCC_OscConfig+0x152>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d001      	beq.n	8004b4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e1c7      	b.n	8004eda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b4a:	4b3b      	ldr	r3, [pc, #236]	; (8004c38 <HAL_RCC_OscConfig+0x240>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	4937      	ldr	r1, [pc, #220]	; (8004c38 <HAL_RCC_OscConfig+0x240>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b5e:	e03a      	b.n	8004bd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d020      	beq.n	8004baa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b68:	4b34      	ldr	r3, [pc, #208]	; (8004c3c <HAL_RCC_OscConfig+0x244>)
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b6e:	f7ff fa5d 	bl	800402c <HAL_GetTick>
 8004b72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b74:	e008      	b.n	8004b88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b76:	f7ff fa59 	bl	800402c <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e1a8      	b.n	8004eda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b88:	4b2b      	ldr	r3, [pc, #172]	; (8004c38 <HAL_RCC_OscConfig+0x240>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d0f0      	beq.n	8004b76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b94:	4b28      	ldr	r3, [pc, #160]	; (8004c38 <HAL_RCC_OscConfig+0x240>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	00db      	lsls	r3, r3, #3
 8004ba2:	4925      	ldr	r1, [pc, #148]	; (8004c38 <HAL_RCC_OscConfig+0x240>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	600b      	str	r3, [r1, #0]
 8004ba8:	e015      	b.n	8004bd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004baa:	4b24      	ldr	r3, [pc, #144]	; (8004c3c <HAL_RCC_OscConfig+0x244>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb0:	f7ff fa3c 	bl	800402c <HAL_GetTick>
 8004bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bb6:	e008      	b.n	8004bca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bb8:	f7ff fa38 	bl	800402c <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e187      	b.n	8004eda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bca:	4b1b      	ldr	r3, [pc, #108]	; (8004c38 <HAL_RCC_OscConfig+0x240>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1f0      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0308 	and.w	r3, r3, #8
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d036      	beq.n	8004c50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d016      	beq.n	8004c18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bea:	4b15      	ldr	r3, [pc, #84]	; (8004c40 <HAL_RCC_OscConfig+0x248>)
 8004bec:	2201      	movs	r2, #1
 8004bee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf0:	f7ff fa1c 	bl	800402c <HAL_GetTick>
 8004bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bf8:	f7ff fa18 	bl	800402c <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e167      	b.n	8004eda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c0a:	4b0b      	ldr	r3, [pc, #44]	; (8004c38 <HAL_RCC_OscConfig+0x240>)
 8004c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0f0      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x200>
 8004c16:	e01b      	b.n	8004c50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c18:	4b09      	ldr	r3, [pc, #36]	; (8004c40 <HAL_RCC_OscConfig+0x248>)
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c1e:	f7ff fa05 	bl	800402c <HAL_GetTick>
 8004c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c24:	e00e      	b.n	8004c44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c26:	f7ff fa01 	bl	800402c <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d907      	bls.n	8004c44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e150      	b.n	8004eda <HAL_RCC_OscConfig+0x4e2>
 8004c38:	40023800 	.word	0x40023800
 8004c3c:	42470000 	.word	0x42470000
 8004c40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c44:	4b88      	ldr	r3, [pc, #544]	; (8004e68 <HAL_RCC_OscConfig+0x470>)
 8004c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1ea      	bne.n	8004c26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0304 	and.w	r3, r3, #4
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 8097 	beq.w	8004d8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c62:	4b81      	ldr	r3, [pc, #516]	; (8004e68 <HAL_RCC_OscConfig+0x470>)
 8004c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10f      	bne.n	8004c8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c6e:	2300      	movs	r3, #0
 8004c70:	60bb      	str	r3, [r7, #8]
 8004c72:	4b7d      	ldr	r3, [pc, #500]	; (8004e68 <HAL_RCC_OscConfig+0x470>)
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	4a7c      	ldr	r2, [pc, #496]	; (8004e68 <HAL_RCC_OscConfig+0x470>)
 8004c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8004c7e:	4b7a      	ldr	r3, [pc, #488]	; (8004e68 <HAL_RCC_OscConfig+0x470>)
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c86:	60bb      	str	r3, [r7, #8]
 8004c88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c8e:	4b77      	ldr	r3, [pc, #476]	; (8004e6c <HAL_RCC_OscConfig+0x474>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d118      	bne.n	8004ccc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c9a:	4b74      	ldr	r3, [pc, #464]	; (8004e6c <HAL_RCC_OscConfig+0x474>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a73      	ldr	r2, [pc, #460]	; (8004e6c <HAL_RCC_OscConfig+0x474>)
 8004ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ca4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ca6:	f7ff f9c1 	bl	800402c <HAL_GetTick>
 8004caa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cac:	e008      	b.n	8004cc0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cae:	f7ff f9bd 	bl	800402c <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d901      	bls.n	8004cc0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e10c      	b.n	8004eda <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cc0:	4b6a      	ldr	r3, [pc, #424]	; (8004e6c <HAL_RCC_OscConfig+0x474>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d0f0      	beq.n	8004cae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d106      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x2ea>
 8004cd4:	4b64      	ldr	r3, [pc, #400]	; (8004e68 <HAL_RCC_OscConfig+0x470>)
 8004cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd8:	4a63      	ldr	r2, [pc, #396]	; (8004e68 <HAL_RCC_OscConfig+0x470>)
 8004cda:	f043 0301 	orr.w	r3, r3, #1
 8004cde:	6713      	str	r3, [r2, #112]	; 0x70
 8004ce0:	e01c      	b.n	8004d1c <HAL_RCC_OscConfig+0x324>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	2b05      	cmp	r3, #5
 8004ce8:	d10c      	bne.n	8004d04 <HAL_RCC_OscConfig+0x30c>
 8004cea:	4b5f      	ldr	r3, [pc, #380]	; (8004e68 <HAL_RCC_OscConfig+0x470>)
 8004cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cee:	4a5e      	ldr	r2, [pc, #376]	; (8004e68 <HAL_RCC_OscConfig+0x470>)
 8004cf0:	f043 0304 	orr.w	r3, r3, #4
 8004cf4:	6713      	str	r3, [r2, #112]	; 0x70
 8004cf6:	4b5c      	ldr	r3, [pc, #368]	; (8004e68 <HAL_RCC_OscConfig+0x470>)
 8004cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cfa:	4a5b      	ldr	r2, [pc, #364]	; (8004e68 <HAL_RCC_OscConfig+0x470>)
 8004cfc:	f043 0301 	orr.w	r3, r3, #1
 8004d00:	6713      	str	r3, [r2, #112]	; 0x70
 8004d02:	e00b      	b.n	8004d1c <HAL_RCC_OscConfig+0x324>
 8004d04:	4b58      	ldr	r3, [pc, #352]	; (8004e68 <HAL_RCC_OscConfig+0x470>)
 8004d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d08:	4a57      	ldr	r2, [pc, #348]	; (8004e68 <HAL_RCC_OscConfig+0x470>)
 8004d0a:	f023 0301 	bic.w	r3, r3, #1
 8004d0e:	6713      	str	r3, [r2, #112]	; 0x70
 8004d10:	4b55      	ldr	r3, [pc, #340]	; (8004e68 <HAL_RCC_OscConfig+0x470>)
 8004d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d14:	4a54      	ldr	r2, [pc, #336]	; (8004e68 <HAL_RCC_OscConfig+0x470>)
 8004d16:	f023 0304 	bic.w	r3, r3, #4
 8004d1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d015      	beq.n	8004d50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d24:	f7ff f982 	bl	800402c <HAL_GetTick>
 8004d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d2a:	e00a      	b.n	8004d42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d2c:	f7ff f97e 	bl	800402c <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d901      	bls.n	8004d42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e0cb      	b.n	8004eda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d42:	4b49      	ldr	r3, [pc, #292]	; (8004e68 <HAL_RCC_OscConfig+0x470>)
 8004d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d0ee      	beq.n	8004d2c <HAL_RCC_OscConfig+0x334>
 8004d4e:	e014      	b.n	8004d7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d50:	f7ff f96c 	bl	800402c <HAL_GetTick>
 8004d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d56:	e00a      	b.n	8004d6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d58:	f7ff f968 	bl	800402c <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e0b5      	b.n	8004eda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d6e:	4b3e      	ldr	r3, [pc, #248]	; (8004e68 <HAL_RCC_OscConfig+0x470>)
 8004d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1ee      	bne.n	8004d58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d7a:	7dfb      	ldrb	r3, [r7, #23]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d105      	bne.n	8004d8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d80:	4b39      	ldr	r3, [pc, #228]	; (8004e68 <HAL_RCC_OscConfig+0x470>)
 8004d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d84:	4a38      	ldr	r2, [pc, #224]	; (8004e68 <HAL_RCC_OscConfig+0x470>)
 8004d86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 80a1 	beq.w	8004ed8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d96:	4b34      	ldr	r3, [pc, #208]	; (8004e68 <HAL_RCC_OscConfig+0x470>)
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f003 030c 	and.w	r3, r3, #12
 8004d9e:	2b08      	cmp	r3, #8
 8004da0:	d05c      	beq.n	8004e5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d141      	bne.n	8004e2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004daa:	4b31      	ldr	r3, [pc, #196]	; (8004e70 <HAL_RCC_OscConfig+0x478>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004db0:	f7ff f93c 	bl	800402c <HAL_GetTick>
 8004db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004db6:	e008      	b.n	8004dca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004db8:	f7ff f938 	bl	800402c <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e087      	b.n	8004eda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dca:	4b27      	ldr	r3, [pc, #156]	; (8004e68 <HAL_RCC_OscConfig+0x470>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1f0      	bne.n	8004db8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	69da      	ldr	r2, [r3, #28]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	431a      	orrs	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de4:	019b      	lsls	r3, r3, #6
 8004de6:	431a      	orrs	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dec:	085b      	lsrs	r3, r3, #1
 8004dee:	3b01      	subs	r3, #1
 8004df0:	041b      	lsls	r3, r3, #16
 8004df2:	431a      	orrs	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df8:	061b      	lsls	r3, r3, #24
 8004dfa:	491b      	ldr	r1, [pc, #108]	; (8004e68 <HAL_RCC_OscConfig+0x470>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e00:	4b1b      	ldr	r3, [pc, #108]	; (8004e70 <HAL_RCC_OscConfig+0x478>)
 8004e02:	2201      	movs	r2, #1
 8004e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e06:	f7ff f911 	bl	800402c <HAL_GetTick>
 8004e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e0c:	e008      	b.n	8004e20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e0e:	f7ff f90d 	bl	800402c <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d901      	bls.n	8004e20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e05c      	b.n	8004eda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e20:	4b11      	ldr	r3, [pc, #68]	; (8004e68 <HAL_RCC_OscConfig+0x470>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d0f0      	beq.n	8004e0e <HAL_RCC_OscConfig+0x416>
 8004e2c:	e054      	b.n	8004ed8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e2e:	4b10      	ldr	r3, [pc, #64]	; (8004e70 <HAL_RCC_OscConfig+0x478>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e34:	f7ff f8fa 	bl	800402c <HAL_GetTick>
 8004e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e3a:	e008      	b.n	8004e4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e3c:	f7ff f8f6 	bl	800402c <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e045      	b.n	8004eda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e4e:	4b06      	ldr	r3, [pc, #24]	; (8004e68 <HAL_RCC_OscConfig+0x470>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1f0      	bne.n	8004e3c <HAL_RCC_OscConfig+0x444>
 8004e5a:	e03d      	b.n	8004ed8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d107      	bne.n	8004e74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e038      	b.n	8004eda <HAL_RCC_OscConfig+0x4e2>
 8004e68:	40023800 	.word	0x40023800
 8004e6c:	40007000 	.word	0x40007000
 8004e70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e74:	4b1b      	ldr	r3, [pc, #108]	; (8004ee4 <HAL_RCC_OscConfig+0x4ec>)
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d028      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d121      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d11a      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004eaa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d111      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eba:	085b      	lsrs	r3, r3, #1
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d107      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ece:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d001      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e000      	b.n	8004eda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3718      	adds	r7, #24
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	40023800 	.word	0x40023800

08004ee8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e0cc      	b.n	8005096 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004efc:	4b68      	ldr	r3, [pc, #416]	; (80050a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0307 	and.w	r3, r3, #7
 8004f04:	683a      	ldr	r2, [r7, #0]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d90c      	bls.n	8004f24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f0a:	4b65      	ldr	r3, [pc, #404]	; (80050a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f0c:	683a      	ldr	r2, [r7, #0]
 8004f0e:	b2d2      	uxtb	r2, r2
 8004f10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f12:	4b63      	ldr	r3, [pc, #396]	; (80050a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0307 	and.w	r3, r3, #7
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d001      	beq.n	8004f24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e0b8      	b.n	8005096 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0302 	and.w	r3, r3, #2
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d020      	beq.n	8004f72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0304 	and.w	r3, r3, #4
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d005      	beq.n	8004f48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f3c:	4b59      	ldr	r3, [pc, #356]	; (80050a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	4a58      	ldr	r2, [pc, #352]	; (80050a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0308 	and.w	r3, r3, #8
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d005      	beq.n	8004f60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f54:	4b53      	ldr	r3, [pc, #332]	; (80050a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	4a52      	ldr	r2, [pc, #328]	; (80050a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f60:	4b50      	ldr	r3, [pc, #320]	; (80050a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	494d      	ldr	r1, [pc, #308]	; (80050a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d044      	beq.n	8005008 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d107      	bne.n	8004f96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f86:	4b47      	ldr	r3, [pc, #284]	; (80050a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d119      	bne.n	8004fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e07f      	b.n	8005096 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d003      	beq.n	8004fa6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fa2:	2b03      	cmp	r3, #3
 8004fa4:	d107      	bne.n	8004fb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fa6:	4b3f      	ldr	r3, [pc, #252]	; (80050a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d109      	bne.n	8004fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e06f      	b.n	8005096 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fb6:	4b3b      	ldr	r3, [pc, #236]	; (80050a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e067      	b.n	8005096 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fc6:	4b37      	ldr	r3, [pc, #220]	; (80050a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f023 0203 	bic.w	r2, r3, #3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	4934      	ldr	r1, [pc, #208]	; (80050a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fd8:	f7ff f828 	bl	800402c <HAL_GetTick>
 8004fdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fde:	e00a      	b.n	8004ff6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fe0:	f7ff f824 	bl	800402c <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e04f      	b.n	8005096 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ff6:	4b2b      	ldr	r3, [pc, #172]	; (80050a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f003 020c 	and.w	r2, r3, #12
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	429a      	cmp	r2, r3
 8005006:	d1eb      	bne.n	8004fe0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005008:	4b25      	ldr	r3, [pc, #148]	; (80050a0 <HAL_RCC_ClockConfig+0x1b8>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0307 	and.w	r3, r3, #7
 8005010:	683a      	ldr	r2, [r7, #0]
 8005012:	429a      	cmp	r2, r3
 8005014:	d20c      	bcs.n	8005030 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005016:	4b22      	ldr	r3, [pc, #136]	; (80050a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	b2d2      	uxtb	r2, r2
 800501c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800501e:	4b20      	ldr	r3, [pc, #128]	; (80050a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0307 	and.w	r3, r3, #7
 8005026:	683a      	ldr	r2, [r7, #0]
 8005028:	429a      	cmp	r2, r3
 800502a:	d001      	beq.n	8005030 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e032      	b.n	8005096 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0304 	and.w	r3, r3, #4
 8005038:	2b00      	cmp	r3, #0
 800503a:	d008      	beq.n	800504e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800503c:	4b19      	ldr	r3, [pc, #100]	; (80050a4 <HAL_RCC_ClockConfig+0x1bc>)
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	4916      	ldr	r1, [pc, #88]	; (80050a4 <HAL_RCC_ClockConfig+0x1bc>)
 800504a:	4313      	orrs	r3, r2
 800504c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0308 	and.w	r3, r3, #8
 8005056:	2b00      	cmp	r3, #0
 8005058:	d009      	beq.n	800506e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800505a:	4b12      	ldr	r3, [pc, #72]	; (80050a4 <HAL_RCC_ClockConfig+0x1bc>)
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	00db      	lsls	r3, r3, #3
 8005068:	490e      	ldr	r1, [pc, #56]	; (80050a4 <HAL_RCC_ClockConfig+0x1bc>)
 800506a:	4313      	orrs	r3, r2
 800506c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800506e:	f000 f821 	bl	80050b4 <HAL_RCC_GetSysClockFreq>
 8005072:	4602      	mov	r2, r0
 8005074:	4b0b      	ldr	r3, [pc, #44]	; (80050a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	091b      	lsrs	r3, r3, #4
 800507a:	f003 030f 	and.w	r3, r3, #15
 800507e:	490a      	ldr	r1, [pc, #40]	; (80050a8 <HAL_RCC_ClockConfig+0x1c0>)
 8005080:	5ccb      	ldrb	r3, [r1, r3]
 8005082:	fa22 f303 	lsr.w	r3, r2, r3
 8005086:	4a09      	ldr	r2, [pc, #36]	; (80050ac <HAL_RCC_ClockConfig+0x1c4>)
 8005088:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800508a:	4b09      	ldr	r3, [pc, #36]	; (80050b0 <HAL_RCC_ClockConfig+0x1c8>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4618      	mov	r0, r3
 8005090:	f7fe ff88 	bl	8003fa4 <HAL_InitTick>

  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	40023c00 	.word	0x40023c00
 80050a4:	40023800 	.word	0x40023800
 80050a8:	08007964 	.word	0x08007964
 80050ac:	20000000 	.word	0x20000000
 80050b0:	20000004 	.word	0x20000004

080050b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050b8:	b094      	sub	sp, #80	; 0x50
 80050ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80050bc:	2300      	movs	r3, #0
 80050be:	647b      	str	r3, [r7, #68]	; 0x44
 80050c0:	2300      	movs	r3, #0
 80050c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050c4:	2300      	movs	r3, #0
 80050c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050cc:	4b79      	ldr	r3, [pc, #484]	; (80052b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f003 030c 	and.w	r3, r3, #12
 80050d4:	2b08      	cmp	r3, #8
 80050d6:	d00d      	beq.n	80050f4 <HAL_RCC_GetSysClockFreq+0x40>
 80050d8:	2b08      	cmp	r3, #8
 80050da:	f200 80e1 	bhi.w	80052a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d002      	beq.n	80050e8 <HAL_RCC_GetSysClockFreq+0x34>
 80050e2:	2b04      	cmp	r3, #4
 80050e4:	d003      	beq.n	80050ee <HAL_RCC_GetSysClockFreq+0x3a>
 80050e6:	e0db      	b.n	80052a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050e8:	4b73      	ldr	r3, [pc, #460]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80050ea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80050ec:	e0db      	b.n	80052a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050ee:	4b73      	ldr	r3, [pc, #460]	; (80052bc <HAL_RCC_GetSysClockFreq+0x208>)
 80050f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050f2:	e0d8      	b.n	80052a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050f4:	4b6f      	ldr	r3, [pc, #444]	; (80052b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050fc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050fe:	4b6d      	ldr	r3, [pc, #436]	; (80052b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d063      	beq.n	80051d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800510a:	4b6a      	ldr	r3, [pc, #424]	; (80052b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	099b      	lsrs	r3, r3, #6
 8005110:	2200      	movs	r2, #0
 8005112:	63bb      	str	r3, [r7, #56]	; 0x38
 8005114:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800511c:	633b      	str	r3, [r7, #48]	; 0x30
 800511e:	2300      	movs	r3, #0
 8005120:	637b      	str	r3, [r7, #52]	; 0x34
 8005122:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005126:	4622      	mov	r2, r4
 8005128:	462b      	mov	r3, r5
 800512a:	f04f 0000 	mov.w	r0, #0
 800512e:	f04f 0100 	mov.w	r1, #0
 8005132:	0159      	lsls	r1, r3, #5
 8005134:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005138:	0150      	lsls	r0, r2, #5
 800513a:	4602      	mov	r2, r0
 800513c:	460b      	mov	r3, r1
 800513e:	4621      	mov	r1, r4
 8005140:	1a51      	subs	r1, r2, r1
 8005142:	6139      	str	r1, [r7, #16]
 8005144:	4629      	mov	r1, r5
 8005146:	eb63 0301 	sbc.w	r3, r3, r1
 800514a:	617b      	str	r3, [r7, #20]
 800514c:	f04f 0200 	mov.w	r2, #0
 8005150:	f04f 0300 	mov.w	r3, #0
 8005154:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005158:	4659      	mov	r1, fp
 800515a:	018b      	lsls	r3, r1, #6
 800515c:	4651      	mov	r1, sl
 800515e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005162:	4651      	mov	r1, sl
 8005164:	018a      	lsls	r2, r1, #6
 8005166:	4651      	mov	r1, sl
 8005168:	ebb2 0801 	subs.w	r8, r2, r1
 800516c:	4659      	mov	r1, fp
 800516e:	eb63 0901 	sbc.w	r9, r3, r1
 8005172:	f04f 0200 	mov.w	r2, #0
 8005176:	f04f 0300 	mov.w	r3, #0
 800517a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800517e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005182:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005186:	4690      	mov	r8, r2
 8005188:	4699      	mov	r9, r3
 800518a:	4623      	mov	r3, r4
 800518c:	eb18 0303 	adds.w	r3, r8, r3
 8005190:	60bb      	str	r3, [r7, #8]
 8005192:	462b      	mov	r3, r5
 8005194:	eb49 0303 	adc.w	r3, r9, r3
 8005198:	60fb      	str	r3, [r7, #12]
 800519a:	f04f 0200 	mov.w	r2, #0
 800519e:	f04f 0300 	mov.w	r3, #0
 80051a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80051a6:	4629      	mov	r1, r5
 80051a8:	024b      	lsls	r3, r1, #9
 80051aa:	4621      	mov	r1, r4
 80051ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80051b0:	4621      	mov	r1, r4
 80051b2:	024a      	lsls	r2, r1, #9
 80051b4:	4610      	mov	r0, r2
 80051b6:	4619      	mov	r1, r3
 80051b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051ba:	2200      	movs	r2, #0
 80051bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80051be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051c4:	f7fb faa0 	bl	8000708 <__aeabi_uldivmod>
 80051c8:	4602      	mov	r2, r0
 80051ca:	460b      	mov	r3, r1
 80051cc:	4613      	mov	r3, r2
 80051ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051d0:	e058      	b.n	8005284 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051d2:	4b38      	ldr	r3, [pc, #224]	; (80052b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	099b      	lsrs	r3, r3, #6
 80051d8:	2200      	movs	r2, #0
 80051da:	4618      	mov	r0, r3
 80051dc:	4611      	mov	r1, r2
 80051de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80051e2:	623b      	str	r3, [r7, #32]
 80051e4:	2300      	movs	r3, #0
 80051e6:	627b      	str	r3, [r7, #36]	; 0x24
 80051e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80051ec:	4642      	mov	r2, r8
 80051ee:	464b      	mov	r3, r9
 80051f0:	f04f 0000 	mov.w	r0, #0
 80051f4:	f04f 0100 	mov.w	r1, #0
 80051f8:	0159      	lsls	r1, r3, #5
 80051fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051fe:	0150      	lsls	r0, r2, #5
 8005200:	4602      	mov	r2, r0
 8005202:	460b      	mov	r3, r1
 8005204:	4641      	mov	r1, r8
 8005206:	ebb2 0a01 	subs.w	sl, r2, r1
 800520a:	4649      	mov	r1, r9
 800520c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005210:	f04f 0200 	mov.w	r2, #0
 8005214:	f04f 0300 	mov.w	r3, #0
 8005218:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800521c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005220:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005224:	ebb2 040a 	subs.w	r4, r2, sl
 8005228:	eb63 050b 	sbc.w	r5, r3, fp
 800522c:	f04f 0200 	mov.w	r2, #0
 8005230:	f04f 0300 	mov.w	r3, #0
 8005234:	00eb      	lsls	r3, r5, #3
 8005236:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800523a:	00e2      	lsls	r2, r4, #3
 800523c:	4614      	mov	r4, r2
 800523e:	461d      	mov	r5, r3
 8005240:	4643      	mov	r3, r8
 8005242:	18e3      	adds	r3, r4, r3
 8005244:	603b      	str	r3, [r7, #0]
 8005246:	464b      	mov	r3, r9
 8005248:	eb45 0303 	adc.w	r3, r5, r3
 800524c:	607b      	str	r3, [r7, #4]
 800524e:	f04f 0200 	mov.w	r2, #0
 8005252:	f04f 0300 	mov.w	r3, #0
 8005256:	e9d7 4500 	ldrd	r4, r5, [r7]
 800525a:	4629      	mov	r1, r5
 800525c:	028b      	lsls	r3, r1, #10
 800525e:	4621      	mov	r1, r4
 8005260:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005264:	4621      	mov	r1, r4
 8005266:	028a      	lsls	r2, r1, #10
 8005268:	4610      	mov	r0, r2
 800526a:	4619      	mov	r1, r3
 800526c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800526e:	2200      	movs	r2, #0
 8005270:	61bb      	str	r3, [r7, #24]
 8005272:	61fa      	str	r2, [r7, #28]
 8005274:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005278:	f7fb fa46 	bl	8000708 <__aeabi_uldivmod>
 800527c:	4602      	mov	r2, r0
 800527e:	460b      	mov	r3, r1
 8005280:	4613      	mov	r3, r2
 8005282:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005284:	4b0b      	ldr	r3, [pc, #44]	; (80052b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	0c1b      	lsrs	r3, r3, #16
 800528a:	f003 0303 	and.w	r3, r3, #3
 800528e:	3301      	adds	r3, #1
 8005290:	005b      	lsls	r3, r3, #1
 8005292:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005294:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005298:	fbb2 f3f3 	udiv	r3, r2, r3
 800529c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800529e:	e002      	b.n	80052a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052a0:	4b05      	ldr	r3, [pc, #20]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80052a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80052a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3750      	adds	r7, #80	; 0x50
 80052ac:	46bd      	mov	sp, r7
 80052ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052b2:	bf00      	nop
 80052b4:	40023800 	.word	0x40023800
 80052b8:	00f42400 	.word	0x00f42400
 80052bc:	007a1200 	.word	0x007a1200

080052c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052c0:	b480      	push	{r7}
 80052c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052c4:	4b03      	ldr	r3, [pc, #12]	; (80052d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80052c6:	681b      	ldr	r3, [r3, #0]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	20000000 	.word	0x20000000

080052d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80052dc:	f7ff fff0 	bl	80052c0 <HAL_RCC_GetHCLKFreq>
 80052e0:	4602      	mov	r2, r0
 80052e2:	4b05      	ldr	r3, [pc, #20]	; (80052f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	0a9b      	lsrs	r3, r3, #10
 80052e8:	f003 0307 	and.w	r3, r3, #7
 80052ec:	4903      	ldr	r1, [pc, #12]	; (80052fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80052ee:	5ccb      	ldrb	r3, [r1, r3]
 80052f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	40023800 	.word	0x40023800
 80052fc:	08007974 	.word	0x08007974

08005300 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005304:	f7ff ffdc 	bl	80052c0 <HAL_RCC_GetHCLKFreq>
 8005308:	4602      	mov	r2, r0
 800530a:	4b05      	ldr	r3, [pc, #20]	; (8005320 <HAL_RCC_GetPCLK2Freq+0x20>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	0b5b      	lsrs	r3, r3, #13
 8005310:	f003 0307 	and.w	r3, r3, #7
 8005314:	4903      	ldr	r1, [pc, #12]	; (8005324 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005316:	5ccb      	ldrb	r3, [r1, r3]
 8005318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800531c:	4618      	mov	r0, r3
 800531e:	bd80      	pop	{r7, pc}
 8005320:	40023800 	.word	0x40023800
 8005324:	08007974 	.word	0x08007974

08005328 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e07b      	b.n	8005432 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533e:	2b00      	cmp	r3, #0
 8005340:	d108      	bne.n	8005354 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800534a:	d009      	beq.n	8005360 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	61da      	str	r2, [r3, #28]
 8005352:	e005      	b.n	8005360 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d106      	bne.n	8005380 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f7fe fb60 	bl	8003a40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2202      	movs	r2, #2
 8005384:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005396:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80053a8:	431a      	orrs	r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053b2:	431a      	orrs	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	f003 0302 	and.w	r3, r3, #2
 80053bc:	431a      	orrs	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	431a      	orrs	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053d0:	431a      	orrs	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053da:	431a      	orrs	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e4:	ea42 0103 	orr.w	r1, r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	430a      	orrs	r2, r1
 80053f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	699b      	ldr	r3, [r3, #24]
 80053fc:	0c1b      	lsrs	r3, r3, #16
 80053fe:	f003 0104 	and.w	r1, r3, #4
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005406:	f003 0210 	and.w	r2, r3, #16
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	430a      	orrs	r2, r1
 8005410:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	69da      	ldr	r2, [r3, #28]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005420:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3708      	adds	r7, #8
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800543a:	b580      	push	{r7, lr}
 800543c:	b088      	sub	sp, #32
 800543e:	af00      	add	r7, sp, #0
 8005440:	60f8      	str	r0, [r7, #12]
 8005442:	60b9      	str	r1, [r7, #8]
 8005444:	603b      	str	r3, [r7, #0]
 8005446:	4613      	mov	r3, r2
 8005448:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800544a:	2300      	movs	r3, #0
 800544c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005454:	2b01      	cmp	r3, #1
 8005456:	d101      	bne.n	800545c <HAL_SPI_Transmit+0x22>
 8005458:	2302      	movs	r3, #2
 800545a:	e126      	b.n	80056aa <HAL_SPI_Transmit+0x270>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005464:	f7fe fde2 	bl	800402c <HAL_GetTick>
 8005468:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800546a:	88fb      	ldrh	r3, [r7, #6]
 800546c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b01      	cmp	r3, #1
 8005478:	d002      	beq.n	8005480 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800547a:	2302      	movs	r3, #2
 800547c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800547e:	e10b      	b.n	8005698 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d002      	beq.n	800548c <HAL_SPI_Transmit+0x52>
 8005486:	88fb      	ldrh	r3, [r7, #6]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d102      	bne.n	8005492 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005490:	e102      	b.n	8005698 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2203      	movs	r2, #3
 8005496:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	88fa      	ldrh	r2, [r7, #6]
 80054aa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	88fa      	ldrh	r2, [r7, #6]
 80054b0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054d8:	d10f      	bne.n	80054fa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005504:	2b40      	cmp	r3, #64	; 0x40
 8005506:	d007      	beq.n	8005518 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005516:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005520:	d14b      	bne.n	80055ba <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d002      	beq.n	8005530 <HAL_SPI_Transmit+0xf6>
 800552a:	8afb      	ldrh	r3, [r7, #22]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d13e      	bne.n	80055ae <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005534:	881a      	ldrh	r2, [r3, #0]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005540:	1c9a      	adds	r2, r3, #2
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800554a:	b29b      	uxth	r3, r3
 800554c:	3b01      	subs	r3, #1
 800554e:	b29a      	uxth	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005554:	e02b      	b.n	80055ae <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f003 0302 	and.w	r3, r3, #2
 8005560:	2b02      	cmp	r3, #2
 8005562:	d112      	bne.n	800558a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005568:	881a      	ldrh	r2, [r3, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005574:	1c9a      	adds	r2, r3, #2
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800557e:	b29b      	uxth	r3, r3
 8005580:	3b01      	subs	r3, #1
 8005582:	b29a      	uxth	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	86da      	strh	r2, [r3, #54]	; 0x36
 8005588:	e011      	b.n	80055ae <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800558a:	f7fe fd4f 	bl	800402c <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	429a      	cmp	r2, r3
 8005598:	d803      	bhi.n	80055a2 <HAL_SPI_Transmit+0x168>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a0:	d102      	bne.n	80055a8 <HAL_SPI_Transmit+0x16e>
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d102      	bne.n	80055ae <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80055ac:	e074      	b.n	8005698 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1ce      	bne.n	8005556 <HAL_SPI_Transmit+0x11c>
 80055b8:	e04c      	b.n	8005654 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d002      	beq.n	80055c8 <HAL_SPI_Transmit+0x18e>
 80055c2:	8afb      	ldrh	r3, [r7, #22]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d140      	bne.n	800564a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	330c      	adds	r3, #12
 80055d2:	7812      	ldrb	r2, [r2, #0]
 80055d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055da:	1c5a      	adds	r2, r3, #1
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	3b01      	subs	r3, #1
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80055ee:	e02c      	b.n	800564a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f003 0302 	and.w	r3, r3, #2
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d113      	bne.n	8005626 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	330c      	adds	r3, #12
 8005608:	7812      	ldrb	r2, [r2, #0]
 800560a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005610:	1c5a      	adds	r2, r3, #1
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800561a:	b29b      	uxth	r3, r3
 800561c:	3b01      	subs	r3, #1
 800561e:	b29a      	uxth	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	86da      	strh	r2, [r3, #54]	; 0x36
 8005624:	e011      	b.n	800564a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005626:	f7fe fd01 	bl	800402c <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	683a      	ldr	r2, [r7, #0]
 8005632:	429a      	cmp	r2, r3
 8005634:	d803      	bhi.n	800563e <HAL_SPI_Transmit+0x204>
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800563c:	d102      	bne.n	8005644 <HAL_SPI_Transmit+0x20a>
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d102      	bne.n	800564a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005648:	e026      	b.n	8005698 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800564e:	b29b      	uxth	r3, r3
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1cd      	bne.n	80055f0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005654:	69ba      	ldr	r2, [r7, #24]
 8005656:	6839      	ldr	r1, [r7, #0]
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	f000 fa55 	bl	8005b08 <SPI_EndRxTxTransaction>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d002      	beq.n	800566a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2220      	movs	r2, #32
 8005668:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d10a      	bne.n	8005688 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005672:	2300      	movs	r3, #0
 8005674:	613b      	str	r3, [r7, #16]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	613b      	str	r3, [r7, #16]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	613b      	str	r3, [r7, #16]
 8005686:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800568c:	2b00      	cmp	r3, #0
 800568e:	d002      	beq.n	8005696 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	77fb      	strb	r3, [r7, #31]
 8005694:	e000      	b.n	8005698 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005696:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80056a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3720      	adds	r7, #32
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b08c      	sub	sp, #48	; 0x30
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	60f8      	str	r0, [r7, #12]
 80056ba:	60b9      	str	r1, [r7, #8]
 80056bc:	607a      	str	r2, [r7, #4]
 80056be:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80056c0:	2301      	movs	r3, #1
 80056c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80056c4:	2300      	movs	r3, #0
 80056c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d101      	bne.n	80056d8 <HAL_SPI_TransmitReceive+0x26>
 80056d4:	2302      	movs	r3, #2
 80056d6:	e18a      	b.n	80059ee <HAL_SPI_TransmitReceive+0x33c>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056e0:	f7fe fca4 	bl	800402c <HAL_GetTick>
 80056e4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80056f6:	887b      	ldrh	r3, [r7, #2]
 80056f8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80056fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d00f      	beq.n	8005722 <HAL_SPI_TransmitReceive+0x70>
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005708:	d107      	bne.n	800571a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d103      	bne.n	800571a <HAL_SPI_TransmitReceive+0x68>
 8005712:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005716:	2b04      	cmp	r3, #4
 8005718:	d003      	beq.n	8005722 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800571a:	2302      	movs	r3, #2
 800571c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005720:	e15b      	b.n	80059da <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d005      	beq.n	8005734 <HAL_SPI_TransmitReceive+0x82>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d002      	beq.n	8005734 <HAL_SPI_TransmitReceive+0x82>
 800572e:	887b      	ldrh	r3, [r7, #2]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d103      	bne.n	800573c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800573a:	e14e      	b.n	80059da <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b04      	cmp	r3, #4
 8005746:	d003      	beq.n	8005750 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2205      	movs	r2, #5
 800574c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	887a      	ldrh	r2, [r7, #2]
 8005760:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	887a      	ldrh	r2, [r7, #2]
 8005766:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	887a      	ldrh	r2, [r7, #2]
 8005772:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	887a      	ldrh	r2, [r7, #2]
 8005778:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005790:	2b40      	cmp	r3, #64	; 0x40
 8005792:	d007      	beq.n	80057a4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057ac:	d178      	bne.n	80058a0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d002      	beq.n	80057bc <HAL_SPI_TransmitReceive+0x10a>
 80057b6:	8b7b      	ldrh	r3, [r7, #26]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d166      	bne.n	800588a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c0:	881a      	ldrh	r2, [r3, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057cc:	1c9a      	adds	r2, r3, #2
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	3b01      	subs	r3, #1
 80057da:	b29a      	uxth	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057e0:	e053      	b.n	800588a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f003 0302 	and.w	r3, r3, #2
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d11b      	bne.n	8005828 <HAL_SPI_TransmitReceive+0x176>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d016      	beq.n	8005828 <HAL_SPI_TransmitReceive+0x176>
 80057fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d113      	bne.n	8005828 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005804:	881a      	ldrh	r2, [r3, #0]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005810:	1c9a      	adds	r2, r3, #2
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800581a:	b29b      	uxth	r3, r3
 800581c:	3b01      	subs	r3, #1
 800581e:	b29a      	uxth	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005824:	2300      	movs	r3, #0
 8005826:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b01      	cmp	r3, #1
 8005834:	d119      	bne.n	800586a <HAL_SPI_TransmitReceive+0x1b8>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800583a:	b29b      	uxth	r3, r3
 800583c:	2b00      	cmp	r3, #0
 800583e:	d014      	beq.n	800586a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68da      	ldr	r2, [r3, #12]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584a:	b292      	uxth	r2, r2
 800584c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005852:	1c9a      	adds	r2, r3, #2
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800585c:	b29b      	uxth	r3, r3
 800585e:	3b01      	subs	r3, #1
 8005860:	b29a      	uxth	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005866:	2301      	movs	r3, #1
 8005868:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800586a:	f7fe fbdf 	bl	800402c <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005876:	429a      	cmp	r2, r3
 8005878:	d807      	bhi.n	800588a <HAL_SPI_TransmitReceive+0x1d8>
 800587a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005880:	d003      	beq.n	800588a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005888:	e0a7      	b.n	80059da <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800588e:	b29b      	uxth	r3, r3
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1a6      	bne.n	80057e2 <HAL_SPI_TransmitReceive+0x130>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005898:	b29b      	uxth	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1a1      	bne.n	80057e2 <HAL_SPI_TransmitReceive+0x130>
 800589e:	e07c      	b.n	800599a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d002      	beq.n	80058ae <HAL_SPI_TransmitReceive+0x1fc>
 80058a8:	8b7b      	ldrh	r3, [r7, #26]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d16b      	bne.n	8005986 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	330c      	adds	r3, #12
 80058b8:	7812      	ldrb	r2, [r2, #0]
 80058ba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c0:	1c5a      	adds	r2, r3, #1
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	3b01      	subs	r3, #1
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058d4:	e057      	b.n	8005986 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f003 0302 	and.w	r3, r3, #2
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d11c      	bne.n	800591e <HAL_SPI_TransmitReceive+0x26c>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d017      	beq.n	800591e <HAL_SPI_TransmitReceive+0x26c>
 80058ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d114      	bne.n	800591e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	330c      	adds	r3, #12
 80058fe:	7812      	ldrb	r2, [r2, #0]
 8005900:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005906:	1c5a      	adds	r2, r3, #1
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005910:	b29b      	uxth	r3, r3
 8005912:	3b01      	subs	r3, #1
 8005914:	b29a      	uxth	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800591a:	2300      	movs	r3, #0
 800591c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f003 0301 	and.w	r3, r3, #1
 8005928:	2b01      	cmp	r3, #1
 800592a:	d119      	bne.n	8005960 <HAL_SPI_TransmitReceive+0x2ae>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005930:	b29b      	uxth	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d014      	beq.n	8005960 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68da      	ldr	r2, [r3, #12]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005940:	b2d2      	uxtb	r2, r2
 8005942:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005948:	1c5a      	adds	r2, r3, #1
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005952:	b29b      	uxth	r3, r3
 8005954:	3b01      	subs	r3, #1
 8005956:	b29a      	uxth	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800595c:	2301      	movs	r3, #1
 800595e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005960:	f7fe fb64 	bl	800402c <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800596c:	429a      	cmp	r2, r3
 800596e:	d803      	bhi.n	8005978 <HAL_SPI_TransmitReceive+0x2c6>
 8005970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005976:	d102      	bne.n	800597e <HAL_SPI_TransmitReceive+0x2cc>
 8005978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597a:	2b00      	cmp	r3, #0
 800597c:	d103      	bne.n	8005986 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005984:	e029      	b.n	80059da <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800598a:	b29b      	uxth	r3, r3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1a2      	bne.n	80058d6 <HAL_SPI_TransmitReceive+0x224>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005994:	b29b      	uxth	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d19d      	bne.n	80058d6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800599a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800599c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f000 f8b2 	bl	8005b08 <SPI_EndRxTxTransaction>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d006      	beq.n	80059b8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2220      	movs	r2, #32
 80059b4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80059b6:	e010      	b.n	80059da <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d10b      	bne.n	80059d8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059c0:	2300      	movs	r3, #0
 80059c2:	617b      	str	r3, [r7, #20]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	617b      	str	r3, [r7, #20]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	617b      	str	r3, [r7, #20]
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	e000      	b.n	80059da <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80059d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80059ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3730      	adds	r7, #48	; 0x30
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
	...

080059f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b088      	sub	sp, #32
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	603b      	str	r3, [r7, #0]
 8005a04:	4613      	mov	r3, r2
 8005a06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a08:	f7fe fb10 	bl	800402c <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a10:	1a9b      	subs	r3, r3, r2
 8005a12:	683a      	ldr	r2, [r7, #0]
 8005a14:	4413      	add	r3, r2
 8005a16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a18:	f7fe fb08 	bl	800402c <HAL_GetTick>
 8005a1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a1e:	4b39      	ldr	r3, [pc, #228]	; (8005b04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	015b      	lsls	r3, r3, #5
 8005a24:	0d1b      	lsrs	r3, r3, #20
 8005a26:	69fa      	ldr	r2, [r7, #28]
 8005a28:	fb02 f303 	mul.w	r3, r2, r3
 8005a2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a2e:	e054      	b.n	8005ada <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a36:	d050      	beq.n	8005ada <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a38:	f7fe faf8 	bl	800402c <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	69fa      	ldr	r2, [r7, #28]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d902      	bls.n	8005a4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d13d      	bne.n	8005aca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	685a      	ldr	r2, [r3, #4]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a66:	d111      	bne.n	8005a8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a70:	d004      	beq.n	8005a7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a7a:	d107      	bne.n	8005a8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a94:	d10f      	bne.n	8005ab6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005aa4:	601a      	str	r2, [r3, #0]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ab4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e017      	b.n	8005afa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d101      	bne.n	8005ad4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	689a      	ldr	r2, [r3, #8]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	bf0c      	ite	eq
 8005aea:	2301      	moveq	r3, #1
 8005aec:	2300      	movne	r3, #0
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	461a      	mov	r2, r3
 8005af2:	79fb      	ldrb	r3, [r7, #7]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d19b      	bne.n	8005a30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3720      	adds	r7, #32
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	20000000 	.word	0x20000000

08005b08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b088      	sub	sp, #32
 8005b0c:	af02      	add	r7, sp, #8
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005b14:	4b1b      	ldr	r3, [pc, #108]	; (8005b84 <SPI_EndRxTxTransaction+0x7c>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a1b      	ldr	r2, [pc, #108]	; (8005b88 <SPI_EndRxTxTransaction+0x80>)
 8005b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b1e:	0d5b      	lsrs	r3, r3, #21
 8005b20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b24:	fb02 f303 	mul.w	r3, r2, r3
 8005b28:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b32:	d112      	bne.n	8005b5a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	9300      	str	r3, [sp, #0]
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	2180      	movs	r1, #128	; 0x80
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f7ff ff5a 	bl	80059f8 <SPI_WaitFlagStateUntilTimeout>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d016      	beq.n	8005b78 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b4e:	f043 0220 	orr.w	r2, r3, #32
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e00f      	b.n	8005b7a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00a      	beq.n	8005b76 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	3b01      	subs	r3, #1
 8005b64:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b70:	2b80      	cmp	r3, #128	; 0x80
 8005b72:	d0f2      	beq.n	8005b5a <SPI_EndRxTxTransaction+0x52>
 8005b74:	e000      	b.n	8005b78 <SPI_EndRxTxTransaction+0x70>
        break;
 8005b76:	bf00      	nop
  }

  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3718      	adds	r7, #24
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	20000000 	.word	0x20000000
 8005b88:	165e9f81 	.word	0x165e9f81

08005b8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d101      	bne.n	8005b9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e041      	b.n	8005c22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d106      	bne.n	8005bb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f7fe f8a2 	bl	8003cfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2202      	movs	r2, #2
 8005bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	3304      	adds	r3, #4
 8005bc8:	4619      	mov	r1, r3
 8005bca:	4610      	mov	r0, r2
 8005bcc:	f000 f82e 	bl	8005c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3708      	adds	r7, #8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
	...

08005c2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a40      	ldr	r2, [pc, #256]	; (8005d40 <TIM_Base_SetConfig+0x114>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d013      	beq.n	8005c6c <TIM_Base_SetConfig+0x40>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c4a:	d00f      	beq.n	8005c6c <TIM_Base_SetConfig+0x40>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a3d      	ldr	r2, [pc, #244]	; (8005d44 <TIM_Base_SetConfig+0x118>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d00b      	beq.n	8005c6c <TIM_Base_SetConfig+0x40>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a3c      	ldr	r2, [pc, #240]	; (8005d48 <TIM_Base_SetConfig+0x11c>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d007      	beq.n	8005c6c <TIM_Base_SetConfig+0x40>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a3b      	ldr	r2, [pc, #236]	; (8005d4c <TIM_Base_SetConfig+0x120>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d003      	beq.n	8005c6c <TIM_Base_SetConfig+0x40>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a3a      	ldr	r2, [pc, #232]	; (8005d50 <TIM_Base_SetConfig+0x124>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d108      	bne.n	8005c7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a2f      	ldr	r2, [pc, #188]	; (8005d40 <TIM_Base_SetConfig+0x114>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d02b      	beq.n	8005cde <TIM_Base_SetConfig+0xb2>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c8c:	d027      	beq.n	8005cde <TIM_Base_SetConfig+0xb2>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a2c      	ldr	r2, [pc, #176]	; (8005d44 <TIM_Base_SetConfig+0x118>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d023      	beq.n	8005cde <TIM_Base_SetConfig+0xb2>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a2b      	ldr	r2, [pc, #172]	; (8005d48 <TIM_Base_SetConfig+0x11c>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d01f      	beq.n	8005cde <TIM_Base_SetConfig+0xb2>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a2a      	ldr	r2, [pc, #168]	; (8005d4c <TIM_Base_SetConfig+0x120>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d01b      	beq.n	8005cde <TIM_Base_SetConfig+0xb2>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a29      	ldr	r2, [pc, #164]	; (8005d50 <TIM_Base_SetConfig+0x124>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d017      	beq.n	8005cde <TIM_Base_SetConfig+0xb2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a28      	ldr	r2, [pc, #160]	; (8005d54 <TIM_Base_SetConfig+0x128>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d013      	beq.n	8005cde <TIM_Base_SetConfig+0xb2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a27      	ldr	r2, [pc, #156]	; (8005d58 <TIM_Base_SetConfig+0x12c>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d00f      	beq.n	8005cde <TIM_Base_SetConfig+0xb2>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a26      	ldr	r2, [pc, #152]	; (8005d5c <TIM_Base_SetConfig+0x130>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d00b      	beq.n	8005cde <TIM_Base_SetConfig+0xb2>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a25      	ldr	r2, [pc, #148]	; (8005d60 <TIM_Base_SetConfig+0x134>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d007      	beq.n	8005cde <TIM_Base_SetConfig+0xb2>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a24      	ldr	r2, [pc, #144]	; (8005d64 <TIM_Base_SetConfig+0x138>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d003      	beq.n	8005cde <TIM_Base_SetConfig+0xb2>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a23      	ldr	r2, [pc, #140]	; (8005d68 <TIM_Base_SetConfig+0x13c>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d108      	bne.n	8005cf0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ce4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	689a      	ldr	r2, [r3, #8]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a0a      	ldr	r2, [pc, #40]	; (8005d40 <TIM_Base_SetConfig+0x114>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d003      	beq.n	8005d24 <TIM_Base_SetConfig+0xf8>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a0c      	ldr	r2, [pc, #48]	; (8005d50 <TIM_Base_SetConfig+0x124>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d103      	bne.n	8005d2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	691a      	ldr	r2, [r3, #16]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	615a      	str	r2, [r3, #20]
}
 8005d32:	bf00      	nop
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	40010000 	.word	0x40010000
 8005d44:	40000400 	.word	0x40000400
 8005d48:	40000800 	.word	0x40000800
 8005d4c:	40000c00 	.word	0x40000c00
 8005d50:	40010400 	.word	0x40010400
 8005d54:	40014000 	.word	0x40014000
 8005d58:	40014400 	.word	0x40014400
 8005d5c:	40014800 	.word	0x40014800
 8005d60:	40001800 	.word	0x40001800
 8005d64:	40001c00 	.word	0x40001c00
 8005d68:	40002000 	.word	0x40002000

08005d6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d101      	bne.n	8005d84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d80:	2302      	movs	r3, #2
 8005d82:	e05a      	b.n	8005e3a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2202      	movs	r2, #2
 8005d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005daa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a21      	ldr	r2, [pc, #132]	; (8005e48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d022      	beq.n	8005e0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dd0:	d01d      	beq.n	8005e0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a1d      	ldr	r2, [pc, #116]	; (8005e4c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d018      	beq.n	8005e0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a1b      	ldr	r2, [pc, #108]	; (8005e50 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d013      	beq.n	8005e0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a1a      	ldr	r2, [pc, #104]	; (8005e54 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d00e      	beq.n	8005e0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a18      	ldr	r2, [pc, #96]	; (8005e58 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d009      	beq.n	8005e0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a17      	ldr	r2, [pc, #92]	; (8005e5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d004      	beq.n	8005e0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a15      	ldr	r2, [pc, #84]	; (8005e60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d10c      	bne.n	8005e28 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3714      	adds	r7, #20
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	40010000 	.word	0x40010000
 8005e4c:	40000400 	.word	0x40000400
 8005e50:	40000800 	.word	0x40000800
 8005e54:	40000c00 	.word	0x40000c00
 8005e58:	40010400 	.word	0x40010400
 8005e5c:	40014000 	.word	0x40014000
 8005e60:	40001800 	.word	0x40001800

08005e64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d101      	bne.n	8005e76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e03f      	b.n	8005ef6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d106      	bne.n	8005e90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f7fd ffb2 	bl	8003df4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2224      	movs	r2, #36	; 0x24
 8005e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68da      	ldr	r2, [r3, #12]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ea6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 fd7b 	bl	80069a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	691a      	ldr	r2, [r3, #16]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ebc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	695a      	ldr	r2, [r3, #20]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ecc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68da      	ldr	r2, [r3, #12]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005edc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2220      	movs	r2, #32
 8005ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3708      	adds	r7, #8
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b08a      	sub	sp, #40	; 0x28
 8005f02:	af02      	add	r7, sp, #8
 8005f04:	60f8      	str	r0, [r7, #12]
 8005f06:	60b9      	str	r1, [r7, #8]
 8005f08:	603b      	str	r3, [r7, #0]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b20      	cmp	r3, #32
 8005f1c:	d17c      	bne.n	8006018 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d002      	beq.n	8005f2a <HAL_UART_Transmit+0x2c>
 8005f24:	88fb      	ldrh	r3, [r7, #6]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d101      	bne.n	8005f2e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e075      	b.n	800601a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d101      	bne.n	8005f3c <HAL_UART_Transmit+0x3e>
 8005f38:	2302      	movs	r3, #2
 8005f3a:	e06e      	b.n	800601a <HAL_UART_Transmit+0x11c>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2221      	movs	r2, #33	; 0x21
 8005f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f52:	f7fe f86b 	bl	800402c <HAL_GetTick>
 8005f56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	88fa      	ldrh	r2, [r7, #6]
 8005f5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	88fa      	ldrh	r2, [r7, #6]
 8005f62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f6c:	d108      	bne.n	8005f80 <HAL_UART_Transmit+0x82>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d104      	bne.n	8005f80 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005f76:	2300      	movs	r3, #0
 8005f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	61bb      	str	r3, [r7, #24]
 8005f7e:	e003      	b.n	8005f88 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f84:	2300      	movs	r3, #0
 8005f86:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005f90:	e02a      	b.n	8005fe8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	2180      	movs	r1, #128	; 0x80
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f000 faf9 	bl	8006594 <UART_WaitOnFlagUntilTimeout>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d001      	beq.n	8005fac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e036      	b.n	800601a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10b      	bne.n	8005fca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	881b      	ldrh	r3, [r3, #0]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	3302      	adds	r3, #2
 8005fc6:	61bb      	str	r3, [r7, #24]
 8005fc8:	e007      	b.n	8005fda <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	781a      	ldrb	r2, [r3, #0]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1cf      	bne.n	8005f92 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	9300      	str	r3, [sp, #0]
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	2140      	movs	r1, #64	; 0x40
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f000 fac9 	bl	8006594 <UART_WaitOnFlagUntilTimeout>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d001      	beq.n	800600c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	e006      	b.n	800601a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2220      	movs	r2, #32
 8006010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006014:	2300      	movs	r3, #0
 8006016:	e000      	b.n	800601a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006018:	2302      	movs	r3, #2
  }
}
 800601a:	4618      	mov	r0, r3
 800601c:	3720      	adds	r7, #32
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
	...

08006024 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b0ba      	sub	sp, #232	; 0xe8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800604a:	2300      	movs	r3, #0
 800604c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006050:	2300      	movs	r3, #0
 8006052:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800605a:	f003 030f 	and.w	r3, r3, #15
 800605e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006062:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10f      	bne.n	800608a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800606a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800606e:	f003 0320 	and.w	r3, r3, #32
 8006072:	2b00      	cmp	r3, #0
 8006074:	d009      	beq.n	800608a <HAL_UART_IRQHandler+0x66>
 8006076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800607a:	f003 0320 	and.w	r3, r3, #32
 800607e:	2b00      	cmp	r3, #0
 8006080:	d003      	beq.n	800608a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 fbd3 	bl	800682e <UART_Receive_IT>
      return;
 8006088:	e256      	b.n	8006538 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800608a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800608e:	2b00      	cmp	r3, #0
 8006090:	f000 80de 	beq.w	8006250 <HAL_UART_IRQHandler+0x22c>
 8006094:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006098:	f003 0301 	and.w	r3, r3, #1
 800609c:	2b00      	cmp	r3, #0
 800609e:	d106      	bne.n	80060ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80060a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f000 80d1 	beq.w	8006250 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80060ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00b      	beq.n	80060d2 <HAL_UART_IRQHandler+0xae>
 80060ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d005      	beq.n	80060d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ca:	f043 0201 	orr.w	r2, r3, #1
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060d6:	f003 0304 	and.w	r3, r3, #4
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00b      	beq.n	80060f6 <HAL_UART_IRQHandler+0xd2>
 80060de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d005      	beq.n	80060f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ee:	f043 0202 	orr.w	r2, r3, #2
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060fa:	f003 0302 	and.w	r3, r3, #2
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00b      	beq.n	800611a <HAL_UART_IRQHandler+0xf6>
 8006102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b00      	cmp	r3, #0
 800610c:	d005      	beq.n	800611a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006112:	f043 0204 	orr.w	r2, r3, #4
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800611a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800611e:	f003 0308 	and.w	r3, r3, #8
 8006122:	2b00      	cmp	r3, #0
 8006124:	d011      	beq.n	800614a <HAL_UART_IRQHandler+0x126>
 8006126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800612a:	f003 0320 	and.w	r3, r3, #32
 800612e:	2b00      	cmp	r3, #0
 8006130:	d105      	bne.n	800613e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006132:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006136:	f003 0301 	and.w	r3, r3, #1
 800613a:	2b00      	cmp	r3, #0
 800613c:	d005      	beq.n	800614a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006142:	f043 0208 	orr.w	r2, r3, #8
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614e:	2b00      	cmp	r3, #0
 8006150:	f000 81ed 	beq.w	800652e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006158:	f003 0320 	and.w	r3, r3, #32
 800615c:	2b00      	cmp	r3, #0
 800615e:	d008      	beq.n	8006172 <HAL_UART_IRQHandler+0x14e>
 8006160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006164:	f003 0320 	and.w	r3, r3, #32
 8006168:	2b00      	cmp	r3, #0
 800616a:	d002      	beq.n	8006172 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 fb5e 	bl	800682e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	695b      	ldr	r3, [r3, #20]
 8006178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800617c:	2b40      	cmp	r3, #64	; 0x40
 800617e:	bf0c      	ite	eq
 8006180:	2301      	moveq	r3, #1
 8006182:	2300      	movne	r3, #0
 8006184:	b2db      	uxtb	r3, r3
 8006186:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618e:	f003 0308 	and.w	r3, r3, #8
 8006192:	2b00      	cmp	r3, #0
 8006194:	d103      	bne.n	800619e <HAL_UART_IRQHandler+0x17a>
 8006196:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800619a:	2b00      	cmp	r3, #0
 800619c:	d04f      	beq.n	800623e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 fa66 	bl	8006670 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ae:	2b40      	cmp	r3, #64	; 0x40
 80061b0:	d141      	bne.n	8006236 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	3314      	adds	r3, #20
 80061b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061c0:	e853 3f00 	ldrex	r3, [r3]
 80061c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80061c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	3314      	adds	r3, #20
 80061da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80061de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80061e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80061ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80061ee:	e841 2300 	strex	r3, r2, [r1]
 80061f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80061f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1d9      	bne.n	80061b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006202:	2b00      	cmp	r3, #0
 8006204:	d013      	beq.n	800622e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620a:	4a7d      	ldr	r2, [pc, #500]	; (8006400 <HAL_UART_IRQHandler+0x3dc>)
 800620c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006212:	4618      	mov	r0, r3
 8006214:	f7fe f8bb 	bl	800438e <HAL_DMA_Abort_IT>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d016      	beq.n	800624c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006228:	4610      	mov	r0, r2
 800622a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800622c:	e00e      	b.n	800624c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f99a 	bl	8006568 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006234:	e00a      	b.n	800624c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f996 	bl	8006568 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800623c:	e006      	b.n	800624c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f992 	bl	8006568 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800624a:	e170      	b.n	800652e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800624c:	bf00      	nop
    return;
 800624e:	e16e      	b.n	800652e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006254:	2b01      	cmp	r3, #1
 8006256:	f040 814a 	bne.w	80064ee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800625a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800625e:	f003 0310 	and.w	r3, r3, #16
 8006262:	2b00      	cmp	r3, #0
 8006264:	f000 8143 	beq.w	80064ee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800626c:	f003 0310 	and.w	r3, r3, #16
 8006270:	2b00      	cmp	r3, #0
 8006272:	f000 813c 	beq.w	80064ee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006276:	2300      	movs	r3, #0
 8006278:	60bb      	str	r3, [r7, #8]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	60bb      	str	r3, [r7, #8]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	60bb      	str	r3, [r7, #8]
 800628a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006296:	2b40      	cmp	r3, #64	; 0x40
 8006298:	f040 80b4 	bne.w	8006404 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80062a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f000 8140 	beq.w	8006532 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062ba:	429a      	cmp	r2, r3
 80062bc:	f080 8139 	bcs.w	8006532 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062c6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062d2:	f000 8088 	beq.w	80063e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	330c      	adds	r3, #12
 80062dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80062e4:	e853 3f00 	ldrex	r3, [r3]
 80062e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80062ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	330c      	adds	r3, #12
 80062fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006302:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006306:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800630e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006312:	e841 2300 	strex	r3, r2, [r1]
 8006316:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800631a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1d9      	bne.n	80062d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	3314      	adds	r3, #20
 8006328:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800632c:	e853 3f00 	ldrex	r3, [r3]
 8006330:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006332:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006334:	f023 0301 	bic.w	r3, r3, #1
 8006338:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	3314      	adds	r3, #20
 8006342:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006346:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800634a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800634e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006352:	e841 2300 	strex	r3, r2, [r1]
 8006356:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006358:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1e1      	bne.n	8006322 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	3314      	adds	r3, #20
 8006364:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006366:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006368:	e853 3f00 	ldrex	r3, [r3]
 800636c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800636e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006370:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006374:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	3314      	adds	r3, #20
 800637e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006382:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006384:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006386:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006388:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800638a:	e841 2300 	strex	r3, r2, [r1]
 800638e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006390:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1e3      	bne.n	800635e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2220      	movs	r2, #32
 800639a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	330c      	adds	r3, #12
 80063aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063ae:	e853 3f00 	ldrex	r3, [r3]
 80063b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80063b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063b6:	f023 0310 	bic.w	r3, r3, #16
 80063ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	330c      	adds	r3, #12
 80063c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80063c8:	65ba      	str	r2, [r7, #88]	; 0x58
 80063ca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80063ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063d0:	e841 2300 	strex	r3, r2, [r1]
 80063d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80063d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1e3      	bne.n	80063a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7fd ff64 	bl	80042ae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	4619      	mov	r1, r3
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 f8c0 	bl	800657c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80063fc:	e099      	b.n	8006532 <HAL_UART_IRQHandler+0x50e>
 80063fe:	bf00      	nop
 8006400:	08006737 	.word	0x08006737
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800640c:	b29b      	uxth	r3, r3
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006418:	b29b      	uxth	r3, r3
 800641a:	2b00      	cmp	r3, #0
 800641c:	f000 808b 	beq.w	8006536 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006420:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006424:	2b00      	cmp	r3, #0
 8006426:	f000 8086 	beq.w	8006536 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	330c      	adds	r3, #12
 8006430:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006434:	e853 3f00 	ldrex	r3, [r3]
 8006438:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800643a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800643c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006440:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	330c      	adds	r3, #12
 800644a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800644e:	647a      	str	r2, [r7, #68]	; 0x44
 8006450:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006452:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006454:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006456:	e841 2300 	strex	r3, r2, [r1]
 800645a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800645c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1e3      	bne.n	800642a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	3314      	adds	r3, #20
 8006468:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646c:	e853 3f00 	ldrex	r3, [r3]
 8006470:	623b      	str	r3, [r7, #32]
   return(result);
 8006472:	6a3b      	ldr	r3, [r7, #32]
 8006474:	f023 0301 	bic.w	r3, r3, #1
 8006478:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	3314      	adds	r3, #20
 8006482:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006486:	633a      	str	r2, [r7, #48]	; 0x30
 8006488:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800648c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800648e:	e841 2300 	strex	r3, r2, [r1]
 8006492:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1e3      	bne.n	8006462 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2220      	movs	r2, #32
 800649e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	330c      	adds	r3, #12
 80064ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	e853 3f00 	ldrex	r3, [r3]
 80064b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f023 0310 	bic.w	r3, r3, #16
 80064be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	330c      	adds	r3, #12
 80064c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80064cc:	61fa      	str	r2, [r7, #28]
 80064ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d0:	69b9      	ldr	r1, [r7, #24]
 80064d2:	69fa      	ldr	r2, [r7, #28]
 80064d4:	e841 2300 	strex	r3, r2, [r1]
 80064d8:	617b      	str	r3, [r7, #20]
   return(result);
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1e3      	bne.n	80064a8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80064e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80064e4:	4619      	mov	r1, r3
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f848 	bl	800657c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80064ec:	e023      	b.n	8006536 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80064ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d009      	beq.n	800650e <HAL_UART_IRQHandler+0x4ea>
 80064fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f929 	bl	800675e <UART_Transmit_IT>
    return;
 800650c:	e014      	b.n	8006538 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800650e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00e      	beq.n	8006538 <HAL_UART_IRQHandler+0x514>
 800651a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800651e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006522:	2b00      	cmp	r3, #0
 8006524:	d008      	beq.n	8006538 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f969 	bl	80067fe <UART_EndTransmit_IT>
    return;
 800652c:	e004      	b.n	8006538 <HAL_UART_IRQHandler+0x514>
    return;
 800652e:	bf00      	nop
 8006530:	e002      	b.n	8006538 <HAL_UART_IRQHandler+0x514>
      return;
 8006532:	bf00      	nop
 8006534:	e000      	b.n	8006538 <HAL_UART_IRQHandler+0x514>
      return;
 8006536:	bf00      	nop
  }
}
 8006538:	37e8      	adds	r7, #232	; 0xe8
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop

08006540 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800655c:	bf00      	nop
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006570:	bf00      	nop
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	460b      	mov	r3, r1
 8006586:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b090      	sub	sp, #64	; 0x40
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	603b      	str	r3, [r7, #0]
 80065a0:	4613      	mov	r3, r2
 80065a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065a4:	e050      	b.n	8006648 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ac:	d04c      	beq.n	8006648 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80065ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d007      	beq.n	80065c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80065b4:	f7fd fd3a 	bl	800402c <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d241      	bcs.n	8006648 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	330c      	adds	r3, #12
 80065ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ce:	e853 3f00 	ldrex	r3, [r3]
 80065d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	330c      	adds	r3, #12
 80065e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80065e4:	637a      	str	r2, [r7, #52]	; 0x34
 80065e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065ec:	e841 2300 	strex	r3, r2, [r1]
 80065f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80065f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1e5      	bne.n	80065c4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	3314      	adds	r3, #20
 80065fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	e853 3f00 	ldrex	r3, [r3]
 8006606:	613b      	str	r3, [r7, #16]
   return(result);
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	f023 0301 	bic.w	r3, r3, #1
 800660e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	3314      	adds	r3, #20
 8006616:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006618:	623a      	str	r2, [r7, #32]
 800661a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661c:	69f9      	ldr	r1, [r7, #28]
 800661e:	6a3a      	ldr	r2, [r7, #32]
 8006620:	e841 2300 	strex	r3, r2, [r1]
 8006624:	61bb      	str	r3, [r7, #24]
   return(result);
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1e5      	bne.n	80065f8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2220      	movs	r2, #32
 8006630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2220      	movs	r2, #32
 8006638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006644:	2303      	movs	r3, #3
 8006646:	e00f      	b.n	8006668 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	4013      	ands	r3, r2
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	429a      	cmp	r2, r3
 8006656:	bf0c      	ite	eq
 8006658:	2301      	moveq	r3, #1
 800665a:	2300      	movne	r3, #0
 800665c:	b2db      	uxtb	r3, r3
 800665e:	461a      	mov	r2, r3
 8006660:	79fb      	ldrb	r3, [r7, #7]
 8006662:	429a      	cmp	r2, r3
 8006664:	d09f      	beq.n	80065a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	3740      	adds	r7, #64	; 0x40
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006670:	b480      	push	{r7}
 8006672:	b095      	sub	sp, #84	; 0x54
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	330c      	adds	r3, #12
 800667e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006682:	e853 3f00 	ldrex	r3, [r3]
 8006686:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800668e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	330c      	adds	r3, #12
 8006696:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006698:	643a      	str	r2, [r7, #64]	; 0x40
 800669a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800669e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066a0:	e841 2300 	strex	r3, r2, [r1]
 80066a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1e5      	bne.n	8006678 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	3314      	adds	r3, #20
 80066b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b4:	6a3b      	ldr	r3, [r7, #32]
 80066b6:	e853 3f00 	ldrex	r3, [r3]
 80066ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	f023 0301 	bic.w	r3, r3, #1
 80066c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	3314      	adds	r3, #20
 80066ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066d4:	e841 2300 	strex	r3, r2, [r1]
 80066d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1e5      	bne.n	80066ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d119      	bne.n	800671c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	330c      	adds	r3, #12
 80066ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	e853 3f00 	ldrex	r3, [r3]
 80066f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	f023 0310 	bic.w	r3, r3, #16
 80066fe:	647b      	str	r3, [r7, #68]	; 0x44
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	330c      	adds	r3, #12
 8006706:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006708:	61ba      	str	r2, [r7, #24]
 800670a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670c:	6979      	ldr	r1, [r7, #20]
 800670e:	69ba      	ldr	r2, [r7, #24]
 8006710:	e841 2300 	strex	r3, r2, [r1]
 8006714:	613b      	str	r3, [r7, #16]
   return(result);
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1e5      	bne.n	80066e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2220      	movs	r2, #32
 8006720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	631a      	str	r2, [r3, #48]	; 0x30
}
 800672a:	bf00      	nop
 800672c:	3754      	adds	r7, #84	; 0x54
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr

08006736 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006736:	b580      	push	{r7, lr}
 8006738:	b084      	sub	sp, #16
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006742:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006750:	68f8      	ldr	r0, [r7, #12]
 8006752:	f7ff ff09 	bl	8006568 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006756:	bf00      	nop
 8006758:	3710      	adds	r7, #16
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800675e:	b480      	push	{r7}
 8006760:	b085      	sub	sp, #20
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b21      	cmp	r3, #33	; 0x21
 8006770:	d13e      	bne.n	80067f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800677a:	d114      	bne.n	80067a6 <UART_Transmit_IT+0x48>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d110      	bne.n	80067a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a1b      	ldr	r3, [r3, #32]
 8006788:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	881b      	ldrh	r3, [r3, #0]
 800678e:	461a      	mov	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006798:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	1c9a      	adds	r2, r3, #2
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	621a      	str	r2, [r3, #32]
 80067a4:	e008      	b.n	80067b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	1c59      	adds	r1, r3, #1
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	6211      	str	r1, [r2, #32]
 80067b0:	781a      	ldrb	r2, [r3, #0]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067bc:	b29b      	uxth	r3, r3
 80067be:	3b01      	subs	r3, #1
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	4619      	mov	r1, r3
 80067c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d10f      	bne.n	80067ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68da      	ldr	r2, [r3, #12]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68da      	ldr	r2, [r3, #12]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80067ec:	2300      	movs	r3, #0
 80067ee:	e000      	b.n	80067f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80067f0:	2302      	movs	r3, #2
  }
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3714      	adds	r7, #20
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b082      	sub	sp, #8
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68da      	ldr	r2, [r3, #12]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006814:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2220      	movs	r2, #32
 800681a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f7ff fe8e 	bl	8006540 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3708      	adds	r7, #8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b08c      	sub	sp, #48	; 0x30
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b22      	cmp	r3, #34	; 0x22
 8006840:	f040 80ab 	bne.w	800699a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800684c:	d117      	bne.n	800687e <UART_Receive_IT+0x50>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d113      	bne.n	800687e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006856:	2300      	movs	r3, #0
 8006858:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	b29b      	uxth	r3, r3
 8006868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800686c:	b29a      	uxth	r2, r3
 800686e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006870:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006876:	1c9a      	adds	r2, r3, #2
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	629a      	str	r2, [r3, #40]	; 0x28
 800687c:	e026      	b.n	80068cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006882:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006884:	2300      	movs	r3, #0
 8006886:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006890:	d007      	beq.n	80068a2 <UART_Receive_IT+0x74>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d10a      	bne.n	80068b0 <UART_Receive_IT+0x82>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d106      	bne.n	80068b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ac:	701a      	strb	r2, [r3, #0]
 80068ae:	e008      	b.n	80068c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068bc:	b2da      	uxtb	r2, r3
 80068be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c6:	1c5a      	adds	r2, r3, #1
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	3b01      	subs	r3, #1
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	4619      	mov	r1, r3
 80068da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d15a      	bne.n	8006996 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68da      	ldr	r2, [r3, #12]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f022 0220 	bic.w	r2, r2, #32
 80068ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	695a      	ldr	r2, [r3, #20]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f022 0201 	bic.w	r2, r2, #1
 800690e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2220      	movs	r2, #32
 8006914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691c:	2b01      	cmp	r3, #1
 800691e:	d135      	bne.n	800698c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	330c      	adds	r3, #12
 800692c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	e853 3f00 	ldrex	r3, [r3]
 8006934:	613b      	str	r3, [r7, #16]
   return(result);
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	f023 0310 	bic.w	r3, r3, #16
 800693c:	627b      	str	r3, [r7, #36]	; 0x24
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	330c      	adds	r3, #12
 8006944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006946:	623a      	str	r2, [r7, #32]
 8006948:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694a:	69f9      	ldr	r1, [r7, #28]
 800694c:	6a3a      	ldr	r2, [r7, #32]
 800694e:	e841 2300 	strex	r3, r2, [r1]
 8006952:	61bb      	str	r3, [r7, #24]
   return(result);
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1e5      	bne.n	8006926 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0310 	and.w	r3, r3, #16
 8006964:	2b10      	cmp	r3, #16
 8006966:	d10a      	bne.n	800697e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006968:	2300      	movs	r3, #0
 800696a:	60fb      	str	r3, [r7, #12]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	60fb      	str	r3, [r7, #12]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	60fb      	str	r3, [r7, #12]
 800697c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006982:	4619      	mov	r1, r3
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f7ff fdf9 	bl	800657c <HAL_UARTEx_RxEventCallback>
 800698a:	e002      	b.n	8006992 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f7ff fde1 	bl	8006554 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006992:	2300      	movs	r3, #0
 8006994:	e002      	b.n	800699c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006996:	2300      	movs	r3, #0
 8006998:	e000      	b.n	800699c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800699a:	2302      	movs	r3, #2
  }
}
 800699c:	4618      	mov	r0, r3
 800699e:	3730      	adds	r7, #48	; 0x30
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069a8:	b0c0      	sub	sp, #256	; 0x100
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80069bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069c0:	68d9      	ldr	r1, [r3, #12]
 80069c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	ea40 0301 	orr.w	r3, r0, r1
 80069cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069d2:	689a      	ldr	r2, [r3, #8]
 80069d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	431a      	orrs	r2, r3
 80069dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	431a      	orrs	r2, r3
 80069e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069e8:	69db      	ldr	r3, [r3, #28]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80069f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80069fc:	f021 010c 	bic.w	r1, r1, #12
 8006a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a0a:	430b      	orrs	r3, r1
 8006a0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	695b      	ldr	r3, [r3, #20]
 8006a16:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a1e:	6999      	ldr	r1, [r3, #24]
 8006a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	ea40 0301 	orr.w	r3, r0, r1
 8006a2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	4b8f      	ldr	r3, [pc, #572]	; (8006c70 <UART_SetConfig+0x2cc>)
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d005      	beq.n	8006a44 <UART_SetConfig+0xa0>
 8006a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	4b8d      	ldr	r3, [pc, #564]	; (8006c74 <UART_SetConfig+0x2d0>)
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d104      	bne.n	8006a4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a44:	f7fe fc5c 	bl	8005300 <HAL_RCC_GetPCLK2Freq>
 8006a48:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006a4c:	e003      	b.n	8006a56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a4e:	f7fe fc43 	bl	80052d8 <HAL_RCC_GetPCLK1Freq>
 8006a52:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a5a:	69db      	ldr	r3, [r3, #28]
 8006a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a60:	f040 810c 	bne.w	8006c7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a6e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006a72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006a76:	4622      	mov	r2, r4
 8006a78:	462b      	mov	r3, r5
 8006a7a:	1891      	adds	r1, r2, r2
 8006a7c:	65b9      	str	r1, [r7, #88]	; 0x58
 8006a7e:	415b      	adcs	r3, r3
 8006a80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006a86:	4621      	mov	r1, r4
 8006a88:	eb12 0801 	adds.w	r8, r2, r1
 8006a8c:	4629      	mov	r1, r5
 8006a8e:	eb43 0901 	adc.w	r9, r3, r1
 8006a92:	f04f 0200 	mov.w	r2, #0
 8006a96:	f04f 0300 	mov.w	r3, #0
 8006a9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006aa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006aa6:	4690      	mov	r8, r2
 8006aa8:	4699      	mov	r9, r3
 8006aaa:	4623      	mov	r3, r4
 8006aac:	eb18 0303 	adds.w	r3, r8, r3
 8006ab0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006ab4:	462b      	mov	r3, r5
 8006ab6:	eb49 0303 	adc.w	r3, r9, r3
 8006aba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006aca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006ace:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	18db      	adds	r3, r3, r3
 8006ad6:	653b      	str	r3, [r7, #80]	; 0x50
 8006ad8:	4613      	mov	r3, r2
 8006ada:	eb42 0303 	adc.w	r3, r2, r3
 8006ade:	657b      	str	r3, [r7, #84]	; 0x54
 8006ae0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006ae4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006ae8:	f7f9 fe0e 	bl	8000708 <__aeabi_uldivmod>
 8006aec:	4602      	mov	r2, r0
 8006aee:	460b      	mov	r3, r1
 8006af0:	4b61      	ldr	r3, [pc, #388]	; (8006c78 <UART_SetConfig+0x2d4>)
 8006af2:	fba3 2302 	umull	r2, r3, r3, r2
 8006af6:	095b      	lsrs	r3, r3, #5
 8006af8:	011c      	lsls	r4, r3, #4
 8006afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006afe:	2200      	movs	r2, #0
 8006b00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b04:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006b08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006b0c:	4642      	mov	r2, r8
 8006b0e:	464b      	mov	r3, r9
 8006b10:	1891      	adds	r1, r2, r2
 8006b12:	64b9      	str	r1, [r7, #72]	; 0x48
 8006b14:	415b      	adcs	r3, r3
 8006b16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006b1c:	4641      	mov	r1, r8
 8006b1e:	eb12 0a01 	adds.w	sl, r2, r1
 8006b22:	4649      	mov	r1, r9
 8006b24:	eb43 0b01 	adc.w	fp, r3, r1
 8006b28:	f04f 0200 	mov.w	r2, #0
 8006b2c:	f04f 0300 	mov.w	r3, #0
 8006b30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b3c:	4692      	mov	sl, r2
 8006b3e:	469b      	mov	fp, r3
 8006b40:	4643      	mov	r3, r8
 8006b42:	eb1a 0303 	adds.w	r3, sl, r3
 8006b46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b4a:	464b      	mov	r3, r9
 8006b4c:	eb4b 0303 	adc.w	r3, fp, r3
 8006b50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b60:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006b64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006b68:	460b      	mov	r3, r1
 8006b6a:	18db      	adds	r3, r3, r3
 8006b6c:	643b      	str	r3, [r7, #64]	; 0x40
 8006b6e:	4613      	mov	r3, r2
 8006b70:	eb42 0303 	adc.w	r3, r2, r3
 8006b74:	647b      	str	r3, [r7, #68]	; 0x44
 8006b76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006b7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006b7e:	f7f9 fdc3 	bl	8000708 <__aeabi_uldivmod>
 8006b82:	4602      	mov	r2, r0
 8006b84:	460b      	mov	r3, r1
 8006b86:	4611      	mov	r1, r2
 8006b88:	4b3b      	ldr	r3, [pc, #236]	; (8006c78 <UART_SetConfig+0x2d4>)
 8006b8a:	fba3 2301 	umull	r2, r3, r3, r1
 8006b8e:	095b      	lsrs	r3, r3, #5
 8006b90:	2264      	movs	r2, #100	; 0x64
 8006b92:	fb02 f303 	mul.w	r3, r2, r3
 8006b96:	1acb      	subs	r3, r1, r3
 8006b98:	00db      	lsls	r3, r3, #3
 8006b9a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006b9e:	4b36      	ldr	r3, [pc, #216]	; (8006c78 <UART_SetConfig+0x2d4>)
 8006ba0:	fba3 2302 	umull	r2, r3, r3, r2
 8006ba4:	095b      	lsrs	r3, r3, #5
 8006ba6:	005b      	lsls	r3, r3, #1
 8006ba8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006bac:	441c      	add	r4, r3
 8006bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006bb8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006bbc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006bc0:	4642      	mov	r2, r8
 8006bc2:	464b      	mov	r3, r9
 8006bc4:	1891      	adds	r1, r2, r2
 8006bc6:	63b9      	str	r1, [r7, #56]	; 0x38
 8006bc8:	415b      	adcs	r3, r3
 8006bca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006bd0:	4641      	mov	r1, r8
 8006bd2:	1851      	adds	r1, r2, r1
 8006bd4:	6339      	str	r1, [r7, #48]	; 0x30
 8006bd6:	4649      	mov	r1, r9
 8006bd8:	414b      	adcs	r3, r1
 8006bda:	637b      	str	r3, [r7, #52]	; 0x34
 8006bdc:	f04f 0200 	mov.w	r2, #0
 8006be0:	f04f 0300 	mov.w	r3, #0
 8006be4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006be8:	4659      	mov	r1, fp
 8006bea:	00cb      	lsls	r3, r1, #3
 8006bec:	4651      	mov	r1, sl
 8006bee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bf2:	4651      	mov	r1, sl
 8006bf4:	00ca      	lsls	r2, r1, #3
 8006bf6:	4610      	mov	r0, r2
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	4642      	mov	r2, r8
 8006bfe:	189b      	adds	r3, r3, r2
 8006c00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c04:	464b      	mov	r3, r9
 8006c06:	460a      	mov	r2, r1
 8006c08:	eb42 0303 	adc.w	r3, r2, r3
 8006c0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006c1c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006c20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006c24:	460b      	mov	r3, r1
 8006c26:	18db      	adds	r3, r3, r3
 8006c28:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	eb42 0303 	adc.w	r3, r2, r3
 8006c30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006c3a:	f7f9 fd65 	bl	8000708 <__aeabi_uldivmod>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	460b      	mov	r3, r1
 8006c42:	4b0d      	ldr	r3, [pc, #52]	; (8006c78 <UART_SetConfig+0x2d4>)
 8006c44:	fba3 1302 	umull	r1, r3, r3, r2
 8006c48:	095b      	lsrs	r3, r3, #5
 8006c4a:	2164      	movs	r1, #100	; 0x64
 8006c4c:	fb01 f303 	mul.w	r3, r1, r3
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	00db      	lsls	r3, r3, #3
 8006c54:	3332      	adds	r3, #50	; 0x32
 8006c56:	4a08      	ldr	r2, [pc, #32]	; (8006c78 <UART_SetConfig+0x2d4>)
 8006c58:	fba2 2303 	umull	r2, r3, r2, r3
 8006c5c:	095b      	lsrs	r3, r3, #5
 8006c5e:	f003 0207 	and.w	r2, r3, #7
 8006c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4422      	add	r2, r4
 8006c6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c6c:	e105      	b.n	8006e7a <UART_SetConfig+0x4d6>
 8006c6e:	bf00      	nop
 8006c70:	40011000 	.word	0x40011000
 8006c74:	40011400 	.word	0x40011400
 8006c78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c80:	2200      	movs	r2, #0
 8006c82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006c86:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006c8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006c8e:	4642      	mov	r2, r8
 8006c90:	464b      	mov	r3, r9
 8006c92:	1891      	adds	r1, r2, r2
 8006c94:	6239      	str	r1, [r7, #32]
 8006c96:	415b      	adcs	r3, r3
 8006c98:	627b      	str	r3, [r7, #36]	; 0x24
 8006c9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c9e:	4641      	mov	r1, r8
 8006ca0:	1854      	adds	r4, r2, r1
 8006ca2:	4649      	mov	r1, r9
 8006ca4:	eb43 0501 	adc.w	r5, r3, r1
 8006ca8:	f04f 0200 	mov.w	r2, #0
 8006cac:	f04f 0300 	mov.w	r3, #0
 8006cb0:	00eb      	lsls	r3, r5, #3
 8006cb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cb6:	00e2      	lsls	r2, r4, #3
 8006cb8:	4614      	mov	r4, r2
 8006cba:	461d      	mov	r5, r3
 8006cbc:	4643      	mov	r3, r8
 8006cbe:	18e3      	adds	r3, r4, r3
 8006cc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006cc4:	464b      	mov	r3, r9
 8006cc6:	eb45 0303 	adc.w	r3, r5, r3
 8006cca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006cda:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006cde:	f04f 0200 	mov.w	r2, #0
 8006ce2:	f04f 0300 	mov.w	r3, #0
 8006ce6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006cea:	4629      	mov	r1, r5
 8006cec:	008b      	lsls	r3, r1, #2
 8006cee:	4621      	mov	r1, r4
 8006cf0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cf4:	4621      	mov	r1, r4
 8006cf6:	008a      	lsls	r2, r1, #2
 8006cf8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006cfc:	f7f9 fd04 	bl	8000708 <__aeabi_uldivmod>
 8006d00:	4602      	mov	r2, r0
 8006d02:	460b      	mov	r3, r1
 8006d04:	4b60      	ldr	r3, [pc, #384]	; (8006e88 <UART_SetConfig+0x4e4>)
 8006d06:	fba3 2302 	umull	r2, r3, r3, r2
 8006d0a:	095b      	lsrs	r3, r3, #5
 8006d0c:	011c      	lsls	r4, r3, #4
 8006d0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d12:	2200      	movs	r2, #0
 8006d14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006d1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006d20:	4642      	mov	r2, r8
 8006d22:	464b      	mov	r3, r9
 8006d24:	1891      	adds	r1, r2, r2
 8006d26:	61b9      	str	r1, [r7, #24]
 8006d28:	415b      	adcs	r3, r3
 8006d2a:	61fb      	str	r3, [r7, #28]
 8006d2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d30:	4641      	mov	r1, r8
 8006d32:	1851      	adds	r1, r2, r1
 8006d34:	6139      	str	r1, [r7, #16]
 8006d36:	4649      	mov	r1, r9
 8006d38:	414b      	adcs	r3, r1
 8006d3a:	617b      	str	r3, [r7, #20]
 8006d3c:	f04f 0200 	mov.w	r2, #0
 8006d40:	f04f 0300 	mov.w	r3, #0
 8006d44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d48:	4659      	mov	r1, fp
 8006d4a:	00cb      	lsls	r3, r1, #3
 8006d4c:	4651      	mov	r1, sl
 8006d4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d52:	4651      	mov	r1, sl
 8006d54:	00ca      	lsls	r2, r1, #3
 8006d56:	4610      	mov	r0, r2
 8006d58:	4619      	mov	r1, r3
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	4642      	mov	r2, r8
 8006d5e:	189b      	adds	r3, r3, r2
 8006d60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d64:	464b      	mov	r3, r9
 8006d66:	460a      	mov	r2, r1
 8006d68:	eb42 0303 	adc.w	r3, r2, r3
 8006d6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006d7c:	f04f 0200 	mov.w	r2, #0
 8006d80:	f04f 0300 	mov.w	r3, #0
 8006d84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006d88:	4649      	mov	r1, r9
 8006d8a:	008b      	lsls	r3, r1, #2
 8006d8c:	4641      	mov	r1, r8
 8006d8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d92:	4641      	mov	r1, r8
 8006d94:	008a      	lsls	r2, r1, #2
 8006d96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006d9a:	f7f9 fcb5 	bl	8000708 <__aeabi_uldivmod>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	460b      	mov	r3, r1
 8006da2:	4b39      	ldr	r3, [pc, #228]	; (8006e88 <UART_SetConfig+0x4e4>)
 8006da4:	fba3 1302 	umull	r1, r3, r3, r2
 8006da8:	095b      	lsrs	r3, r3, #5
 8006daa:	2164      	movs	r1, #100	; 0x64
 8006dac:	fb01 f303 	mul.w	r3, r1, r3
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	011b      	lsls	r3, r3, #4
 8006db4:	3332      	adds	r3, #50	; 0x32
 8006db6:	4a34      	ldr	r2, [pc, #208]	; (8006e88 <UART_SetConfig+0x4e4>)
 8006db8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dbc:	095b      	lsrs	r3, r3, #5
 8006dbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dc2:	441c      	add	r4, r3
 8006dc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dc8:	2200      	movs	r2, #0
 8006dca:	673b      	str	r3, [r7, #112]	; 0x70
 8006dcc:	677a      	str	r2, [r7, #116]	; 0x74
 8006dce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006dd2:	4642      	mov	r2, r8
 8006dd4:	464b      	mov	r3, r9
 8006dd6:	1891      	adds	r1, r2, r2
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	415b      	adcs	r3, r3
 8006ddc:	60fb      	str	r3, [r7, #12]
 8006dde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006de2:	4641      	mov	r1, r8
 8006de4:	1851      	adds	r1, r2, r1
 8006de6:	6039      	str	r1, [r7, #0]
 8006de8:	4649      	mov	r1, r9
 8006dea:	414b      	adcs	r3, r1
 8006dec:	607b      	str	r3, [r7, #4]
 8006dee:	f04f 0200 	mov.w	r2, #0
 8006df2:	f04f 0300 	mov.w	r3, #0
 8006df6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006dfa:	4659      	mov	r1, fp
 8006dfc:	00cb      	lsls	r3, r1, #3
 8006dfe:	4651      	mov	r1, sl
 8006e00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e04:	4651      	mov	r1, sl
 8006e06:	00ca      	lsls	r2, r1, #3
 8006e08:	4610      	mov	r0, r2
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	4642      	mov	r2, r8
 8006e10:	189b      	adds	r3, r3, r2
 8006e12:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e14:	464b      	mov	r3, r9
 8006e16:	460a      	mov	r2, r1
 8006e18:	eb42 0303 	adc.w	r3, r2, r3
 8006e1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	663b      	str	r3, [r7, #96]	; 0x60
 8006e28:	667a      	str	r2, [r7, #100]	; 0x64
 8006e2a:	f04f 0200 	mov.w	r2, #0
 8006e2e:	f04f 0300 	mov.w	r3, #0
 8006e32:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006e36:	4649      	mov	r1, r9
 8006e38:	008b      	lsls	r3, r1, #2
 8006e3a:	4641      	mov	r1, r8
 8006e3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e40:	4641      	mov	r1, r8
 8006e42:	008a      	lsls	r2, r1, #2
 8006e44:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006e48:	f7f9 fc5e 	bl	8000708 <__aeabi_uldivmod>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	460b      	mov	r3, r1
 8006e50:	4b0d      	ldr	r3, [pc, #52]	; (8006e88 <UART_SetConfig+0x4e4>)
 8006e52:	fba3 1302 	umull	r1, r3, r3, r2
 8006e56:	095b      	lsrs	r3, r3, #5
 8006e58:	2164      	movs	r1, #100	; 0x64
 8006e5a:	fb01 f303 	mul.w	r3, r1, r3
 8006e5e:	1ad3      	subs	r3, r2, r3
 8006e60:	011b      	lsls	r3, r3, #4
 8006e62:	3332      	adds	r3, #50	; 0x32
 8006e64:	4a08      	ldr	r2, [pc, #32]	; (8006e88 <UART_SetConfig+0x4e4>)
 8006e66:	fba2 2303 	umull	r2, r3, r2, r3
 8006e6a:	095b      	lsrs	r3, r3, #5
 8006e6c:	f003 020f 	and.w	r2, r3, #15
 8006e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4422      	add	r2, r4
 8006e78:	609a      	str	r2, [r3, #8]
}
 8006e7a:	bf00      	nop
 8006e7c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006e80:	46bd      	mov	sp, r7
 8006e82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e86:	bf00      	nop
 8006e88:	51eb851f 	.word	0x51eb851f

08006e8c <__errno>:
 8006e8c:	4b01      	ldr	r3, [pc, #4]	; (8006e94 <__errno+0x8>)
 8006e8e:	6818      	ldr	r0, [r3, #0]
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	2000000c 	.word	0x2000000c

08006e98 <__libc_init_array>:
 8006e98:	b570      	push	{r4, r5, r6, lr}
 8006e9a:	4d0d      	ldr	r5, [pc, #52]	; (8006ed0 <__libc_init_array+0x38>)
 8006e9c:	4c0d      	ldr	r4, [pc, #52]	; (8006ed4 <__libc_init_array+0x3c>)
 8006e9e:	1b64      	subs	r4, r4, r5
 8006ea0:	10a4      	asrs	r4, r4, #2
 8006ea2:	2600      	movs	r6, #0
 8006ea4:	42a6      	cmp	r6, r4
 8006ea6:	d109      	bne.n	8006ebc <__libc_init_array+0x24>
 8006ea8:	4d0b      	ldr	r5, [pc, #44]	; (8006ed8 <__libc_init_array+0x40>)
 8006eaa:	4c0c      	ldr	r4, [pc, #48]	; (8006edc <__libc_init_array+0x44>)
 8006eac:	f000 fc8c 	bl	80077c8 <_init>
 8006eb0:	1b64      	subs	r4, r4, r5
 8006eb2:	10a4      	asrs	r4, r4, #2
 8006eb4:	2600      	movs	r6, #0
 8006eb6:	42a6      	cmp	r6, r4
 8006eb8:	d105      	bne.n	8006ec6 <__libc_init_array+0x2e>
 8006eba:	bd70      	pop	{r4, r5, r6, pc}
 8006ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ec0:	4798      	blx	r3
 8006ec2:	3601      	adds	r6, #1
 8006ec4:	e7ee      	b.n	8006ea4 <__libc_init_array+0xc>
 8006ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eca:	4798      	blx	r3
 8006ecc:	3601      	adds	r6, #1
 8006ece:	e7f2      	b.n	8006eb6 <__libc_init_array+0x1e>
 8006ed0:	08007a1c 	.word	0x08007a1c
 8006ed4:	08007a1c 	.word	0x08007a1c
 8006ed8:	08007a1c 	.word	0x08007a1c
 8006edc:	08007a20 	.word	0x08007a20

08006ee0 <memcpy>:
 8006ee0:	440a      	add	r2, r1
 8006ee2:	4291      	cmp	r1, r2
 8006ee4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ee8:	d100      	bne.n	8006eec <memcpy+0xc>
 8006eea:	4770      	bx	lr
 8006eec:	b510      	push	{r4, lr}
 8006eee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ef2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ef6:	4291      	cmp	r1, r2
 8006ef8:	d1f9      	bne.n	8006eee <memcpy+0xe>
 8006efa:	bd10      	pop	{r4, pc}

08006efc <memset>:
 8006efc:	4402      	add	r2, r0
 8006efe:	4603      	mov	r3, r0
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d100      	bne.n	8006f06 <memset+0xa>
 8006f04:	4770      	bx	lr
 8006f06:	f803 1b01 	strb.w	r1, [r3], #1
 8006f0a:	e7f9      	b.n	8006f00 <memset+0x4>

08006f0c <_printf_common>:
 8006f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f10:	4616      	mov	r6, r2
 8006f12:	4699      	mov	r9, r3
 8006f14:	688a      	ldr	r2, [r1, #8]
 8006f16:	690b      	ldr	r3, [r1, #16]
 8006f18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	bfb8      	it	lt
 8006f20:	4613      	movlt	r3, r2
 8006f22:	6033      	str	r3, [r6, #0]
 8006f24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f28:	4607      	mov	r7, r0
 8006f2a:	460c      	mov	r4, r1
 8006f2c:	b10a      	cbz	r2, 8006f32 <_printf_common+0x26>
 8006f2e:	3301      	adds	r3, #1
 8006f30:	6033      	str	r3, [r6, #0]
 8006f32:	6823      	ldr	r3, [r4, #0]
 8006f34:	0699      	lsls	r1, r3, #26
 8006f36:	bf42      	ittt	mi
 8006f38:	6833      	ldrmi	r3, [r6, #0]
 8006f3a:	3302      	addmi	r3, #2
 8006f3c:	6033      	strmi	r3, [r6, #0]
 8006f3e:	6825      	ldr	r5, [r4, #0]
 8006f40:	f015 0506 	ands.w	r5, r5, #6
 8006f44:	d106      	bne.n	8006f54 <_printf_common+0x48>
 8006f46:	f104 0a19 	add.w	sl, r4, #25
 8006f4a:	68e3      	ldr	r3, [r4, #12]
 8006f4c:	6832      	ldr	r2, [r6, #0]
 8006f4e:	1a9b      	subs	r3, r3, r2
 8006f50:	42ab      	cmp	r3, r5
 8006f52:	dc26      	bgt.n	8006fa2 <_printf_common+0x96>
 8006f54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f58:	1e13      	subs	r3, r2, #0
 8006f5a:	6822      	ldr	r2, [r4, #0]
 8006f5c:	bf18      	it	ne
 8006f5e:	2301      	movne	r3, #1
 8006f60:	0692      	lsls	r2, r2, #26
 8006f62:	d42b      	bmi.n	8006fbc <_printf_common+0xb0>
 8006f64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f68:	4649      	mov	r1, r9
 8006f6a:	4638      	mov	r0, r7
 8006f6c:	47c0      	blx	r8
 8006f6e:	3001      	adds	r0, #1
 8006f70:	d01e      	beq.n	8006fb0 <_printf_common+0xa4>
 8006f72:	6823      	ldr	r3, [r4, #0]
 8006f74:	68e5      	ldr	r5, [r4, #12]
 8006f76:	6832      	ldr	r2, [r6, #0]
 8006f78:	f003 0306 	and.w	r3, r3, #6
 8006f7c:	2b04      	cmp	r3, #4
 8006f7e:	bf08      	it	eq
 8006f80:	1aad      	subeq	r5, r5, r2
 8006f82:	68a3      	ldr	r3, [r4, #8]
 8006f84:	6922      	ldr	r2, [r4, #16]
 8006f86:	bf0c      	ite	eq
 8006f88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f8c:	2500      	movne	r5, #0
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	bfc4      	itt	gt
 8006f92:	1a9b      	subgt	r3, r3, r2
 8006f94:	18ed      	addgt	r5, r5, r3
 8006f96:	2600      	movs	r6, #0
 8006f98:	341a      	adds	r4, #26
 8006f9a:	42b5      	cmp	r5, r6
 8006f9c:	d11a      	bne.n	8006fd4 <_printf_common+0xc8>
 8006f9e:	2000      	movs	r0, #0
 8006fa0:	e008      	b.n	8006fb4 <_printf_common+0xa8>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	4652      	mov	r2, sl
 8006fa6:	4649      	mov	r1, r9
 8006fa8:	4638      	mov	r0, r7
 8006faa:	47c0      	blx	r8
 8006fac:	3001      	adds	r0, #1
 8006fae:	d103      	bne.n	8006fb8 <_printf_common+0xac>
 8006fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fb8:	3501      	adds	r5, #1
 8006fba:	e7c6      	b.n	8006f4a <_printf_common+0x3e>
 8006fbc:	18e1      	adds	r1, r4, r3
 8006fbe:	1c5a      	adds	r2, r3, #1
 8006fc0:	2030      	movs	r0, #48	; 0x30
 8006fc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006fc6:	4422      	add	r2, r4
 8006fc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006fcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006fd0:	3302      	adds	r3, #2
 8006fd2:	e7c7      	b.n	8006f64 <_printf_common+0x58>
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	4622      	mov	r2, r4
 8006fd8:	4649      	mov	r1, r9
 8006fda:	4638      	mov	r0, r7
 8006fdc:	47c0      	blx	r8
 8006fde:	3001      	adds	r0, #1
 8006fe0:	d0e6      	beq.n	8006fb0 <_printf_common+0xa4>
 8006fe2:	3601      	adds	r6, #1
 8006fe4:	e7d9      	b.n	8006f9a <_printf_common+0x8e>
	...

08006fe8 <_printf_i>:
 8006fe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fec:	7e0f      	ldrb	r7, [r1, #24]
 8006fee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ff0:	2f78      	cmp	r7, #120	; 0x78
 8006ff2:	4691      	mov	r9, r2
 8006ff4:	4680      	mov	r8, r0
 8006ff6:	460c      	mov	r4, r1
 8006ff8:	469a      	mov	sl, r3
 8006ffa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006ffe:	d807      	bhi.n	8007010 <_printf_i+0x28>
 8007000:	2f62      	cmp	r7, #98	; 0x62
 8007002:	d80a      	bhi.n	800701a <_printf_i+0x32>
 8007004:	2f00      	cmp	r7, #0
 8007006:	f000 80d8 	beq.w	80071ba <_printf_i+0x1d2>
 800700a:	2f58      	cmp	r7, #88	; 0x58
 800700c:	f000 80a3 	beq.w	8007156 <_printf_i+0x16e>
 8007010:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007014:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007018:	e03a      	b.n	8007090 <_printf_i+0xa8>
 800701a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800701e:	2b15      	cmp	r3, #21
 8007020:	d8f6      	bhi.n	8007010 <_printf_i+0x28>
 8007022:	a101      	add	r1, pc, #4	; (adr r1, 8007028 <_printf_i+0x40>)
 8007024:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007028:	08007081 	.word	0x08007081
 800702c:	08007095 	.word	0x08007095
 8007030:	08007011 	.word	0x08007011
 8007034:	08007011 	.word	0x08007011
 8007038:	08007011 	.word	0x08007011
 800703c:	08007011 	.word	0x08007011
 8007040:	08007095 	.word	0x08007095
 8007044:	08007011 	.word	0x08007011
 8007048:	08007011 	.word	0x08007011
 800704c:	08007011 	.word	0x08007011
 8007050:	08007011 	.word	0x08007011
 8007054:	080071a1 	.word	0x080071a1
 8007058:	080070c5 	.word	0x080070c5
 800705c:	08007183 	.word	0x08007183
 8007060:	08007011 	.word	0x08007011
 8007064:	08007011 	.word	0x08007011
 8007068:	080071c3 	.word	0x080071c3
 800706c:	08007011 	.word	0x08007011
 8007070:	080070c5 	.word	0x080070c5
 8007074:	08007011 	.word	0x08007011
 8007078:	08007011 	.word	0x08007011
 800707c:	0800718b 	.word	0x0800718b
 8007080:	682b      	ldr	r3, [r5, #0]
 8007082:	1d1a      	adds	r2, r3, #4
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	602a      	str	r2, [r5, #0]
 8007088:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800708c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007090:	2301      	movs	r3, #1
 8007092:	e0a3      	b.n	80071dc <_printf_i+0x1f4>
 8007094:	6820      	ldr	r0, [r4, #0]
 8007096:	6829      	ldr	r1, [r5, #0]
 8007098:	0606      	lsls	r6, r0, #24
 800709a:	f101 0304 	add.w	r3, r1, #4
 800709e:	d50a      	bpl.n	80070b6 <_printf_i+0xce>
 80070a0:	680e      	ldr	r6, [r1, #0]
 80070a2:	602b      	str	r3, [r5, #0]
 80070a4:	2e00      	cmp	r6, #0
 80070a6:	da03      	bge.n	80070b0 <_printf_i+0xc8>
 80070a8:	232d      	movs	r3, #45	; 0x2d
 80070aa:	4276      	negs	r6, r6
 80070ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070b0:	485e      	ldr	r0, [pc, #376]	; (800722c <_printf_i+0x244>)
 80070b2:	230a      	movs	r3, #10
 80070b4:	e019      	b.n	80070ea <_printf_i+0x102>
 80070b6:	680e      	ldr	r6, [r1, #0]
 80070b8:	602b      	str	r3, [r5, #0]
 80070ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80070be:	bf18      	it	ne
 80070c0:	b236      	sxthne	r6, r6
 80070c2:	e7ef      	b.n	80070a4 <_printf_i+0xbc>
 80070c4:	682b      	ldr	r3, [r5, #0]
 80070c6:	6820      	ldr	r0, [r4, #0]
 80070c8:	1d19      	adds	r1, r3, #4
 80070ca:	6029      	str	r1, [r5, #0]
 80070cc:	0601      	lsls	r1, r0, #24
 80070ce:	d501      	bpl.n	80070d4 <_printf_i+0xec>
 80070d0:	681e      	ldr	r6, [r3, #0]
 80070d2:	e002      	b.n	80070da <_printf_i+0xf2>
 80070d4:	0646      	lsls	r6, r0, #25
 80070d6:	d5fb      	bpl.n	80070d0 <_printf_i+0xe8>
 80070d8:	881e      	ldrh	r6, [r3, #0]
 80070da:	4854      	ldr	r0, [pc, #336]	; (800722c <_printf_i+0x244>)
 80070dc:	2f6f      	cmp	r7, #111	; 0x6f
 80070de:	bf0c      	ite	eq
 80070e0:	2308      	moveq	r3, #8
 80070e2:	230a      	movne	r3, #10
 80070e4:	2100      	movs	r1, #0
 80070e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80070ea:	6865      	ldr	r5, [r4, #4]
 80070ec:	60a5      	str	r5, [r4, #8]
 80070ee:	2d00      	cmp	r5, #0
 80070f0:	bfa2      	ittt	ge
 80070f2:	6821      	ldrge	r1, [r4, #0]
 80070f4:	f021 0104 	bicge.w	r1, r1, #4
 80070f8:	6021      	strge	r1, [r4, #0]
 80070fa:	b90e      	cbnz	r6, 8007100 <_printf_i+0x118>
 80070fc:	2d00      	cmp	r5, #0
 80070fe:	d04d      	beq.n	800719c <_printf_i+0x1b4>
 8007100:	4615      	mov	r5, r2
 8007102:	fbb6 f1f3 	udiv	r1, r6, r3
 8007106:	fb03 6711 	mls	r7, r3, r1, r6
 800710a:	5dc7      	ldrb	r7, [r0, r7]
 800710c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007110:	4637      	mov	r7, r6
 8007112:	42bb      	cmp	r3, r7
 8007114:	460e      	mov	r6, r1
 8007116:	d9f4      	bls.n	8007102 <_printf_i+0x11a>
 8007118:	2b08      	cmp	r3, #8
 800711a:	d10b      	bne.n	8007134 <_printf_i+0x14c>
 800711c:	6823      	ldr	r3, [r4, #0]
 800711e:	07de      	lsls	r6, r3, #31
 8007120:	d508      	bpl.n	8007134 <_printf_i+0x14c>
 8007122:	6923      	ldr	r3, [r4, #16]
 8007124:	6861      	ldr	r1, [r4, #4]
 8007126:	4299      	cmp	r1, r3
 8007128:	bfde      	ittt	le
 800712a:	2330      	movle	r3, #48	; 0x30
 800712c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007130:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007134:	1b52      	subs	r2, r2, r5
 8007136:	6122      	str	r2, [r4, #16]
 8007138:	f8cd a000 	str.w	sl, [sp]
 800713c:	464b      	mov	r3, r9
 800713e:	aa03      	add	r2, sp, #12
 8007140:	4621      	mov	r1, r4
 8007142:	4640      	mov	r0, r8
 8007144:	f7ff fee2 	bl	8006f0c <_printf_common>
 8007148:	3001      	adds	r0, #1
 800714a:	d14c      	bne.n	80071e6 <_printf_i+0x1fe>
 800714c:	f04f 30ff 	mov.w	r0, #4294967295
 8007150:	b004      	add	sp, #16
 8007152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007156:	4835      	ldr	r0, [pc, #212]	; (800722c <_printf_i+0x244>)
 8007158:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800715c:	6829      	ldr	r1, [r5, #0]
 800715e:	6823      	ldr	r3, [r4, #0]
 8007160:	f851 6b04 	ldr.w	r6, [r1], #4
 8007164:	6029      	str	r1, [r5, #0]
 8007166:	061d      	lsls	r5, r3, #24
 8007168:	d514      	bpl.n	8007194 <_printf_i+0x1ac>
 800716a:	07df      	lsls	r7, r3, #31
 800716c:	bf44      	itt	mi
 800716e:	f043 0320 	orrmi.w	r3, r3, #32
 8007172:	6023      	strmi	r3, [r4, #0]
 8007174:	b91e      	cbnz	r6, 800717e <_printf_i+0x196>
 8007176:	6823      	ldr	r3, [r4, #0]
 8007178:	f023 0320 	bic.w	r3, r3, #32
 800717c:	6023      	str	r3, [r4, #0]
 800717e:	2310      	movs	r3, #16
 8007180:	e7b0      	b.n	80070e4 <_printf_i+0xfc>
 8007182:	6823      	ldr	r3, [r4, #0]
 8007184:	f043 0320 	orr.w	r3, r3, #32
 8007188:	6023      	str	r3, [r4, #0]
 800718a:	2378      	movs	r3, #120	; 0x78
 800718c:	4828      	ldr	r0, [pc, #160]	; (8007230 <_printf_i+0x248>)
 800718e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007192:	e7e3      	b.n	800715c <_printf_i+0x174>
 8007194:	0659      	lsls	r1, r3, #25
 8007196:	bf48      	it	mi
 8007198:	b2b6      	uxthmi	r6, r6
 800719a:	e7e6      	b.n	800716a <_printf_i+0x182>
 800719c:	4615      	mov	r5, r2
 800719e:	e7bb      	b.n	8007118 <_printf_i+0x130>
 80071a0:	682b      	ldr	r3, [r5, #0]
 80071a2:	6826      	ldr	r6, [r4, #0]
 80071a4:	6961      	ldr	r1, [r4, #20]
 80071a6:	1d18      	adds	r0, r3, #4
 80071a8:	6028      	str	r0, [r5, #0]
 80071aa:	0635      	lsls	r5, r6, #24
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	d501      	bpl.n	80071b4 <_printf_i+0x1cc>
 80071b0:	6019      	str	r1, [r3, #0]
 80071b2:	e002      	b.n	80071ba <_printf_i+0x1d2>
 80071b4:	0670      	lsls	r0, r6, #25
 80071b6:	d5fb      	bpl.n	80071b0 <_printf_i+0x1c8>
 80071b8:	8019      	strh	r1, [r3, #0]
 80071ba:	2300      	movs	r3, #0
 80071bc:	6123      	str	r3, [r4, #16]
 80071be:	4615      	mov	r5, r2
 80071c0:	e7ba      	b.n	8007138 <_printf_i+0x150>
 80071c2:	682b      	ldr	r3, [r5, #0]
 80071c4:	1d1a      	adds	r2, r3, #4
 80071c6:	602a      	str	r2, [r5, #0]
 80071c8:	681d      	ldr	r5, [r3, #0]
 80071ca:	6862      	ldr	r2, [r4, #4]
 80071cc:	2100      	movs	r1, #0
 80071ce:	4628      	mov	r0, r5
 80071d0:	f7f9 f806 	bl	80001e0 <memchr>
 80071d4:	b108      	cbz	r0, 80071da <_printf_i+0x1f2>
 80071d6:	1b40      	subs	r0, r0, r5
 80071d8:	6060      	str	r0, [r4, #4]
 80071da:	6863      	ldr	r3, [r4, #4]
 80071dc:	6123      	str	r3, [r4, #16]
 80071de:	2300      	movs	r3, #0
 80071e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071e4:	e7a8      	b.n	8007138 <_printf_i+0x150>
 80071e6:	6923      	ldr	r3, [r4, #16]
 80071e8:	462a      	mov	r2, r5
 80071ea:	4649      	mov	r1, r9
 80071ec:	4640      	mov	r0, r8
 80071ee:	47d0      	blx	sl
 80071f0:	3001      	adds	r0, #1
 80071f2:	d0ab      	beq.n	800714c <_printf_i+0x164>
 80071f4:	6823      	ldr	r3, [r4, #0]
 80071f6:	079b      	lsls	r3, r3, #30
 80071f8:	d413      	bmi.n	8007222 <_printf_i+0x23a>
 80071fa:	68e0      	ldr	r0, [r4, #12]
 80071fc:	9b03      	ldr	r3, [sp, #12]
 80071fe:	4298      	cmp	r0, r3
 8007200:	bfb8      	it	lt
 8007202:	4618      	movlt	r0, r3
 8007204:	e7a4      	b.n	8007150 <_printf_i+0x168>
 8007206:	2301      	movs	r3, #1
 8007208:	4632      	mov	r2, r6
 800720a:	4649      	mov	r1, r9
 800720c:	4640      	mov	r0, r8
 800720e:	47d0      	blx	sl
 8007210:	3001      	adds	r0, #1
 8007212:	d09b      	beq.n	800714c <_printf_i+0x164>
 8007214:	3501      	adds	r5, #1
 8007216:	68e3      	ldr	r3, [r4, #12]
 8007218:	9903      	ldr	r1, [sp, #12]
 800721a:	1a5b      	subs	r3, r3, r1
 800721c:	42ab      	cmp	r3, r5
 800721e:	dcf2      	bgt.n	8007206 <_printf_i+0x21e>
 8007220:	e7eb      	b.n	80071fa <_printf_i+0x212>
 8007222:	2500      	movs	r5, #0
 8007224:	f104 0619 	add.w	r6, r4, #25
 8007228:	e7f5      	b.n	8007216 <_printf_i+0x22e>
 800722a:	bf00      	nop
 800722c:	0800797c 	.word	0x0800797c
 8007230:	0800798d 	.word	0x0800798d

08007234 <siprintf>:
 8007234:	b40e      	push	{r1, r2, r3}
 8007236:	b500      	push	{lr}
 8007238:	b09c      	sub	sp, #112	; 0x70
 800723a:	ab1d      	add	r3, sp, #116	; 0x74
 800723c:	9002      	str	r0, [sp, #8]
 800723e:	9006      	str	r0, [sp, #24]
 8007240:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007244:	4809      	ldr	r0, [pc, #36]	; (800726c <siprintf+0x38>)
 8007246:	9107      	str	r1, [sp, #28]
 8007248:	9104      	str	r1, [sp, #16]
 800724a:	4909      	ldr	r1, [pc, #36]	; (8007270 <siprintf+0x3c>)
 800724c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007250:	9105      	str	r1, [sp, #20]
 8007252:	6800      	ldr	r0, [r0, #0]
 8007254:	9301      	str	r3, [sp, #4]
 8007256:	a902      	add	r1, sp, #8
 8007258:	f000 f992 	bl	8007580 <_svfiprintf_r>
 800725c:	9b02      	ldr	r3, [sp, #8]
 800725e:	2200      	movs	r2, #0
 8007260:	701a      	strb	r2, [r3, #0]
 8007262:	b01c      	add	sp, #112	; 0x70
 8007264:	f85d eb04 	ldr.w	lr, [sp], #4
 8007268:	b003      	add	sp, #12
 800726a:	4770      	bx	lr
 800726c:	2000000c 	.word	0x2000000c
 8007270:	ffff0208 	.word	0xffff0208

08007274 <__retarget_lock_acquire_recursive>:
 8007274:	4770      	bx	lr

08007276 <__retarget_lock_release_recursive>:
 8007276:	4770      	bx	lr

08007278 <memmove>:
 8007278:	4288      	cmp	r0, r1
 800727a:	b510      	push	{r4, lr}
 800727c:	eb01 0402 	add.w	r4, r1, r2
 8007280:	d902      	bls.n	8007288 <memmove+0x10>
 8007282:	4284      	cmp	r4, r0
 8007284:	4623      	mov	r3, r4
 8007286:	d807      	bhi.n	8007298 <memmove+0x20>
 8007288:	1e43      	subs	r3, r0, #1
 800728a:	42a1      	cmp	r1, r4
 800728c:	d008      	beq.n	80072a0 <memmove+0x28>
 800728e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007292:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007296:	e7f8      	b.n	800728a <memmove+0x12>
 8007298:	4402      	add	r2, r0
 800729a:	4601      	mov	r1, r0
 800729c:	428a      	cmp	r2, r1
 800729e:	d100      	bne.n	80072a2 <memmove+0x2a>
 80072a0:	bd10      	pop	{r4, pc}
 80072a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80072a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80072aa:	e7f7      	b.n	800729c <memmove+0x24>

080072ac <_free_r>:
 80072ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072ae:	2900      	cmp	r1, #0
 80072b0:	d044      	beq.n	800733c <_free_r+0x90>
 80072b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072b6:	9001      	str	r0, [sp, #4]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	f1a1 0404 	sub.w	r4, r1, #4
 80072be:	bfb8      	it	lt
 80072c0:	18e4      	addlt	r4, r4, r3
 80072c2:	f000 fa6d 	bl	80077a0 <__malloc_lock>
 80072c6:	4a1e      	ldr	r2, [pc, #120]	; (8007340 <_free_r+0x94>)
 80072c8:	9801      	ldr	r0, [sp, #4]
 80072ca:	6813      	ldr	r3, [r2, #0]
 80072cc:	b933      	cbnz	r3, 80072dc <_free_r+0x30>
 80072ce:	6063      	str	r3, [r4, #4]
 80072d0:	6014      	str	r4, [r2, #0]
 80072d2:	b003      	add	sp, #12
 80072d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072d8:	f000 ba68 	b.w	80077ac <__malloc_unlock>
 80072dc:	42a3      	cmp	r3, r4
 80072de:	d908      	bls.n	80072f2 <_free_r+0x46>
 80072e0:	6825      	ldr	r5, [r4, #0]
 80072e2:	1961      	adds	r1, r4, r5
 80072e4:	428b      	cmp	r3, r1
 80072e6:	bf01      	itttt	eq
 80072e8:	6819      	ldreq	r1, [r3, #0]
 80072ea:	685b      	ldreq	r3, [r3, #4]
 80072ec:	1949      	addeq	r1, r1, r5
 80072ee:	6021      	streq	r1, [r4, #0]
 80072f0:	e7ed      	b.n	80072ce <_free_r+0x22>
 80072f2:	461a      	mov	r2, r3
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	b10b      	cbz	r3, 80072fc <_free_r+0x50>
 80072f8:	42a3      	cmp	r3, r4
 80072fa:	d9fa      	bls.n	80072f2 <_free_r+0x46>
 80072fc:	6811      	ldr	r1, [r2, #0]
 80072fe:	1855      	adds	r5, r2, r1
 8007300:	42a5      	cmp	r5, r4
 8007302:	d10b      	bne.n	800731c <_free_r+0x70>
 8007304:	6824      	ldr	r4, [r4, #0]
 8007306:	4421      	add	r1, r4
 8007308:	1854      	adds	r4, r2, r1
 800730a:	42a3      	cmp	r3, r4
 800730c:	6011      	str	r1, [r2, #0]
 800730e:	d1e0      	bne.n	80072d2 <_free_r+0x26>
 8007310:	681c      	ldr	r4, [r3, #0]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	6053      	str	r3, [r2, #4]
 8007316:	4421      	add	r1, r4
 8007318:	6011      	str	r1, [r2, #0]
 800731a:	e7da      	b.n	80072d2 <_free_r+0x26>
 800731c:	d902      	bls.n	8007324 <_free_r+0x78>
 800731e:	230c      	movs	r3, #12
 8007320:	6003      	str	r3, [r0, #0]
 8007322:	e7d6      	b.n	80072d2 <_free_r+0x26>
 8007324:	6825      	ldr	r5, [r4, #0]
 8007326:	1961      	adds	r1, r4, r5
 8007328:	428b      	cmp	r3, r1
 800732a:	bf04      	itt	eq
 800732c:	6819      	ldreq	r1, [r3, #0]
 800732e:	685b      	ldreq	r3, [r3, #4]
 8007330:	6063      	str	r3, [r4, #4]
 8007332:	bf04      	itt	eq
 8007334:	1949      	addeq	r1, r1, r5
 8007336:	6021      	streq	r1, [r4, #0]
 8007338:	6054      	str	r4, [r2, #4]
 800733a:	e7ca      	b.n	80072d2 <_free_r+0x26>
 800733c:	b003      	add	sp, #12
 800733e:	bd30      	pop	{r4, r5, pc}
 8007340:	200007ac 	.word	0x200007ac

08007344 <sbrk_aligned>:
 8007344:	b570      	push	{r4, r5, r6, lr}
 8007346:	4e0e      	ldr	r6, [pc, #56]	; (8007380 <sbrk_aligned+0x3c>)
 8007348:	460c      	mov	r4, r1
 800734a:	6831      	ldr	r1, [r6, #0]
 800734c:	4605      	mov	r5, r0
 800734e:	b911      	cbnz	r1, 8007356 <sbrk_aligned+0x12>
 8007350:	f000 fa16 	bl	8007780 <_sbrk_r>
 8007354:	6030      	str	r0, [r6, #0]
 8007356:	4621      	mov	r1, r4
 8007358:	4628      	mov	r0, r5
 800735a:	f000 fa11 	bl	8007780 <_sbrk_r>
 800735e:	1c43      	adds	r3, r0, #1
 8007360:	d00a      	beq.n	8007378 <sbrk_aligned+0x34>
 8007362:	1cc4      	adds	r4, r0, #3
 8007364:	f024 0403 	bic.w	r4, r4, #3
 8007368:	42a0      	cmp	r0, r4
 800736a:	d007      	beq.n	800737c <sbrk_aligned+0x38>
 800736c:	1a21      	subs	r1, r4, r0
 800736e:	4628      	mov	r0, r5
 8007370:	f000 fa06 	bl	8007780 <_sbrk_r>
 8007374:	3001      	adds	r0, #1
 8007376:	d101      	bne.n	800737c <sbrk_aligned+0x38>
 8007378:	f04f 34ff 	mov.w	r4, #4294967295
 800737c:	4620      	mov	r0, r4
 800737e:	bd70      	pop	{r4, r5, r6, pc}
 8007380:	200007b0 	.word	0x200007b0

08007384 <_malloc_r>:
 8007384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007388:	1ccd      	adds	r5, r1, #3
 800738a:	f025 0503 	bic.w	r5, r5, #3
 800738e:	3508      	adds	r5, #8
 8007390:	2d0c      	cmp	r5, #12
 8007392:	bf38      	it	cc
 8007394:	250c      	movcc	r5, #12
 8007396:	2d00      	cmp	r5, #0
 8007398:	4607      	mov	r7, r0
 800739a:	db01      	blt.n	80073a0 <_malloc_r+0x1c>
 800739c:	42a9      	cmp	r1, r5
 800739e:	d905      	bls.n	80073ac <_malloc_r+0x28>
 80073a0:	230c      	movs	r3, #12
 80073a2:	603b      	str	r3, [r7, #0]
 80073a4:	2600      	movs	r6, #0
 80073a6:	4630      	mov	r0, r6
 80073a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073ac:	4e2e      	ldr	r6, [pc, #184]	; (8007468 <_malloc_r+0xe4>)
 80073ae:	f000 f9f7 	bl	80077a0 <__malloc_lock>
 80073b2:	6833      	ldr	r3, [r6, #0]
 80073b4:	461c      	mov	r4, r3
 80073b6:	bb34      	cbnz	r4, 8007406 <_malloc_r+0x82>
 80073b8:	4629      	mov	r1, r5
 80073ba:	4638      	mov	r0, r7
 80073bc:	f7ff ffc2 	bl	8007344 <sbrk_aligned>
 80073c0:	1c43      	adds	r3, r0, #1
 80073c2:	4604      	mov	r4, r0
 80073c4:	d14d      	bne.n	8007462 <_malloc_r+0xde>
 80073c6:	6834      	ldr	r4, [r6, #0]
 80073c8:	4626      	mov	r6, r4
 80073ca:	2e00      	cmp	r6, #0
 80073cc:	d140      	bne.n	8007450 <_malloc_r+0xcc>
 80073ce:	6823      	ldr	r3, [r4, #0]
 80073d0:	4631      	mov	r1, r6
 80073d2:	4638      	mov	r0, r7
 80073d4:	eb04 0803 	add.w	r8, r4, r3
 80073d8:	f000 f9d2 	bl	8007780 <_sbrk_r>
 80073dc:	4580      	cmp	r8, r0
 80073de:	d13a      	bne.n	8007456 <_malloc_r+0xd2>
 80073e0:	6821      	ldr	r1, [r4, #0]
 80073e2:	3503      	adds	r5, #3
 80073e4:	1a6d      	subs	r5, r5, r1
 80073e6:	f025 0503 	bic.w	r5, r5, #3
 80073ea:	3508      	adds	r5, #8
 80073ec:	2d0c      	cmp	r5, #12
 80073ee:	bf38      	it	cc
 80073f0:	250c      	movcc	r5, #12
 80073f2:	4629      	mov	r1, r5
 80073f4:	4638      	mov	r0, r7
 80073f6:	f7ff ffa5 	bl	8007344 <sbrk_aligned>
 80073fa:	3001      	adds	r0, #1
 80073fc:	d02b      	beq.n	8007456 <_malloc_r+0xd2>
 80073fe:	6823      	ldr	r3, [r4, #0]
 8007400:	442b      	add	r3, r5
 8007402:	6023      	str	r3, [r4, #0]
 8007404:	e00e      	b.n	8007424 <_malloc_r+0xa0>
 8007406:	6822      	ldr	r2, [r4, #0]
 8007408:	1b52      	subs	r2, r2, r5
 800740a:	d41e      	bmi.n	800744a <_malloc_r+0xc6>
 800740c:	2a0b      	cmp	r2, #11
 800740e:	d916      	bls.n	800743e <_malloc_r+0xba>
 8007410:	1961      	adds	r1, r4, r5
 8007412:	42a3      	cmp	r3, r4
 8007414:	6025      	str	r5, [r4, #0]
 8007416:	bf18      	it	ne
 8007418:	6059      	strne	r1, [r3, #4]
 800741a:	6863      	ldr	r3, [r4, #4]
 800741c:	bf08      	it	eq
 800741e:	6031      	streq	r1, [r6, #0]
 8007420:	5162      	str	r2, [r4, r5]
 8007422:	604b      	str	r3, [r1, #4]
 8007424:	4638      	mov	r0, r7
 8007426:	f104 060b 	add.w	r6, r4, #11
 800742a:	f000 f9bf 	bl	80077ac <__malloc_unlock>
 800742e:	f026 0607 	bic.w	r6, r6, #7
 8007432:	1d23      	adds	r3, r4, #4
 8007434:	1af2      	subs	r2, r6, r3
 8007436:	d0b6      	beq.n	80073a6 <_malloc_r+0x22>
 8007438:	1b9b      	subs	r3, r3, r6
 800743a:	50a3      	str	r3, [r4, r2]
 800743c:	e7b3      	b.n	80073a6 <_malloc_r+0x22>
 800743e:	6862      	ldr	r2, [r4, #4]
 8007440:	42a3      	cmp	r3, r4
 8007442:	bf0c      	ite	eq
 8007444:	6032      	streq	r2, [r6, #0]
 8007446:	605a      	strne	r2, [r3, #4]
 8007448:	e7ec      	b.n	8007424 <_malloc_r+0xa0>
 800744a:	4623      	mov	r3, r4
 800744c:	6864      	ldr	r4, [r4, #4]
 800744e:	e7b2      	b.n	80073b6 <_malloc_r+0x32>
 8007450:	4634      	mov	r4, r6
 8007452:	6876      	ldr	r6, [r6, #4]
 8007454:	e7b9      	b.n	80073ca <_malloc_r+0x46>
 8007456:	230c      	movs	r3, #12
 8007458:	603b      	str	r3, [r7, #0]
 800745a:	4638      	mov	r0, r7
 800745c:	f000 f9a6 	bl	80077ac <__malloc_unlock>
 8007460:	e7a1      	b.n	80073a6 <_malloc_r+0x22>
 8007462:	6025      	str	r5, [r4, #0]
 8007464:	e7de      	b.n	8007424 <_malloc_r+0xa0>
 8007466:	bf00      	nop
 8007468:	200007ac 	.word	0x200007ac

0800746c <_realloc_r>:
 800746c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007470:	4680      	mov	r8, r0
 8007472:	4614      	mov	r4, r2
 8007474:	460e      	mov	r6, r1
 8007476:	b921      	cbnz	r1, 8007482 <_realloc_r+0x16>
 8007478:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800747c:	4611      	mov	r1, r2
 800747e:	f7ff bf81 	b.w	8007384 <_malloc_r>
 8007482:	b92a      	cbnz	r2, 8007490 <_realloc_r+0x24>
 8007484:	f7ff ff12 	bl	80072ac <_free_r>
 8007488:	4625      	mov	r5, r4
 800748a:	4628      	mov	r0, r5
 800748c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007490:	f000 f992 	bl	80077b8 <_malloc_usable_size_r>
 8007494:	4284      	cmp	r4, r0
 8007496:	4607      	mov	r7, r0
 8007498:	d802      	bhi.n	80074a0 <_realloc_r+0x34>
 800749a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800749e:	d812      	bhi.n	80074c6 <_realloc_r+0x5a>
 80074a0:	4621      	mov	r1, r4
 80074a2:	4640      	mov	r0, r8
 80074a4:	f7ff ff6e 	bl	8007384 <_malloc_r>
 80074a8:	4605      	mov	r5, r0
 80074aa:	2800      	cmp	r0, #0
 80074ac:	d0ed      	beq.n	800748a <_realloc_r+0x1e>
 80074ae:	42bc      	cmp	r4, r7
 80074b0:	4622      	mov	r2, r4
 80074b2:	4631      	mov	r1, r6
 80074b4:	bf28      	it	cs
 80074b6:	463a      	movcs	r2, r7
 80074b8:	f7ff fd12 	bl	8006ee0 <memcpy>
 80074bc:	4631      	mov	r1, r6
 80074be:	4640      	mov	r0, r8
 80074c0:	f7ff fef4 	bl	80072ac <_free_r>
 80074c4:	e7e1      	b.n	800748a <_realloc_r+0x1e>
 80074c6:	4635      	mov	r5, r6
 80074c8:	e7df      	b.n	800748a <_realloc_r+0x1e>

080074ca <__ssputs_r>:
 80074ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074ce:	688e      	ldr	r6, [r1, #8]
 80074d0:	429e      	cmp	r6, r3
 80074d2:	4682      	mov	sl, r0
 80074d4:	460c      	mov	r4, r1
 80074d6:	4690      	mov	r8, r2
 80074d8:	461f      	mov	r7, r3
 80074da:	d838      	bhi.n	800754e <__ssputs_r+0x84>
 80074dc:	898a      	ldrh	r2, [r1, #12]
 80074de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80074e2:	d032      	beq.n	800754a <__ssputs_r+0x80>
 80074e4:	6825      	ldr	r5, [r4, #0]
 80074e6:	6909      	ldr	r1, [r1, #16]
 80074e8:	eba5 0901 	sub.w	r9, r5, r1
 80074ec:	6965      	ldr	r5, [r4, #20]
 80074ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80074f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80074f6:	3301      	adds	r3, #1
 80074f8:	444b      	add	r3, r9
 80074fa:	106d      	asrs	r5, r5, #1
 80074fc:	429d      	cmp	r5, r3
 80074fe:	bf38      	it	cc
 8007500:	461d      	movcc	r5, r3
 8007502:	0553      	lsls	r3, r2, #21
 8007504:	d531      	bpl.n	800756a <__ssputs_r+0xa0>
 8007506:	4629      	mov	r1, r5
 8007508:	f7ff ff3c 	bl	8007384 <_malloc_r>
 800750c:	4606      	mov	r6, r0
 800750e:	b950      	cbnz	r0, 8007526 <__ssputs_r+0x5c>
 8007510:	230c      	movs	r3, #12
 8007512:	f8ca 3000 	str.w	r3, [sl]
 8007516:	89a3      	ldrh	r3, [r4, #12]
 8007518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800751c:	81a3      	strh	r3, [r4, #12]
 800751e:	f04f 30ff 	mov.w	r0, #4294967295
 8007522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007526:	6921      	ldr	r1, [r4, #16]
 8007528:	464a      	mov	r2, r9
 800752a:	f7ff fcd9 	bl	8006ee0 <memcpy>
 800752e:	89a3      	ldrh	r3, [r4, #12]
 8007530:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007538:	81a3      	strh	r3, [r4, #12]
 800753a:	6126      	str	r6, [r4, #16]
 800753c:	6165      	str	r5, [r4, #20]
 800753e:	444e      	add	r6, r9
 8007540:	eba5 0509 	sub.w	r5, r5, r9
 8007544:	6026      	str	r6, [r4, #0]
 8007546:	60a5      	str	r5, [r4, #8]
 8007548:	463e      	mov	r6, r7
 800754a:	42be      	cmp	r6, r7
 800754c:	d900      	bls.n	8007550 <__ssputs_r+0x86>
 800754e:	463e      	mov	r6, r7
 8007550:	6820      	ldr	r0, [r4, #0]
 8007552:	4632      	mov	r2, r6
 8007554:	4641      	mov	r1, r8
 8007556:	f7ff fe8f 	bl	8007278 <memmove>
 800755a:	68a3      	ldr	r3, [r4, #8]
 800755c:	1b9b      	subs	r3, r3, r6
 800755e:	60a3      	str	r3, [r4, #8]
 8007560:	6823      	ldr	r3, [r4, #0]
 8007562:	4433      	add	r3, r6
 8007564:	6023      	str	r3, [r4, #0]
 8007566:	2000      	movs	r0, #0
 8007568:	e7db      	b.n	8007522 <__ssputs_r+0x58>
 800756a:	462a      	mov	r2, r5
 800756c:	f7ff ff7e 	bl	800746c <_realloc_r>
 8007570:	4606      	mov	r6, r0
 8007572:	2800      	cmp	r0, #0
 8007574:	d1e1      	bne.n	800753a <__ssputs_r+0x70>
 8007576:	6921      	ldr	r1, [r4, #16]
 8007578:	4650      	mov	r0, sl
 800757a:	f7ff fe97 	bl	80072ac <_free_r>
 800757e:	e7c7      	b.n	8007510 <__ssputs_r+0x46>

08007580 <_svfiprintf_r>:
 8007580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007584:	4698      	mov	r8, r3
 8007586:	898b      	ldrh	r3, [r1, #12]
 8007588:	061b      	lsls	r3, r3, #24
 800758a:	b09d      	sub	sp, #116	; 0x74
 800758c:	4607      	mov	r7, r0
 800758e:	460d      	mov	r5, r1
 8007590:	4614      	mov	r4, r2
 8007592:	d50e      	bpl.n	80075b2 <_svfiprintf_r+0x32>
 8007594:	690b      	ldr	r3, [r1, #16]
 8007596:	b963      	cbnz	r3, 80075b2 <_svfiprintf_r+0x32>
 8007598:	2140      	movs	r1, #64	; 0x40
 800759a:	f7ff fef3 	bl	8007384 <_malloc_r>
 800759e:	6028      	str	r0, [r5, #0]
 80075a0:	6128      	str	r0, [r5, #16]
 80075a2:	b920      	cbnz	r0, 80075ae <_svfiprintf_r+0x2e>
 80075a4:	230c      	movs	r3, #12
 80075a6:	603b      	str	r3, [r7, #0]
 80075a8:	f04f 30ff 	mov.w	r0, #4294967295
 80075ac:	e0d1      	b.n	8007752 <_svfiprintf_r+0x1d2>
 80075ae:	2340      	movs	r3, #64	; 0x40
 80075b0:	616b      	str	r3, [r5, #20]
 80075b2:	2300      	movs	r3, #0
 80075b4:	9309      	str	r3, [sp, #36]	; 0x24
 80075b6:	2320      	movs	r3, #32
 80075b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80075c0:	2330      	movs	r3, #48	; 0x30
 80075c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800776c <_svfiprintf_r+0x1ec>
 80075c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075ca:	f04f 0901 	mov.w	r9, #1
 80075ce:	4623      	mov	r3, r4
 80075d0:	469a      	mov	sl, r3
 80075d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075d6:	b10a      	cbz	r2, 80075dc <_svfiprintf_r+0x5c>
 80075d8:	2a25      	cmp	r2, #37	; 0x25
 80075da:	d1f9      	bne.n	80075d0 <_svfiprintf_r+0x50>
 80075dc:	ebba 0b04 	subs.w	fp, sl, r4
 80075e0:	d00b      	beq.n	80075fa <_svfiprintf_r+0x7a>
 80075e2:	465b      	mov	r3, fp
 80075e4:	4622      	mov	r2, r4
 80075e6:	4629      	mov	r1, r5
 80075e8:	4638      	mov	r0, r7
 80075ea:	f7ff ff6e 	bl	80074ca <__ssputs_r>
 80075ee:	3001      	adds	r0, #1
 80075f0:	f000 80aa 	beq.w	8007748 <_svfiprintf_r+0x1c8>
 80075f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075f6:	445a      	add	r2, fp
 80075f8:	9209      	str	r2, [sp, #36]	; 0x24
 80075fa:	f89a 3000 	ldrb.w	r3, [sl]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	f000 80a2 	beq.w	8007748 <_svfiprintf_r+0x1c8>
 8007604:	2300      	movs	r3, #0
 8007606:	f04f 32ff 	mov.w	r2, #4294967295
 800760a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800760e:	f10a 0a01 	add.w	sl, sl, #1
 8007612:	9304      	str	r3, [sp, #16]
 8007614:	9307      	str	r3, [sp, #28]
 8007616:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800761a:	931a      	str	r3, [sp, #104]	; 0x68
 800761c:	4654      	mov	r4, sl
 800761e:	2205      	movs	r2, #5
 8007620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007624:	4851      	ldr	r0, [pc, #324]	; (800776c <_svfiprintf_r+0x1ec>)
 8007626:	f7f8 fddb 	bl	80001e0 <memchr>
 800762a:	9a04      	ldr	r2, [sp, #16]
 800762c:	b9d8      	cbnz	r0, 8007666 <_svfiprintf_r+0xe6>
 800762e:	06d0      	lsls	r0, r2, #27
 8007630:	bf44      	itt	mi
 8007632:	2320      	movmi	r3, #32
 8007634:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007638:	0711      	lsls	r1, r2, #28
 800763a:	bf44      	itt	mi
 800763c:	232b      	movmi	r3, #43	; 0x2b
 800763e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007642:	f89a 3000 	ldrb.w	r3, [sl]
 8007646:	2b2a      	cmp	r3, #42	; 0x2a
 8007648:	d015      	beq.n	8007676 <_svfiprintf_r+0xf6>
 800764a:	9a07      	ldr	r2, [sp, #28]
 800764c:	4654      	mov	r4, sl
 800764e:	2000      	movs	r0, #0
 8007650:	f04f 0c0a 	mov.w	ip, #10
 8007654:	4621      	mov	r1, r4
 8007656:	f811 3b01 	ldrb.w	r3, [r1], #1
 800765a:	3b30      	subs	r3, #48	; 0x30
 800765c:	2b09      	cmp	r3, #9
 800765e:	d94e      	bls.n	80076fe <_svfiprintf_r+0x17e>
 8007660:	b1b0      	cbz	r0, 8007690 <_svfiprintf_r+0x110>
 8007662:	9207      	str	r2, [sp, #28]
 8007664:	e014      	b.n	8007690 <_svfiprintf_r+0x110>
 8007666:	eba0 0308 	sub.w	r3, r0, r8
 800766a:	fa09 f303 	lsl.w	r3, r9, r3
 800766e:	4313      	orrs	r3, r2
 8007670:	9304      	str	r3, [sp, #16]
 8007672:	46a2      	mov	sl, r4
 8007674:	e7d2      	b.n	800761c <_svfiprintf_r+0x9c>
 8007676:	9b03      	ldr	r3, [sp, #12]
 8007678:	1d19      	adds	r1, r3, #4
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	9103      	str	r1, [sp, #12]
 800767e:	2b00      	cmp	r3, #0
 8007680:	bfbb      	ittet	lt
 8007682:	425b      	neglt	r3, r3
 8007684:	f042 0202 	orrlt.w	r2, r2, #2
 8007688:	9307      	strge	r3, [sp, #28]
 800768a:	9307      	strlt	r3, [sp, #28]
 800768c:	bfb8      	it	lt
 800768e:	9204      	strlt	r2, [sp, #16]
 8007690:	7823      	ldrb	r3, [r4, #0]
 8007692:	2b2e      	cmp	r3, #46	; 0x2e
 8007694:	d10c      	bne.n	80076b0 <_svfiprintf_r+0x130>
 8007696:	7863      	ldrb	r3, [r4, #1]
 8007698:	2b2a      	cmp	r3, #42	; 0x2a
 800769a:	d135      	bne.n	8007708 <_svfiprintf_r+0x188>
 800769c:	9b03      	ldr	r3, [sp, #12]
 800769e:	1d1a      	adds	r2, r3, #4
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	9203      	str	r2, [sp, #12]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	bfb8      	it	lt
 80076a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80076ac:	3402      	adds	r4, #2
 80076ae:	9305      	str	r3, [sp, #20]
 80076b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800777c <_svfiprintf_r+0x1fc>
 80076b4:	7821      	ldrb	r1, [r4, #0]
 80076b6:	2203      	movs	r2, #3
 80076b8:	4650      	mov	r0, sl
 80076ba:	f7f8 fd91 	bl	80001e0 <memchr>
 80076be:	b140      	cbz	r0, 80076d2 <_svfiprintf_r+0x152>
 80076c0:	2340      	movs	r3, #64	; 0x40
 80076c2:	eba0 000a 	sub.w	r0, r0, sl
 80076c6:	fa03 f000 	lsl.w	r0, r3, r0
 80076ca:	9b04      	ldr	r3, [sp, #16]
 80076cc:	4303      	orrs	r3, r0
 80076ce:	3401      	adds	r4, #1
 80076d0:	9304      	str	r3, [sp, #16]
 80076d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076d6:	4826      	ldr	r0, [pc, #152]	; (8007770 <_svfiprintf_r+0x1f0>)
 80076d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076dc:	2206      	movs	r2, #6
 80076de:	f7f8 fd7f 	bl	80001e0 <memchr>
 80076e2:	2800      	cmp	r0, #0
 80076e4:	d038      	beq.n	8007758 <_svfiprintf_r+0x1d8>
 80076e6:	4b23      	ldr	r3, [pc, #140]	; (8007774 <_svfiprintf_r+0x1f4>)
 80076e8:	bb1b      	cbnz	r3, 8007732 <_svfiprintf_r+0x1b2>
 80076ea:	9b03      	ldr	r3, [sp, #12]
 80076ec:	3307      	adds	r3, #7
 80076ee:	f023 0307 	bic.w	r3, r3, #7
 80076f2:	3308      	adds	r3, #8
 80076f4:	9303      	str	r3, [sp, #12]
 80076f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076f8:	4433      	add	r3, r6
 80076fa:	9309      	str	r3, [sp, #36]	; 0x24
 80076fc:	e767      	b.n	80075ce <_svfiprintf_r+0x4e>
 80076fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8007702:	460c      	mov	r4, r1
 8007704:	2001      	movs	r0, #1
 8007706:	e7a5      	b.n	8007654 <_svfiprintf_r+0xd4>
 8007708:	2300      	movs	r3, #0
 800770a:	3401      	adds	r4, #1
 800770c:	9305      	str	r3, [sp, #20]
 800770e:	4619      	mov	r1, r3
 8007710:	f04f 0c0a 	mov.w	ip, #10
 8007714:	4620      	mov	r0, r4
 8007716:	f810 2b01 	ldrb.w	r2, [r0], #1
 800771a:	3a30      	subs	r2, #48	; 0x30
 800771c:	2a09      	cmp	r2, #9
 800771e:	d903      	bls.n	8007728 <_svfiprintf_r+0x1a8>
 8007720:	2b00      	cmp	r3, #0
 8007722:	d0c5      	beq.n	80076b0 <_svfiprintf_r+0x130>
 8007724:	9105      	str	r1, [sp, #20]
 8007726:	e7c3      	b.n	80076b0 <_svfiprintf_r+0x130>
 8007728:	fb0c 2101 	mla	r1, ip, r1, r2
 800772c:	4604      	mov	r4, r0
 800772e:	2301      	movs	r3, #1
 8007730:	e7f0      	b.n	8007714 <_svfiprintf_r+0x194>
 8007732:	ab03      	add	r3, sp, #12
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	462a      	mov	r2, r5
 8007738:	4b0f      	ldr	r3, [pc, #60]	; (8007778 <_svfiprintf_r+0x1f8>)
 800773a:	a904      	add	r1, sp, #16
 800773c:	4638      	mov	r0, r7
 800773e:	f3af 8000 	nop.w
 8007742:	1c42      	adds	r2, r0, #1
 8007744:	4606      	mov	r6, r0
 8007746:	d1d6      	bne.n	80076f6 <_svfiprintf_r+0x176>
 8007748:	89ab      	ldrh	r3, [r5, #12]
 800774a:	065b      	lsls	r3, r3, #25
 800774c:	f53f af2c 	bmi.w	80075a8 <_svfiprintf_r+0x28>
 8007750:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007752:	b01d      	add	sp, #116	; 0x74
 8007754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007758:	ab03      	add	r3, sp, #12
 800775a:	9300      	str	r3, [sp, #0]
 800775c:	462a      	mov	r2, r5
 800775e:	4b06      	ldr	r3, [pc, #24]	; (8007778 <_svfiprintf_r+0x1f8>)
 8007760:	a904      	add	r1, sp, #16
 8007762:	4638      	mov	r0, r7
 8007764:	f7ff fc40 	bl	8006fe8 <_printf_i>
 8007768:	e7eb      	b.n	8007742 <_svfiprintf_r+0x1c2>
 800776a:	bf00      	nop
 800776c:	08007a00 	.word	0x08007a00
 8007770:	08007a0a 	.word	0x08007a0a
 8007774:	00000000 	.word	0x00000000
 8007778:	080074cb 	.word	0x080074cb
 800777c:	08007a06 	.word	0x08007a06

08007780 <_sbrk_r>:
 8007780:	b538      	push	{r3, r4, r5, lr}
 8007782:	4d06      	ldr	r5, [pc, #24]	; (800779c <_sbrk_r+0x1c>)
 8007784:	2300      	movs	r3, #0
 8007786:	4604      	mov	r4, r0
 8007788:	4608      	mov	r0, r1
 800778a:	602b      	str	r3, [r5, #0]
 800778c:	f7fc fa38 	bl	8003c00 <_sbrk>
 8007790:	1c43      	adds	r3, r0, #1
 8007792:	d102      	bne.n	800779a <_sbrk_r+0x1a>
 8007794:	682b      	ldr	r3, [r5, #0]
 8007796:	b103      	cbz	r3, 800779a <_sbrk_r+0x1a>
 8007798:	6023      	str	r3, [r4, #0]
 800779a:	bd38      	pop	{r3, r4, r5, pc}
 800779c:	200007b4 	.word	0x200007b4

080077a0 <__malloc_lock>:
 80077a0:	4801      	ldr	r0, [pc, #4]	; (80077a8 <__malloc_lock+0x8>)
 80077a2:	f7ff bd67 	b.w	8007274 <__retarget_lock_acquire_recursive>
 80077a6:	bf00      	nop
 80077a8:	200007a8 	.word	0x200007a8

080077ac <__malloc_unlock>:
 80077ac:	4801      	ldr	r0, [pc, #4]	; (80077b4 <__malloc_unlock+0x8>)
 80077ae:	f7ff bd62 	b.w	8007276 <__retarget_lock_release_recursive>
 80077b2:	bf00      	nop
 80077b4:	200007a8 	.word	0x200007a8

080077b8 <_malloc_usable_size_r>:
 80077b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077bc:	1f18      	subs	r0, r3, #4
 80077be:	2b00      	cmp	r3, #0
 80077c0:	bfbc      	itt	lt
 80077c2:	580b      	ldrlt	r3, [r1, r0]
 80077c4:	18c0      	addlt	r0, r0, r3
 80077c6:	4770      	bx	lr

080077c8 <_init>:
 80077c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ca:	bf00      	nop
 80077cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ce:	bc08      	pop	{r3}
 80077d0:	469e      	mov	lr, r3
 80077d2:	4770      	bx	lr

080077d4 <_fini>:
 80077d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077d6:	bf00      	nop
 80077d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077da:	bc08      	pop	{r3}
 80077dc:	469e      	mov	lr, r3
 80077de:	4770      	bx	lr
